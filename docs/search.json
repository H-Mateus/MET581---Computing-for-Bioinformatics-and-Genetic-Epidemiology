[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "This website houses the lecture materials associated with the MET581 module R lectures.\nUse the side bar to navigate to lecture materials.\nYou can find the source files for this website and the lecture materials in GitHub here."
  },
  {
    "objectID": "10_resources/01_workshop_answers/met581_programming_in_r_workshop_answers.html",
    "href": "10_resources/01_workshop_answers/met581_programming_in_r_workshop_answers.html",
    "title": "Programming in R Workshop",
    "section": "",
    "text": "Load purrr, tidyverse and dplyr packages.\n\nCodelibrary(purrr)\nlibrary(tidyverse)\nlibrary(conflicted)\nlibrary(dplyr)\n\n\nLoad the Eukaryotes dataset - only have to run this once to get the data\n\nCodeeukaryotes &lt;- read_tsv(\n  file = \"ftp://ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/eukaryotes.txt\",\n  na = c(\"\", \"na\", \"-\")\n)\n\n# Reformat dataset headers\nnames_new &lt;- names(eukaryotes) |&gt;\n  str_replace_all(\"[#%()]\", \"\") |&gt;\n  str_replace_all(\"[ /]\", \"_\") |&gt;\n  str_to_lower()\n\neukaryotes &lt;- eukaryotes |&gt;\n  set_names(names_new)\n\n# Save tibble\nwrite_tsv(eukaryotes, \"eukaryotes.tsv\")\n\n\nLoad the saved dataset\n\nCodeeukaryotes &lt;- read_tsv(\n  \"https://raw.githubusercontent.com/swuyts/purrr_tutorial/master/data/eukaryotes.tsv\"\n)\n\nRows: 11508 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (10): organism_name, bioproject_accession, group, subgroup, assembly_ac...\ndbl   (7): taxid, bioproject_id, size_mb, gc, scaffolds, genes, proteins\ndate  (2): release_date, modify_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHow many different organisms are there in our dataset?\n\nCodeeukaryotes |&gt;\n  pull(organism_name) |&gt;\n  n_distinct()\n\n[1] 6111\n\n\nSubset dataframe by selecting variables for the analysis:\n\nCodeeukaryotes_subset &lt;- eukaryotes |&gt;\n  select(organism_name, group, subgroup)\n\n\nUsing n_distinct to each variable of eukaryotes_subset\n\nCodemap(eukaryotes_subset, n_distinct)\n\n$organism_name\n[1] 6111\n\n$group\n[1] 5\n\n$subgroup\n[1] 19\n\nCodeeukaryotes_subset |&gt;\n  map(n_distinct)\n\n$organism_name\n[1] 6111\n\n$group\n[1] 5\n\n$subgroup\n[1] 19",
    "crumbs": [
      "Home",
      "Programming in R",
      "Workshop"
    ]
  },
  {
    "objectID": "10_resources/01_workshop_answers/met581_programming_in_r_workshop_answers.html#load-packages",
    "href": "10_resources/01_workshop_answers/met581_programming_in_r_workshop_answers.html#load-packages",
    "title": "Programming in R Workshop",
    "section": "",
    "text": "Load purrr, tidyverse and dplyr packages.\n\nCodelibrary(purrr)\nlibrary(tidyverse)\nlibrary(conflicted)\nlibrary(dplyr)\n\n\nLoad the Eukaryotes dataset - only have to run this once to get the data\n\nCodeeukaryotes &lt;- read_tsv(\n  file = \"ftp://ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/eukaryotes.txt\",\n  na = c(\"\", \"na\", \"-\")\n)\n\n# Reformat dataset headers\nnames_new &lt;- names(eukaryotes) |&gt;\n  str_replace_all(\"[#%()]\", \"\") |&gt;\n  str_replace_all(\"[ /]\", \"_\") |&gt;\n  str_to_lower()\n\neukaryotes &lt;- eukaryotes |&gt;\n  set_names(names_new)\n\n# Save tibble\nwrite_tsv(eukaryotes, \"eukaryotes.tsv\")\n\n\nLoad the saved dataset\n\nCodeeukaryotes &lt;- read_tsv(\n  \"https://raw.githubusercontent.com/swuyts/purrr_tutorial/master/data/eukaryotes.tsv\"\n)\n\nRows: 11508 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (10): organism_name, bioproject_accession, group, subgroup, assembly_ac...\ndbl   (7): taxid, bioproject_id, size_mb, gc, scaffolds, genes, proteins\ndate  (2): release_date, modify_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHow many different organisms are there in our dataset?\n\nCodeeukaryotes |&gt;\n  pull(organism_name) |&gt;\n  n_distinct()\n\n[1] 6111\n\n\nSubset dataframe by selecting variables for the analysis:\n\nCodeeukaryotes_subset &lt;- eukaryotes |&gt;\n  select(organism_name, group, subgroup)\n\n\nUsing n_distinct to each variable of eukaryotes_subset\n\nCodemap(eukaryotes_subset, n_distinct)\n\n$organism_name\n[1] 6111\n\n$group\n[1] 5\n\n$subgroup\n[1] 19\n\nCodeeukaryotes_subset |&gt;\n  map(n_distinct)\n\n$organism_name\n[1] 6111\n\n$group\n[1] 5\n\n$subgroup\n[1] 19",
    "crumbs": [
      "Home",
      "Programming in R",
      "Workshop"
    ]
  },
  {
    "objectID": "10_resources/01_workshop_answers/met581_programming_in_r_workshop_answers.html#nested-tibbles",
    "href": "10_resources/01_workshop_answers/met581_programming_in_r_workshop_answers.html#nested-tibbles",
    "title": "Programming in R Workshop",
    "section": "Nested Tibbles",
    "text": "Nested Tibbles\nSplit the eukaryotes dataset according to groups defined in the group variable:\n\nCodeeukaryotes |&gt; pull(group) |&gt; unique()\n\n[1] \"Other\"    \"Protists\" \"Plants\"   \"Fungi\"    \"Animals\" \n\nCodeeukaryotes_nested &lt;- eukaryotes |&gt;\n  group_by(group) |&gt;\n  nest()\n\neukaryotes_nested\n\n# A tibble: 5 × 2\n# Groups:   group [5]\n  group    data                 \n  &lt;chr&gt;    &lt;list&gt;               \n1 Other    &lt;tibble [51 × 18]&gt;   \n2 Protists &lt;tibble [888 × 18]&gt;  \n3 Plants   &lt;tibble [1,304 × 18]&gt;\n4 Fungi    &lt;tibble [6,064 × 18]&gt;\n5 Animals  &lt;tibble [3,201 × 18]&gt;\n\n\nSplit the “eukaryotes_nested” into 5 smaller dataframes.\n\nCodeeukaryotes_nested |&gt; pull(data)\n\n[[1]]\n# A tibble: 51 × 18\n   organism_name       taxid bioproject_accession bioproject_id subgroup size_mb\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 Pyropia yezoensis    2788 PRJNA589917                 589917 Other      108. \n 2 Thalassiosira pse… 296543 PRJNA191                       191 Other       32.4\n 3 Guillardia theta … 905079 PRJNA53577                   53577 Other       87.1\n 4 Cyanidioschyzon m… 280699 PRJNA10792                   10792 Other       16.5\n 5 Galdieria sulphur… 130081 PRJNA13023                   13023 Other       13.7\n 6 Phaeodactylum tri… 556484 PRJNA13152                   13152 Other       27.5\n 7 Bigelowiella nata… 753081 PRJNA47111                   47111 Other       91.4\n 8 Ectocarpus silicu…   2880 PRJEA42625                   42625 Other      196. \n 9 Thalassiosira oce… 159749 PRJNA36595                   36595 Other       92.2\n10 Fragilariopsis cy… 635003 PRJNA32761                   32761 Other       80.5\n# ℹ 41 more rows\n# ℹ 12 more variables: gc &lt;dbl&gt;, assembly_accession &lt;chr&gt;, replicons &lt;chr&gt;,\n#   wgs &lt;chr&gt;, scaffolds &lt;dbl&gt;, genes &lt;dbl&gt;, proteins &lt;dbl&gt;,\n#   release_date &lt;date&gt;, modify_date &lt;date&gt;, status &lt;chr&gt;, center &lt;chr&gt;,\n#   biosample_accession &lt;chr&gt;\n\n[[2]]\n# A tibble: 888 × 18\n   organism_name       taxid bioproject_accession bioproject_id subgroup size_mb\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 Emiliania huxleyi… 280463 PRJNA77753                   77753 Other P…  168.  \n 2 Leishmania major … 347515 PRJNA10724                   10724 Kinetop…   32.9 \n 3 Trypanosoma bruce… 679716 PRJEA40697                   40697 Kinetop…   22.1 \n 4 Trypanosoma cruzi    5693 PRJNA11755                   11755 Kinetop…   89.9 \n 5 Entamoeba histoly… 294381 PRJNA142                       142 Other P…   20.8 \n 6 Giardia intestina…   5741 PRJNA561185                 561185 Other P…   11.5 \n 7 Eimeria tenella      5802 PRJEB4863                   224694 Apicomp…   51.9 \n 8 Cryptosporidium p… 353152 PRJNA144                       144 Apicomp…    9.10\n 9 Toxoplasma gondii… 508771 PRJNA28893                   28893 Apicomp…   65.7 \n10 Plasmodium berghei   5821 PRJEB11993                  305111 Apicomp…   18.8 \n# ℹ 878 more rows\n# ℹ 12 more variables: gc &lt;dbl&gt;, assembly_accession &lt;chr&gt;, replicons &lt;chr&gt;,\n#   wgs &lt;chr&gt;, scaffolds &lt;dbl&gt;, genes &lt;dbl&gt;, proteins &lt;dbl&gt;,\n#   release_date &lt;date&gt;, modify_date &lt;date&gt;, status &lt;chr&gt;, center &lt;chr&gt;,\n#   biosample_accession &lt;chr&gt;\n\n[[3]]\n# A tibble: 1,304 × 18\n   organism_name       taxid bioproject_accession bioproject_id subgroup size_mb\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 Arabidopsis thali…   3702 PRJNA10719                   10719 Land Pl…    120.\n 2 Glycine max          3847 PRJNA19861                   19861 Land Pl…    979.\n 3 Medicago truncatu…   3880 PRJNA10791                   10791 Land Pl…    413.\n 4 Solanum lycopersi…   4081 PRJNA119                       119 Land Pl…    828.\n 5 Hordeum vulgare s… 112509 PRJEB34217                  576847 Land Pl…   4341.\n 6 Oryza sativa Japo…  39947 PRJNA12269                   12269 Land Pl…    374.\n 7 Triticum aestivum    4565 PRJNA392179                 392179 Land Pl…  15419.\n 8 Zea mays             4577 PRJNA10769                   10769 Land Pl…   2135.\n 9 Coffea arabica      13443 PRJNA506972                 506972 Land Pl…   1094.\n10 Lotus japonicus     34305 PRJDA28941                   28941 Land Pl…    394.\n# ℹ 1,294 more rows\n# ℹ 12 more variables: gc &lt;dbl&gt;, assembly_accession &lt;chr&gt;, replicons &lt;chr&gt;,\n#   wgs &lt;chr&gt;, scaffolds &lt;dbl&gt;, genes &lt;dbl&gt;, proteins &lt;dbl&gt;,\n#   release_date &lt;date&gt;, modify_date &lt;date&gt;, status &lt;chr&gt;, center &lt;chr&gt;,\n#   biosample_accession &lt;chr&gt;\n\n[[4]]\n# A tibble: 6,064 × 18\n   organism_name       taxid bioproject_accession bioproject_id subgroup size_mb\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 Pneumocystis cari… 1.41e6 PRJNA223511                 223511 Ascomyc…    7.66\n 2 Schizosaccharomyc… 4.90e3 PRJNA13836                   13836 Ascomyc…   12.6 \n 3 Saccharomyces cer… 5.59e5 PRJNA43747                   43747 Ascomyc…   12.2 \n 4 Aspergillus nidul… 2.27e5 PRJNA130                       130 Ascomyc…   30.3 \n 5 Aspergillus fumig… 3.31e5 PRJNA131                       131 Ascomyc…   29.4 \n 6 Neurospora crassa… 3.67e5 PRJNA13841                   13841 Ascomyc…   41.1 \n 7 Phanerochaete chr… 5.31e3 PRJNA343563                 343563 Basidio…   39.2 \n 8 Candida albicans … 2.38e5 PRJNA10701                   10701 Ascomyc…   14.3 \n 9 Encephalitozoon c… 2.85e5 PRJNA13833                   13833 Other F…    2.50\n10 Aspergillus terre… 3.42e5 PRJNA15631                   15631 Ascomyc…   29.4 \n# ℹ 6,054 more rows\n# ℹ 12 more variables: gc &lt;dbl&gt;, assembly_accession &lt;chr&gt;, replicons &lt;chr&gt;,\n#   wgs &lt;chr&gt;, scaffolds &lt;dbl&gt;, genes &lt;dbl&gt;, proteins &lt;dbl&gt;,\n#   release_date &lt;date&gt;, modify_date &lt;date&gt;, status &lt;chr&gt;, center &lt;chr&gt;,\n#   biosample_accession &lt;chr&gt;\n\n[[5]]\n# A tibble: 3,201 × 18\n   organism_name       taxid bioproject_accession bioproject_id subgroup size_mb\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1 Caenorhabditis br…   6238 PRJNA10731                   10731 Roundwo…   108. \n 2 Caenorhabditis el…   6239 PRJNA13758                   13758 Roundwo…   100. \n 3 Brugia malayi        6279 PRJNA10729                   10729 Roundwo…    93.7\n 4 Aedes aegypti        7159 PRJNA392114                 392114 Insects   1279. \n 5 Aedes albopictus     7160 PRJNA552090                 552090 Insects   2538. \n 6 Anopheles gambiae… 180454 PRJNA1438                     1438 Insects    265. \n 7 Drosophila melano…   7227 PRJNA13669                   13669 Insects    144. \n 8 Apis mellifera       7460 PRJNA477511                 477511 Insects    225. \n 9 Ciona intestinalis   7719 PRJDA65419                   65419 Other A…   115. \n10 Danio rerio          7955 PRJNA11776                   11776 Fishes    1679. \n# ℹ 3,191 more rows\n# ℹ 12 more variables: gc &lt;dbl&gt;, assembly_accession &lt;chr&gt;, replicons &lt;chr&gt;,\n#   wgs &lt;chr&gt;, scaffolds &lt;dbl&gt;, genes &lt;dbl&gt;, proteins &lt;dbl&gt;,\n#   release_date &lt;date&gt;, modify_date &lt;date&gt;, status &lt;chr&gt;, center &lt;chr&gt;,\n#   biosample_accession &lt;chr&gt;",
    "crumbs": [
      "Home",
      "Programming in R",
      "Workshop"
    ]
  },
  {
    "objectID": "10_resources/01_workshop_answers/met581_programming_in_r_workshop_answers.html#combine-nested-tibbles-and-map",
    "href": "10_resources/01_workshop_answers/met581_programming_in_r_workshop_answers.html#combine-nested-tibbles-and-map",
    "title": "Programming in R Workshop",
    "section": "Combine nested tibbles and map",
    "text": "Combine nested tibbles and map\nCount number of rows for each sub data frames\n\nCodemap(eukaryotes_nested$data, nrow)\n\n[[1]]\n[1] 51\n\n[[2]]\n[1] 888\n\n[[3]]\n[1] 1304\n\n[[4]]\n[1] 6064\n\n[[5]]\n[1] 3201\n\n\nCreate a new column using mutate()\n\nCodeeukaryotes_nested |&gt;\n  mutate(n_row = map_int(data, nrow))\n\n# A tibble: 5 × 3\n# Groups:   group [5]\n  group    data                  n_row\n  &lt;chr&gt;    &lt;list&gt;                &lt;int&gt;\n1 Other    &lt;tibble [51 × 18]&gt;       51\n2 Protists &lt;tibble [888 × 18]&gt;     888\n3 Plants   &lt;tibble [1,304 × 18]&gt;  1304\n4 Fungi    &lt;tibble [6,064 × 18]&gt;  6064\n5 Animals  &lt;tibble [3,201 × 18]&gt;  3201\n\n\nHow many different organisms are there per group ?\nThere are two different ways:\n\nCode# Define a custom function\nn_distinct_organisms &lt;- function(data) {\n  data |&gt;\n    pull(organism_name) |&gt;\n    n_distinct()\n}\n\n# Define a custom function as a formula\n# .x is the notation for the object that is given as an input to this function.\nn_distinct_organisms2 &lt;- ~ .x |&gt;\n  pull(organism_name) |&gt;\n  n_distinct()\n\n\nApply the function to our nested data:\n\nCodeeukaryotes_nested |&gt;\n  mutate(\n    n_organisms = map_dbl(data, n_distinct_organisms),\n    n_organisms2 = map_dbl(data, n_distinct_organisms2)\n  )\n\n# A tibble: 5 × 4\n# Groups:   group [5]\n  group    data                  n_organisms n_organisms2\n  &lt;chr&gt;    &lt;list&gt;                      &lt;dbl&gt;        &lt;dbl&gt;\n1 Other    &lt;tibble [51 × 18]&gt;             35           35\n2 Protists &lt;tibble [888 × 18]&gt;           490          490\n3 Plants   &lt;tibble [1,304 × 18]&gt;         673          673\n4 Fungi    &lt;tibble [6,064 × 18]&gt;        2926         2926\n5 Animals  &lt;tibble [3,201 × 18]&gt;        1987         1987\n\n\nWe can define the functions on the fly:\n\nCodeeukaryotes_nested |&gt;\n  mutate(\n    n_organisms = map_dbl(data, ~ .x |&gt; pull(organism_name) |&gt; n_distinct()),\n    n_centers = map_dbl(data, ~ .x |&gt; pull(center) |&gt; n_distinct()),\n    n_subgroups = map_dbl(data, ~ .x |&gt; pull(subgroup) |&gt; n_distinct())\n  )\n\n# A tibble: 5 × 5\n# Groups:   group [5]\n  group    data                  n_organisms n_centers n_subgroups\n  &lt;chr&gt;    &lt;list&gt;                      &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1 Other    &lt;tibble [51 × 18]&gt;             35        34           1\n2 Protists &lt;tibble [888 × 18]&gt;           490       265           3\n3 Plants   &lt;tibble [1,304 × 18]&gt;         673       492           3\n4 Fungi    &lt;tibble [6,064 × 18]&gt;        2926       950           3\n5 Animals  &lt;tibble [3,201 × 18]&gt;        1987       769           9",
    "crumbs": [
      "Home",
      "Programming in R",
      "Workshop"
    ]
  },
  {
    "objectID": "10_resources/01_workshop_answers/met581_programming_in_r_workshop_answers.html#pmap-and-walk2-functions",
    "href": "10_resources/01_workshop_answers/met581_programming_in_r_workshop_answers.html#pmap-and-walk2-functions",
    "title": "Programming in R Workshop",
    "section": "pmap and walk2 functions",
    "text": "pmap and walk2 functions\nWe will explain by the following example for pmap:\n\nCodedf &lt;- data.frame(\n  x = c(\n    \"ATTTTACTGGGAGGGAA\",\n    \"TATTTTTTAAAGGGCCC\",\n    \"GCGCGCCCCAAATTATAGGC\",\n    \"TGCCACATTTTATCCGCGCA\"\n  ),\n  pattern = c(\"A\", \"T\", \"G\", \"C\"),\n  replacement = c(\"a\", \"t\", \"g\", \"c\"),\n  stringsAsFactors = FALSE\n)\n\npmap(df, gsub)\n\n[[1]]\n[1] \"aTTTTaCTGGGaGGGaa\"\n\n[[2]]\n[1] \"tAttttttAAAGGGCCC\"\n\n[[3]]\n[1] \"gCgCgCCCCAAATTATAggC\"\n\n[[4]]\n[1] \"TGccAcATTTTATccGcGcA\"\n\n\nExample for walk2:\n\nCodedf1 &lt;- data.frame(\n  index = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n  value = c(\n    40,\n    20,\n    10,\n    5,\n    50,\n    80,\n    30,\n    20,\n    80,\n    90,\n    33,\n    21,\n    56,\n    66,\n    43,\n    89,\n    66,\n    80,\n    30,\n    10\n  ),\n  category = c(\n    \"A\",\n    \"A\",\n    \"A\",\n    \"A\",\n    \"A\",\n    \"A\",\n    \"A\",\n    \"A\",\n    \"A\",\n    \"A\",\n    \"B\",\n    \"B\",\n    \"B\",\n    \"B\",\n    \"B\",\n    \"B\",\n    \"B\",\n    \"B\",\n    \"B\",\n    \"B\"\n  )\n)\n\ndf1 %&gt;%\n  split(.$category) %&gt;%\n  .[order(names(.))] %&gt;%\n  walk2(\n    paste('Plot', names(.)),\n    ~ plot(value ~ index, data = .x, type = \"l\", main = .y)\n  )",
    "crumbs": [
      "Home",
      "Programming in R",
      "Workshop"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html",
    "title": "Shiny Code examples",
    "section": "",
    "text": "I’ll include all the shiny code examples below for easy copying\nYou’ll need to have the shiny package installed for this!\n# Install them with the following:\ninstall.packages(\"shiny\")\ninstall.packages(\"shinythemes\")",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#starthere.r",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#starthere.r",
    "title": "Shiny Code examples",
    "section": "00_starthere.R",
    "text": "00_starthere.R\n\n# This is the code to make the 01_hello example app\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  # App title ----\n  title = \"Hello Shiny!\",\n  # Sidebar panel for inputs ----\n  sidebar = sidebar(\n    # Input: Slider for the number of bins ----\n    sliderInput(\n      inputId = \"bins\",\n      label = \"Number of bins:\",\n      min = 1,\n      max = 50,\n      value = 30\n    )\n  ),\n  # Output: Histogram ----\n  card(plotOutput(outputId = \"distPlot\"))\n)\n\n# Define server logic required to draw a histogram ----\nserver &lt;- function(input, output) {\n  \n  # Histogram of the Old Faithful Geyser Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot &lt;- renderPlot({\n    \n    x    &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n    \n    hist(x, breaks = bins, col = \"#007bc2\", border = \"white\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Histogram of waiting times\")\n    \n  })\n  \n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#template.r",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#template.r",
    "title": "Shiny Code examples",
    "section": "01_template.R",
    "text": "01_template.R\nTry to add a slider input here:\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  # put a slider input here\n)\n\nserver &lt;- function(input, output) {\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#rnom_example.r",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#rnom_example.r",
    "title": "Shiny Code examples",
    "section": "02_rnom_example.R",
    "text": "02_rnom_example.R\nTry to add a radio input and a numeric input used to control a plot. The number should increase the number of datapoints in the plot, and the radio input should control the colours of the plot.\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      # Put your inputs here\n      ),\n    mainPanel(\n      # Put your outputs here\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$plot1 &lt;- renderPlot({\n    # put the plot code here\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#kmeansexample.r",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#kmeansexample.r",
    "title": "Shiny Code examples",
    "section": "03_kmeansexample.R",
    "text": "03_kmeansexample.R\nTry updating this app to: - use mtcars instead of iris - Add another plot in a new column\n\n# 01-kmeans-app\n\npalette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n  \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  headerPanel('Iris k-means clustering'),\n  sidebarPanel(\n    selectInput('xcol', 'X Variable', names(iris)),\n    selectInput('ycol', 'Y Variable', names(iris),\n      selected = names(iris)[[2]]),\n    numericInput('clusters', 'Cluster count', 3,\n      min = 1, max = 9)\n  ),\n  mainPanel(\n    plotOutput('plot1')\n  )\n)\n\nserver &lt;- function(input, output) {\n\n  selectedData &lt;- reactive({\n    iris[, c(input$xcol, input$ycol)]\n  })\n\n  clusters &lt;- reactive({\n    kmeans(selectedData(), input$clusters)\n  })\n\n  output$plot1 &lt;- renderPlot({\n    par(mar = c(5.1, 4.1, 0, 1))\n    plot(selectedData(),\n         col = clusters()$cluster,\n         pch = 20, cex = 3)\n    points(clusters()$centers, pch = 4, cex = 4, lwd = 4)\n  })\n\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#non-reactive-app",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#non-reactive-app",
    "title": "Shiny Code examples",
    "section": "Non-reactive app",
    "text": "Non-reactive app\nSee how the app doesn’t do anything when the slider is moved, but only when the button is pressed?\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(inputId = \"num\", \n              label = \"Choose a number\",\n              min = 1, max = 100, value = 25),\n  actionButton(inputId = \"go\", label = \"Action!\"),\n  plotOutput(\"hist\"),\n  verbatimTextOutput(\"stats\")\n)\n\nserver &lt;- function(input, output, session) {\n  # Create a reactive value to store the data\n  data &lt;- reactiveVal()\n  \n  # observeEvent responds to the action button\n  observeEvent(input$go, {\n    data(rnorm(input$num))\n  })\n  \n  output$hist &lt;- renderPlot({\n    req(data())  # Ensure data is available\n    hist(data())\n  })\n  \n  output$stats &lt;- renderPrint({\n    req(data())  # Ensure data is available\n    summary(data())\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#reactive-app",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#reactive-app",
    "title": "Shiny Code examples",
    "section": "Reactive app",
    "text": "Reactive app\nAs opposed to this app, which automatically updates as the slider value changes\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(inputId = \"num\", \n    label = \"Choose a number\", \n    value = 25, min = 1, max = 100),\n  plotOutput(\"hist\"),\n  verbatimTextOutput(\"stats\")\n)\n\nserver &lt;- function(input, output) {\n  \n  # define the reactive data\n  data &lt;- reactive({\n    rnorm(input$num)\n  })\n  \n  # Use it to make the plot and summary stats\n  output$hist &lt;- renderPlot({\n    hist(data())\n  })\n  output$stats &lt;- renderPrint({\n    summary(data())\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#isolate",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#isolate",
    "title": "Shiny Code examples",
    "section": "Isolate",
    "text": "Isolate\nWhat happens when you remove the isolate function from the following? How does the app change?\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(inputId = \"num\", \n    label = \"Choose a number\", \n    value = 25, min = 1, max = 100),\n  textInput(inputId = \"title\", \n    label = \"Write a title\",\n    value = \"Histogram of Random Normal Values\"),\n  plotOutput(\"hist\")\n)\n\nserver &lt;- function(input, output) {\n  output$hist &lt;- renderPlot({\n    hist(rnorm(input$num), main = isolate(input$title))\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#observe-event",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#observe-event",
    "title": "Shiny Code examples",
    "section": "Observe event",
    "text": "Observe event\nThe app currently prints to the console when you click the button.\nTry to make it print the number in the app itself. Think about the outputs!\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(inputId = \"num\", \n              label = \"Choose a number\",\n              min = 1, max = 100, value = 25),\n  actionButton(inputId = \"go\",label = \"Action!\")\n)\n\nserver &lt;- function(input, output) {\n  \n  # observe responds to the print button\n  # but not the slider\n  observeEvent(input$go, {\n    print(as.numeric(input$num))\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#event-react",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#event-react",
    "title": "Shiny Code examples",
    "section": "Event react",
    "text": "Event react\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(inputId = \"num\", \n    label = \"Choose a number\", \n    value = 25, min = 1, max = 100),\n  actionButton(inputId = \"go\", \n    label = \"Update\"),\n  plotOutput(\"hist\")\n)\n\nserver &lt;- function(input, output) {\n  data &lt;- eventReactive(input$go, {\n    rnorm(input$num) \n  })\n  \n  output$hist &lt;- renderPlot({\n    hist(data())\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#add-a-sidebar",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#add-a-sidebar",
    "title": "Shiny Code examples",
    "section": "Add a sidebar",
    "text": "Add a sidebar\n\nlibrary(shiny)\nui &lt;- fluidPage(\n    sliderInput(inputId = 'num',label = 'myfirstslider',min=1,max=100,value=25),\n    plotOutput(\"hist\")\n)\n\nserver &lt;- function(input, output) {\n  output$hist &lt;- renderPlot({\n    hist(main='test',rnorm(input$num))})\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#tavnav-panel",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#tavnav-panel",
    "title": "Shiny Code examples",
    "section": "Tav/Nav panel",
    "text": "Tav/Nav panel\n\nlibrary(shiny)\n\nui &lt;- fluidPage(title = \"Random generator\",\n  tabsetPanel(              \n    tabPanel(title = \"Normal data\",\n      plotOutput(\"norm\"),\n      actionButton(\"renorm\", \"Resample\")\n    ),\n    tabPanel(title = \"Uniform data\",\n      plotOutput(\"unif\"),\n      actionButton(\"reunif\", \"Resample\")\n    ),\n    tabPanel(title = \"Chi Squared data\",\n      plotOutput(\"chisq\"),\n      actionButton(\"rechisq\", \"Resample\"),\n      tags$h1(\"helloworld\"),\n      HTML(\"&lt;h1&gt;helloworld&lt;/h1&gt;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  \n  rv &lt;- reactiveValues(\n    norm = rnorm(500), \n    unif = runif(500),\n    chisq = rchisq(500, 2))\n  \n  observeEvent(input$renorm, { rv$norm &lt;- rnorm(500) })\n  observeEvent(input$reunif, { rv$unif &lt;- runif(500) })\n  observeEvent(input$rechisq, { rv$chisq &lt;- rchisq(500, 2) })\n  \n  output$norm &lt;- renderPlot({\n    hist(rv$norm, breaks = 30, col = \"grey\", border = \"white\",\n      main = \"500 random draws from a standard normal distribution\")\n  })\n  output$unif &lt;- renderPlot({\n    hist(rv$unif, breaks = 30, col = \"grey\", border = \"white\",\n      main = \"500 random draws from a standard uniform distribution\")\n  })\n  output$chisq &lt;- renderPlot({\n    hist(rv$chisq, breaks = 30, col = \"grey\", border = \"white\",\n       main = \"500 random draws from a Chi Square distribution with two degree of freedom\")\n  })\n}\n\nshinyApp(server = server, ui = ui)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#theme-selector-app",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#theme-selector-app",
    "title": "Shiny Code examples",
    "section": "Theme selector app",
    "text": "Theme selector app\n\nlibrary(shiny)\nlibrary(shinythemes)\n\nshinyApp(\n  ui = fluidPage(\n    shinythemes::themeSelector(),  # &lt;--- Add this somewhere in the UI to get the theme selector\n    sidebarPanel(\n      textInput(\"txt\", \"Text input:\", \"text here\"),\n      sliderInput(\"slider\", \"Slider input:\", 1, 100, 30),\n      actionButton(\"action\", \"Button\"),\n      actionButton(\"action2\", \"Button2\", class = \"btn-primary\")\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Tab 1\"),\n        tabPanel(\"Tab 2\")\n      )\n    )\n  ),\n  server = function(input, output) {}\n)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples.html#custom-css-example",
    "href": "09_ShinyApp/met581_09_shiny_code_examples.html#custom-css-example",
    "title": "Shiny Code examples",
    "section": "Custom css example",
    "text": "Custom css example\nThe following app is an example using custom css.\nIn order for you browser to have access to the css file and the image used, you need to make a special www directory and put the files in there. This directory should be in the same place as the app script, but the script shouldn’t be in the www dir itself. This directory is basically passed to your browser, so when it displays the app it’s given this directory as well.\nI’ll include the css file contents in the code chunk after the app if you want to copy it easily (note that’s it’s quite long so just click the copy button rather than trying to highlight it all!).\n\n{\n    \n    palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n              \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n    \n    library(shiny)\n    \n    ui &lt;- fluidPage(\n        theme = \"bootstrap.css\",\n        tags$img(height = 100, \n                 width = 100, \n                 src = \"beaker.png\"),\n        headerPanel('Iris k-means clustering'),\n        sidebarPanel(\n            selectInput('xcol', 'X Variable', names(iris)),\n            selectInput('ycol', 'Y Variable', names(iris),\n                        selected = names(iris)[[2]]),\n            numericInput('clusters', 'Cluster count', 3,\n                         min = 1, max = 9)\n        ),\n        mainPanel(\n            plotOutput('plot1')\n        )\n    )\n    \n    server &lt;- function(input, output) {\n        \n        selectedData &lt;- reactive({\n            iris[, c(input$xcol, input$ycol)]\n        })\n        \n        clusters &lt;- reactive({\n            kmeans(selectedData(), input$clusters)\n        })\n        \n        output$plot1 &lt;- renderPlot({\n            par(mar = c(5.1, 4.1, 0, 1))\n            plot(selectedData(),\n                 col = clusters()$cluster,\n                 pch = 20, cex = 3)\n            points(clusters()$centers, pch = 4, cex = 4, lwd = 4)\n        })\n        \n    }\n    \n    shinyApp(ui = ui, server = server)\n}\n\nThe css is in the next code chunk, I’ve folded it as it’s several thousand lines long…\n\n\nCode\n/*!\n * bootswatch v3.4.1\n * Homepage: https://bootswatch.com\n * Copyright 2012-2019 Thomas Park\n * Licensed under MIT\n * Based on Bootstrap\n*/\n/*!\n * Bootstrap v3.4.1 (https://getbootstrap.com/)\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\nhtml {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\nbody {\n  margin: 0;\n}\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  vertical-align: baseline;\n}\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n[hidden],\ntemplate {\n  display: none;\n}\na {\n  background-color: transparent;\n}\na:active,\na:hover {\n  outline: 0;\n}\nabbr[title] {\n  border-bottom: none;\n  text-decoration: underline;\n  text-decoration: underline dotted;\n}\nb,\nstrong {\n  font-weight: bold;\n}\ndfn {\n  font-style: italic;\n}\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\nmark {\n  background: #ff0;\n  color: #000;\n}\nsmall {\n  font-size: 80%;\n}\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\nsup {\n  top: -0.5em;\n}\nsub {\n  bottom: -0.25em;\n}\nimg {\n  border: 0;\n}\nsvg:not(:root) {\n  overflow: hidden;\n}\nfigure {\n  margin: 1em 40px;\n}\nhr {\n  box-sizing: content-box;\n  height: 0;\n}\npre {\n  overflow: auto;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit;\n  font: inherit;\n  margin: 0;\n}\nbutton {\n  overflow: visible;\n}\nbutton,\nselect {\n  text-transform: none;\n}\nbutton,\nhtml input[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button;\n  cursor: pointer;\n}\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\ninput {\n  line-height: normal;\n}\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\ninput[type=\"search\"] {\n  -webkit-appearance: textfield;\n  box-sizing: content-box;\n}\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\nlegend {\n  border: 0;\n  padding: 0;\n}\ntextarea {\n  overflow: auto;\n}\noptgroup {\n  font-weight: bold;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\ntd,\nth {\n  padding: 0;\n}\n/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */\n@media print {\n  *,\n  *:before,\n  *:after {\n    color: #000 !important;\n    text-shadow: none !important;\n    background: transparent !important;\n    box-shadow: none !important;\n  }\n  a,\n  a:visited {\n    text-decoration: underline;\n  }\n  a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n  abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n  a[href^=\"#\"]:after,\n  a[href^=\"javascript:\"]:after {\n    content: \"\";\n  }\n  pre,\n  blockquote {\n    border: 1px solid #999;\n    page-break-inside: avoid;\n  }\n  thead {\n    display: table-header-group;\n  }\n  tr,\n  img {\n    page-break-inside: avoid;\n  }\n  img {\n    max-width: 100% !important;\n  }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3;\n  }\n  h2,\n  h3 {\n    page-break-after: avoid;\n  }\n  .navbar {\n    display: none;\n  }\n  .btn &gt; .caret,\n  .dropup &gt; .btn &gt; .caret {\n    border-top-color: #000 !important;\n  }\n  .label {\n    border: 1px solid #000;\n  }\n  .table {\n    border-collapse: collapse !important;\n  }\n  .table td,\n  .table th {\n    background-color: #fff !important;\n  }\n  .table-bordered th,\n  .table-bordered td {\n    border: 1px solid #ddd !important;\n  }\n}\n@font-face {\n  font-family: \"Glyphicons Halflings\";\n  src: url(\"../fonts/glyphicons-halflings-regular.eot\");\n  src: url(\"../fonts/glyphicons-halflings-regular.eot?#iefix\") format(\"embedded-opentype\"), url(\"../fonts/glyphicons-halflings-regular.woff2\") format(\"woff2\"), url(\"../fonts/glyphicons-halflings-regular.woff\") format(\"woff\"), url(\"../fonts/glyphicons-halflings-regular.ttf\") format(\"truetype\"), url(\"../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular\") format(\"svg\");\n}\n.glyphicon {\n  position: relative;\n  top: 1px;\n  display: inline-block;\n  font-family: \"Glyphicons Halflings\";\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.glyphicon-asterisk:before {\n  content: \"\\002a\";\n}\n.glyphicon-plus:before {\n  content: \"\\002b\";\n}\n.glyphicon-euro:before,\n.glyphicon-eur:before {\n  content: \"\\20ac\";\n}\n.glyphicon-minus:before {\n  content: \"\\2212\";\n}\n.glyphicon-cloud:before {\n  content: \"\\2601\";\n}\n.glyphicon-envelope:before {\n  content: \"\\2709\";\n}\n.glyphicon-pencil:before {\n  content: \"\\270f\";\n}\n.glyphicon-glass:before {\n  content: \"\\e001\";\n}\n.glyphicon-music:before {\n  content: \"\\e002\";\n}\n.glyphicon-search:before {\n  content: \"\\e003\";\n}\n.glyphicon-heart:before {\n  content: \"\\e005\";\n}\n.glyphicon-star:before {\n  content: \"\\e006\";\n}\n.glyphicon-star-empty:before {\n  content: \"\\e007\";\n}\n.glyphicon-user:before {\n  content: \"\\e008\";\n}\n.glyphicon-film:before {\n  content: \"\\e009\";\n}\n.glyphicon-th-large:before {\n  content: \"\\e010\";\n}\n.glyphicon-th:before {\n  content: \"\\e011\";\n}\n.glyphicon-th-list:before {\n  content: \"\\e012\";\n}\n.glyphicon-ok:before {\n  content: \"\\e013\";\n}\n.glyphicon-remove:before {\n  content: \"\\e014\";\n}\n.glyphicon-zoom-in:before {\n  content: \"\\e015\";\n}\n.glyphicon-zoom-out:before {\n  content: \"\\e016\";\n}\n.glyphicon-off:before {\n  content: \"\\e017\";\n}\n.glyphicon-signal:before {\n  content: \"\\e018\";\n}\n.glyphicon-cog:before {\n  content: \"\\e019\";\n}\n.glyphicon-trash:before {\n  content: \"\\e020\";\n}\n.glyphicon-home:before {\n  content: \"\\e021\";\n}\n.glyphicon-file:before {\n  content: \"\\e022\";\n}\n.glyphicon-time:before {\n  content: \"\\e023\";\n}\n.glyphicon-road:before {\n  content: \"\\e024\";\n}\n.glyphicon-download-alt:before {\n  content: \"\\e025\";\n}\n.glyphicon-download:before {\n  content: \"\\e026\";\n}\n.glyphicon-upload:before {\n  content: \"\\e027\";\n}\n.glyphicon-inbox:before {\n  content: \"\\e028\";\n}\n.glyphicon-play-circle:before {\n  content: \"\\e029\";\n}\n.glyphicon-repeat:before {\n  content: \"\\e030\";\n}\n.glyphicon-refresh:before {\n  content: \"\\e031\";\n}\n.glyphicon-list-alt:before {\n  content: \"\\e032\";\n}\n.glyphicon-lock:before {\n  content: \"\\e033\";\n}\n.glyphicon-flag:before {\n  content: \"\\e034\";\n}\n.glyphicon-headphones:before {\n  content: \"\\e035\";\n}\n.glyphicon-volume-off:before {\n  content: \"\\e036\";\n}\n.glyphicon-volume-down:before {\n  content: \"\\e037\";\n}\n.glyphicon-volume-up:before {\n  content: \"\\e038\";\n}\n.glyphicon-qrcode:before {\n  content: \"\\e039\";\n}\n.glyphicon-barcode:before {\n  content: \"\\e040\";\n}\n.glyphicon-tag:before {\n  content: \"\\e041\";\n}\n.glyphicon-tags:before {\n  content: \"\\e042\";\n}\n.glyphicon-book:before {\n  content: \"\\e043\";\n}\n.glyphicon-bookmark:before {\n  content: \"\\e044\";\n}\n.glyphicon-print:before {\n  content: \"\\e045\";\n}\n.glyphicon-camera:before {\n  content: \"\\e046\";\n}\n.glyphicon-font:before {\n  content: \"\\e047\";\n}\n.glyphicon-bold:before {\n  content: \"\\e048\";\n}\n.glyphicon-italic:before {\n  content: \"\\e049\";\n}\n.glyphicon-text-height:before {\n  content: \"\\e050\";\n}\n.glyphicon-text-width:before {\n  content: \"\\e051\";\n}\n.glyphicon-align-left:before {\n  content: \"\\e052\";\n}\n.glyphicon-align-center:before {\n  content: \"\\e053\";\n}\n.glyphicon-align-right:before {\n  content: \"\\e054\";\n}\n.glyphicon-align-justify:before {\n  content: \"\\e055\";\n}\n.glyphicon-list:before {\n  content: \"\\e056\";\n}\n.glyphicon-indent-left:before {\n  content: \"\\e057\";\n}\n.glyphicon-indent-right:before {\n  content: \"\\e058\";\n}\n.glyphicon-facetime-video:before {\n  content: \"\\e059\";\n}\n.glyphicon-picture:before {\n  content: \"\\e060\";\n}\n.glyphicon-map-marker:before {\n  content: \"\\e062\";\n}\n.glyphicon-adjust:before {\n  content: \"\\e063\";\n}\n.glyphicon-tint:before {\n  content: \"\\e064\";\n}\n.glyphicon-edit:before {\n  content: \"\\e065\";\n}\n.glyphicon-share:before {\n  content: \"\\e066\";\n}\n.glyphicon-check:before {\n  content: \"\\e067\";\n}\n.glyphicon-move:before {\n  content: \"\\e068\";\n}\n.glyphicon-step-backward:before {\n  content: \"\\e069\";\n}\n.glyphicon-fast-backward:before {\n  content: \"\\e070\";\n}\n.glyphicon-backward:before {\n  content: \"\\e071\";\n}\n.glyphicon-play:before {\n  content: \"\\e072\";\n}\n.glyphicon-pause:before {\n  content: \"\\e073\";\n}\n.glyphicon-stop:before {\n  content: \"\\e074\";\n}\n.glyphicon-forward:before {\n  content: \"\\e075\";\n}\n.glyphicon-fast-forward:before {\n  content: \"\\e076\";\n}\n.glyphicon-step-forward:before {\n  content: \"\\e077\";\n}\n.glyphicon-eject:before {\n  content: \"\\e078\";\n}\n.glyphicon-chevron-left:before {\n  content: \"\\e079\";\n}\n.glyphicon-chevron-right:before {\n  content: \"\\e080\";\n}\n.glyphicon-plus-sign:before {\n  content: \"\\e081\";\n}\n.glyphicon-minus-sign:before {\n  content: \"\\e082\";\n}\n.glyphicon-remove-sign:before {\n  content: \"\\e083\";\n}\n.glyphicon-ok-sign:before {\n  content: \"\\e084\";\n}\n.glyphicon-question-sign:before {\n  content: \"\\e085\";\n}\n.glyphicon-info-sign:before {\n  content: \"\\e086\";\n}\n.glyphicon-screenshot:before {\n  content: \"\\e087\";\n}\n.glyphicon-remove-circle:before {\n  content: \"\\e088\";\n}\n.glyphicon-ok-circle:before {\n  content: \"\\e089\";\n}\n.glyphicon-ban-circle:before {\n  content: \"\\e090\";\n}\n.glyphicon-arrow-left:before {\n  content: \"\\e091\";\n}\n.glyphicon-arrow-right:before {\n  content: \"\\e092\";\n}\n.glyphicon-arrow-up:before {\n  content: \"\\e093\";\n}\n.glyphicon-arrow-down:before {\n  content: \"\\e094\";\n}\n.glyphicon-share-alt:before {\n  content: \"\\e095\";\n}\n.glyphicon-resize-full:before {\n  content: \"\\e096\";\n}\n.glyphicon-resize-small:before {\n  content: \"\\e097\";\n}\n.glyphicon-exclamation-sign:before {\n  content: \"\\e101\";\n}\n.glyphicon-gift:before {\n  content: \"\\e102\";\n}\n.glyphicon-leaf:before {\n  content: \"\\e103\";\n}\n.glyphicon-fire:before {\n  content: \"\\e104\";\n}\n.glyphicon-eye-open:before {\n  content: \"\\e105\";\n}\n.glyphicon-eye-close:before {\n  content: \"\\e106\";\n}\n.glyphicon-warning-sign:before {\n  content: \"\\e107\";\n}\n.glyphicon-plane:before {\n  content: \"\\e108\";\n}\n.glyphicon-calendar:before {\n  content: \"\\e109\";\n}\n.glyphicon-random:before {\n  content: \"\\e110\";\n}\n.glyphicon-comment:before {\n  content: \"\\e111\";\n}\n.glyphicon-magnet:before {\n  content: \"\\e112\";\n}\n.glyphicon-chevron-up:before {\n  content: \"\\e113\";\n}\n.glyphicon-chevron-down:before {\n  content: \"\\e114\";\n}\n.glyphicon-retweet:before {\n  content: \"\\e115\";\n}\n.glyphicon-shopping-cart:before {\n  content: \"\\e116\";\n}\n.glyphicon-folder-close:before {\n  content: \"\\e117\";\n}\n.glyphicon-folder-open:before {\n  content: \"\\e118\";\n}\n.glyphicon-resize-vertical:before {\n  content: \"\\e119\";\n}\n.glyphicon-resize-horizontal:before {\n  content: \"\\e120\";\n}\n.glyphicon-hdd:before {\n  content: \"\\e121\";\n}\n.glyphicon-bullhorn:before {\n  content: \"\\e122\";\n}\n.glyphicon-bell:before {\n  content: \"\\e123\";\n}\n.glyphicon-certificate:before {\n  content: \"\\e124\";\n}\n.glyphicon-thumbs-up:before {\n  content: \"\\e125\";\n}\n.glyphicon-thumbs-down:before {\n  content: \"\\e126\";\n}\n.glyphicon-hand-right:before {\n  content: \"\\e127\";\n}\n.glyphicon-hand-left:before {\n  content: \"\\e128\";\n}\n.glyphicon-hand-up:before {\n  content: \"\\e129\";\n}\n.glyphicon-hand-down:before {\n  content: \"\\e130\";\n}\n.glyphicon-circle-arrow-right:before {\n  content: \"\\e131\";\n}\n.glyphicon-circle-arrow-left:before {\n  content: \"\\e132\";\n}\n.glyphicon-circle-arrow-up:before {\n  content: \"\\e133\";\n}\n.glyphicon-circle-arrow-down:before {\n  content: \"\\e134\";\n}\n.glyphicon-globe:before {\n  content: \"\\e135\";\n}\n.glyphicon-wrench:before {\n  content: \"\\e136\";\n}\n.glyphicon-tasks:before {\n  content: \"\\e137\";\n}\n.glyphicon-filter:before {\n  content: \"\\e138\";\n}\n.glyphicon-briefcase:before {\n  content: \"\\e139\";\n}\n.glyphicon-fullscreen:before {\n  content: \"\\e140\";\n}\n.glyphicon-dashboard:before {\n  content: \"\\e141\";\n}\n.glyphicon-paperclip:before {\n  content: \"\\e142\";\n}\n.glyphicon-heart-empty:before {\n  content: \"\\e143\";\n}\n.glyphicon-link:before {\n  content: \"\\e144\";\n}\n.glyphicon-phone:before {\n  content: \"\\e145\";\n}\n.glyphicon-pushpin:before {\n  content: \"\\e146\";\n}\n.glyphicon-usd:before {\n  content: \"\\e148\";\n}\n.glyphicon-gbp:before {\n  content: \"\\e149\";\n}\n.glyphicon-sort:before {\n  content: \"\\e150\";\n}\n.glyphicon-sort-by-alphabet:before {\n  content: \"\\e151\";\n}\n.glyphicon-sort-by-alphabet-alt:before {\n  content: \"\\e152\";\n}\n.glyphicon-sort-by-order:before {\n  content: \"\\e153\";\n}\n.glyphicon-sort-by-order-alt:before {\n  content: \"\\e154\";\n}\n.glyphicon-sort-by-attributes:before {\n  content: \"\\e155\";\n}\n.glyphicon-sort-by-attributes-alt:before {\n  content: \"\\e156\";\n}\n.glyphicon-unchecked:before {\n  content: \"\\e157\";\n}\n.glyphicon-expand:before {\n  content: \"\\e158\";\n}\n.glyphicon-collapse-down:before {\n  content: \"\\e159\";\n}\n.glyphicon-collapse-up:before {\n  content: \"\\e160\";\n}\n.glyphicon-log-in:before {\n  content: \"\\e161\";\n}\n.glyphicon-flash:before {\n  content: \"\\e162\";\n}\n.glyphicon-log-out:before {\n  content: \"\\e163\";\n}\n.glyphicon-new-window:before {\n  content: \"\\e164\";\n}\n.glyphicon-record:before {\n  content: \"\\e165\";\n}\n.glyphicon-save:before {\n  content: \"\\e166\";\n}\n.glyphicon-open:before {\n  content: \"\\e167\";\n}\n.glyphicon-saved:before {\n  content: \"\\e168\";\n}\n.glyphicon-import:before {\n  content: \"\\e169\";\n}\n.glyphicon-export:before {\n  content: \"\\e170\";\n}\n.glyphicon-send:before {\n  content: \"\\e171\";\n}\n.glyphicon-floppy-disk:before {\n  content: \"\\e172\";\n}\n.glyphicon-floppy-saved:before {\n  content: \"\\e173\";\n}\n.glyphicon-floppy-remove:before {\n  content: \"\\e174\";\n}\n.glyphicon-floppy-save:before {\n  content: \"\\e175\";\n}\n.glyphicon-floppy-open:before {\n  content: \"\\e176\";\n}\n.glyphicon-credit-card:before {\n  content: \"\\e177\";\n}\n.glyphicon-transfer:before {\n  content: \"\\e178\";\n}\n.glyphicon-cutlery:before {\n  content: \"\\e179\";\n}\n.glyphicon-header:before {\n  content: \"\\e180\";\n}\n.glyphicon-compressed:before {\n  content: \"\\e181\";\n}\n.glyphicon-earphone:before {\n  content: \"\\e182\";\n}\n.glyphicon-phone-alt:before {\n  content: \"\\e183\";\n}\n.glyphicon-tower:before {\n  content: \"\\e184\";\n}\n.glyphicon-stats:before {\n  content: \"\\e185\";\n}\n.glyphicon-sd-video:before {\n  content: \"\\e186\";\n}\n.glyphicon-hd-video:before {\n  content: \"\\e187\";\n}\n.glyphicon-subtitles:before {\n  content: \"\\e188\";\n}\n.glyphicon-sound-stereo:before {\n  content: \"\\e189\";\n}\n.glyphicon-sound-dolby:before {\n  content: \"\\e190\";\n}\n.glyphicon-sound-5-1:before {\n  content: \"\\e191\";\n}\n.glyphicon-sound-6-1:before {\n  content: \"\\e192\";\n}\n.glyphicon-sound-7-1:before {\n  content: \"\\e193\";\n}\n.glyphicon-copyright-mark:before {\n  content: \"\\e194\";\n}\n.glyphicon-registration-mark:before {\n  content: \"\\e195\";\n}\n.glyphicon-cloud-download:before {\n  content: \"\\e197\";\n}\n.glyphicon-cloud-upload:before {\n  content: \"\\e198\";\n}\n.glyphicon-tree-conifer:before {\n  content: \"\\e199\";\n}\n.glyphicon-tree-deciduous:before {\n  content: \"\\e200\";\n}\n.glyphicon-cd:before {\n  content: \"\\e201\";\n}\n.glyphicon-save-file:before {\n  content: \"\\e202\";\n}\n.glyphicon-open-file:before {\n  content: \"\\e203\";\n}\n.glyphicon-level-up:before {\n  content: \"\\e204\";\n}\n.glyphicon-copy:before {\n  content: \"\\e205\";\n}\n.glyphicon-paste:before {\n  content: \"\\e206\";\n}\n.glyphicon-alert:before {\n  content: \"\\e209\";\n}\n.glyphicon-equalizer:before {\n  content: \"\\e210\";\n}\n.glyphicon-king:before {\n  content: \"\\e211\";\n}\n.glyphicon-queen:before {\n  content: \"\\e212\";\n}\n.glyphicon-pawn:before {\n  content: \"\\e213\";\n}\n.glyphicon-bishop:before {\n  content: \"\\e214\";\n}\n.glyphicon-knight:before {\n  content: \"\\e215\";\n}\n.glyphicon-baby-formula:before {\n  content: \"\\e216\";\n}\n.glyphicon-tent:before {\n  content: \"\\26fa\";\n}\n.glyphicon-blackboard:before {\n  content: \"\\e218\";\n}\n.glyphicon-bed:before {\n  content: \"\\e219\";\n}\n.glyphicon-apple:before {\n  content: \"\\f8ff\";\n}\n.glyphicon-erase:before {\n  content: \"\\e221\";\n}\n.glyphicon-hourglass:before {\n  content: \"\\231b\";\n}\n.glyphicon-lamp:before {\n  content: \"\\e223\";\n}\n.glyphicon-duplicate:before {\n  content: \"\\e224\";\n}\n.glyphicon-piggy-bank:before {\n  content: \"\\e225\";\n}\n.glyphicon-scissors:before {\n  content: \"\\e226\";\n}\n.glyphicon-bitcoin:before {\n  content: \"\\e227\";\n}\n.glyphicon-btc:before {\n  content: \"\\e227\";\n}\n.glyphicon-xbt:before {\n  content: \"\\e227\";\n}\n.glyphicon-yen:before {\n  content: \"\\00a5\";\n}\n.glyphicon-jpy:before {\n  content: \"\\00a5\";\n}\n.glyphicon-ruble:before {\n  content: \"\\20bd\";\n}\n.glyphicon-rub:before {\n  content: \"\\20bd\";\n}\n.glyphicon-scale:before {\n  content: \"\\e230\";\n}\n.glyphicon-ice-lolly:before {\n  content: \"\\e231\";\n}\n.glyphicon-ice-lolly-tasted:before {\n  content: \"\\e232\";\n}\n.glyphicon-education:before {\n  content: \"\\e233\";\n}\n.glyphicon-option-horizontal:before {\n  content: \"\\e234\";\n}\n.glyphicon-option-vertical:before {\n  content: \"\\e235\";\n}\n.glyphicon-menu-hamburger:before {\n  content: \"\\e236\";\n}\n.glyphicon-modal-window:before {\n  content: \"\\e237\";\n}\n.glyphicon-oil:before {\n  content: \"\\e238\";\n}\n.glyphicon-grain:before {\n  content: \"\\e239\";\n}\n.glyphicon-sunglasses:before {\n  content: \"\\e240\";\n}\n.glyphicon-text-size:before {\n  content: \"\\e241\";\n}\n.glyphicon-text-color:before {\n  content: \"\\e242\";\n}\n.glyphicon-text-background:before {\n  content: \"\\e243\";\n}\n.glyphicon-object-align-top:before {\n  content: \"\\e244\";\n}\n.glyphicon-object-align-bottom:before {\n  content: \"\\e245\";\n}\n.glyphicon-object-align-horizontal:before {\n  content: \"\\e246\";\n}\n.glyphicon-object-align-left:before {\n  content: \"\\e247\";\n}\n.glyphicon-object-align-vertical:before {\n  content: \"\\e248\";\n}\n.glyphicon-object-align-right:before {\n  content: \"\\e249\";\n}\n.glyphicon-triangle-right:before {\n  content: \"\\e250\";\n}\n.glyphicon-triangle-left:before {\n  content: \"\\e251\";\n}\n.glyphicon-triangle-bottom:before {\n  content: \"\\e252\";\n}\n.glyphicon-triangle-top:before {\n  content: \"\\e253\";\n}\n.glyphicon-console:before {\n  content: \"\\e254\";\n}\n.glyphicon-superscript:before {\n  content: \"\\e255\";\n}\n.glyphicon-subscript:before {\n  content: \"\\e256\";\n}\n.glyphicon-menu-left:before {\n  content: \"\\e257\";\n}\n.glyphicon-menu-right:before {\n  content: \"\\e258\";\n}\n.glyphicon-menu-down:before {\n  content: \"\\e259\";\n}\n.glyphicon-menu-up:before {\n  content: \"\\e260\";\n}\n* {\n  box-sizing: border-box;\n}\n*:before,\n*:after {\n  box-sizing: border-box;\n}\nhtml {\n  font-size: 10px;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\nbody {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #c8c8c8;\n  background-color: #272b30;\n}\ninput,\nbutton,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\na {\n  color: #ffffff;\n  text-decoration: none;\n}\na:hover,\na:focus {\n  color: #ffffff;\n  text-decoration: underline;\n}\na:focus {\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\nfigure {\n  margin: 0;\n}\nimg {\n  vertical-align: middle;\n}\n.img-responsive,\n.thumbnail &gt; img,\n.thumbnail a &gt; img,\n.carousel-inner &gt; .item &gt; img,\n.carousel-inner &gt; .item &gt; a &gt; img {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n.img-rounded {\n  border-radius: 6px;\n}\n.img-thumbnail {\n  padding: 4px;\n  line-height: 1.42857143;\n  background-color: #1c1e22;\n  border: 1px solid #0c0d0e;\n  border-radius: 4px;\n  transition: all 0.2s ease-in-out;\n  display: inline-block;\n  max-width: 100%;\n  height: auto;\n}\n.img-circle {\n  border-radius: 50%;\n}\nhr {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 0;\n  border-top: 1px solid #1c1e22;\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n.sr-only-focusable:active,\n.sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  clip: auto;\n}\n[role=\"button\"] {\n  cursor: pointer;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\n.h1,\n.h2,\n.h3,\n.h4,\n.h5,\n.h6 {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-weight: 500;\n  line-height: 1.1;\n  color: inherit;\n}\nh1 small,\nh2 small,\nh3 small,\nh4 small,\nh5 small,\nh6 small,\n.h1 small,\n.h2 small,\n.h3 small,\n.h4 small,\n.h5 small,\n.h6 small,\nh1 .small,\nh2 .small,\nh3 .small,\nh4 .small,\nh5 .small,\nh6 .small,\n.h1 .small,\n.h2 .small,\n.h3 .small,\n.h4 .small,\n.h5 .small,\n.h6 .small {\n  font-weight: 400;\n  line-height: 1;\n  color: #7a8288;\n}\nh1,\n.h1,\nh2,\n.h2,\nh3,\n.h3 {\n  margin-top: 20px;\n  margin-bottom: 10px;\n}\nh1 small,\n.h1 small,\nh2 small,\n.h2 small,\nh3 small,\n.h3 small,\nh1 .small,\n.h1 .small,\nh2 .small,\n.h2 .small,\nh3 .small,\n.h3 .small {\n  font-size: 65%;\n}\nh4,\n.h4,\nh5,\n.h5,\nh6,\n.h6 {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\nh4 small,\n.h4 small,\nh5 small,\n.h5 small,\nh6 small,\n.h6 small,\nh4 .small,\n.h4 .small,\nh5 .small,\n.h5 .small,\nh6 .small,\n.h6 .small {\n  font-size: 75%;\n}\nh1,\n.h1 {\n  font-size: 36px;\n}\nh2,\n.h2 {\n  font-size: 30px;\n}\nh3,\n.h3 {\n  font-size: 24px;\n}\nh4,\n.h4 {\n  font-size: 18px;\n}\nh5,\n.h5 {\n  font-size: 14px;\n}\nh6,\n.h6 {\n  font-size: 12px;\n}\np {\n  margin: 0 0 10px;\n}\n.lead {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 300;\n  line-height: 1.4;\n}\n@media (min-width: 768px) {\n  .lead {\n    font-size: 21px;\n  }\n}\nsmall,\n.small {\n  font-size: 85%;\n}\nmark,\n.mark {\n  padding: .2em;\n  background-color: #f89406;\n}\n.text-left {\n  text-align: left;\n}\n.text-right {\n  text-align: right;\n}\n.text-center {\n  text-align: center;\n}\n.text-justify {\n  text-align: justify;\n}\n.text-nowrap {\n  white-space: nowrap;\n}\n.text-lowercase {\n  text-transform: lowercase;\n}\n.text-uppercase {\n  text-transform: uppercase;\n}\n.text-capitalize {\n  text-transform: capitalize;\n}\n.text-muted {\n  color: #7a8288;\n}\n.text-primary {\n  color: #7a8288;\n}\na.text-primary:hover,\na.text-primary:focus {\n  color: #62686d;\n}\n.text-success {\n  color: #ffffff;\n}\na.text-success:hover,\na.text-success:focus {\n  color: #e6e6e6;\n}\n.text-info {\n  color: #ffffff;\n}\na.text-info:hover,\na.text-info:focus {\n  color: #e6e6e6;\n}\n.text-warning {\n  color: #ffffff;\n}\na.text-warning:hover,\na.text-warning:focus {\n  color: #e6e6e6;\n}\n.text-danger {\n  color: #ffffff;\n}\na.text-danger:hover,\na.text-danger:focus {\n  color: #e6e6e6;\n}\n.bg-primary {\n  color: #fff;\n  background-color: #7a8288;\n}\na.bg-primary:hover,\na.bg-primary:focus {\n  background-color: #62686d;\n}\n.bg-success {\n  background-color: #62c462;\n}\na.bg-success:hover,\na.bg-success:focus {\n  background-color: #42b142;\n}\n.bg-info {\n  background-color: #5bc0de;\n}\na.bg-info:hover,\na.bg-info:focus {\n  background-color: #31b0d5;\n}\n.bg-warning {\n  background-color: #f89406;\n}\na.bg-warning:hover,\na.bg-warning:focus {\n  background-color: #c67605;\n}\n.bg-danger {\n  background-color: #ee5f5b;\n}\na.bg-danger:hover,\na.bg-danger:focus {\n  background-color: #e9322d;\n}\n.page-header {\n  padding-bottom: 9px;\n  margin: 40px 0 20px;\n  border-bottom: 1px solid #1c1e22;\n}\nul,\nol {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\nul ul,\nol ul,\nul ol,\nol ol {\n  margin-bottom: 0;\n}\n.list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n.list-inline {\n  padding-left: 0;\n  list-style: none;\n  margin-left: -5px;\n}\n.list-inline &gt; li {\n  display: inline-block;\n  padding-right: 5px;\n  padding-left: 5px;\n}\ndl {\n  margin-top: 0;\n  margin-bottom: 20px;\n}\ndt,\ndd {\n  line-height: 1.42857143;\n}\ndt {\n  font-weight: 700;\n}\ndd {\n  margin-left: 0;\n}\n@media (min-width: 768px) {\n  .dl-horizontal dt {\n    float: left;\n    width: 160px;\n    clear: left;\n    text-align: right;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n  .dl-horizontal dd {\n    margin-left: 180px;\n  }\n}\nabbr[title],\nabbr[data-original-title] {\n  cursor: help;\n}\n.initialism {\n  font-size: 90%;\n  text-transform: uppercase;\n}\nblockquote {\n  padding: 10px 20px;\n  margin: 0 0 20px;\n  font-size: 17.5px;\n  border-left: 5px solid #7a8288;\n}\nblockquote p:last-child,\nblockquote ul:last-child,\nblockquote ol:last-child {\n  margin-bottom: 0;\n}\nblockquote footer,\nblockquote small,\nblockquote .small {\n  display: block;\n  font-size: 80%;\n  line-height: 1.42857143;\n  color: #7a8288;\n}\nblockquote footer:before,\nblockquote small:before,\nblockquote .small:before {\n  content: \"\\2014 \\00A0\";\n}\n.blockquote-reverse,\nblockquote.pull-right {\n  padding-right: 15px;\n  padding-left: 0;\n  text-align: right;\n  border-right: 5px solid #7a8288;\n  border-left: 0;\n}\n.blockquote-reverse footer:before,\nblockquote.pull-right footer:before,\n.blockquote-reverse small:before,\nblockquote.pull-right small:before,\n.blockquote-reverse .small:before,\nblockquote.pull-right .small:before {\n  content: \"\";\n}\n.blockquote-reverse footer:after,\nblockquote.pull-right footer:after,\n.blockquote-reverse small:after,\nblockquote.pull-right small:after,\n.blockquote-reverse .small:after,\nblockquote.pull-right .small:after {\n  content: \"\\00A0 \\2014\";\n}\naddress {\n  margin-bottom: 20px;\n  font-style: normal;\n  line-height: 1.42857143;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n}\ncode {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #c7254e;\n  background-color: #f9f2f4;\n  border-radius: 4px;\n}\nkbd {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #ffffff;\n  background-color: #333333;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.25);\n}\nkbd kbd {\n  padding: 0;\n  font-size: 100%;\n  font-weight: 700;\n  box-shadow: none;\n}\npre {\n  display: block;\n  padding: 9.5px;\n  margin: 0 0 10px;\n  font-size: 13px;\n  line-height: 1.42857143;\n  color: #3a3f44;\n  word-break: break-all;\n  word-wrap: break-word;\n  background-color: #f5f5f5;\n  border: 1px solid #cccccc;\n  border-radius: 4px;\n}\npre code {\n  padding: 0;\n  font-size: inherit;\n  color: inherit;\n  white-space: pre-wrap;\n  background-color: transparent;\n  border-radius: 0;\n}\n.pre-scrollable {\n  max-height: 340px;\n  overflow-y: scroll;\n}\n.container {\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n@media (min-width: 768px) {\n  .container {\n    width: 750px;\n  }\n}\n@media (min-width: 992px) {\n  .container {\n    width: 970px;\n  }\n}\n@media (min-width: 1200px) {\n  .container {\n    width: 1170px;\n  }\n}\n.container-fluid {\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n.row {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n.row-no-gutters {\n  margin-right: 0;\n  margin-left: 0;\n}\n.row-no-gutters [class*=\"col-\"] {\n  padding-right: 0;\n  padding-left: 0;\n}\n.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {\n  position: relative;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n}\n.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {\n  float: left;\n}\n.col-xs-12 {\n  width: 100%;\n}\n.col-xs-11 {\n  width: 91.66666667%;\n}\n.col-xs-10 {\n  width: 83.33333333%;\n}\n.col-xs-9 {\n  width: 75%;\n}\n.col-xs-8 {\n  width: 66.66666667%;\n}\n.col-xs-7 {\n  width: 58.33333333%;\n}\n.col-xs-6 {\n  width: 50%;\n}\n.col-xs-5 {\n  width: 41.66666667%;\n}\n.col-xs-4 {\n  width: 33.33333333%;\n}\n.col-xs-3 {\n  width: 25%;\n}\n.col-xs-2 {\n  width: 16.66666667%;\n}\n.col-xs-1 {\n  width: 8.33333333%;\n}\n.col-xs-pull-12 {\n  right: 100%;\n}\n.col-xs-pull-11 {\n  right: 91.66666667%;\n}\n.col-xs-pull-10 {\n  right: 83.33333333%;\n}\n.col-xs-pull-9 {\n  right: 75%;\n}\n.col-xs-pull-8 {\n  right: 66.66666667%;\n}\n.col-xs-pull-7 {\n  right: 58.33333333%;\n}\n.col-xs-pull-6 {\n  right: 50%;\n}\n.col-xs-pull-5 {\n  right: 41.66666667%;\n}\n.col-xs-pull-4 {\n  right: 33.33333333%;\n}\n.col-xs-pull-3 {\n  right: 25%;\n}\n.col-xs-pull-2 {\n  right: 16.66666667%;\n}\n.col-xs-pull-1 {\n  right: 8.33333333%;\n}\n.col-xs-pull-0 {\n  right: auto;\n}\n.col-xs-push-12 {\n  left: 100%;\n}\n.col-xs-push-11 {\n  left: 91.66666667%;\n}\n.col-xs-push-10 {\n  left: 83.33333333%;\n}\n.col-xs-push-9 {\n  left: 75%;\n}\n.col-xs-push-8 {\n  left: 66.66666667%;\n}\n.col-xs-push-7 {\n  left: 58.33333333%;\n}\n.col-xs-push-6 {\n  left: 50%;\n}\n.col-xs-push-5 {\n  left: 41.66666667%;\n}\n.col-xs-push-4 {\n  left: 33.33333333%;\n}\n.col-xs-push-3 {\n  left: 25%;\n}\n.col-xs-push-2 {\n  left: 16.66666667%;\n}\n.col-xs-push-1 {\n  left: 8.33333333%;\n}\n.col-xs-push-0 {\n  left: auto;\n}\n.col-xs-offset-12 {\n  margin-left: 100%;\n}\n.col-xs-offset-11 {\n  margin-left: 91.66666667%;\n}\n.col-xs-offset-10 {\n  margin-left: 83.33333333%;\n}\n.col-xs-offset-9 {\n  margin-left: 75%;\n}\n.col-xs-offset-8 {\n  margin-left: 66.66666667%;\n}\n.col-xs-offset-7 {\n  margin-left: 58.33333333%;\n}\n.col-xs-offset-6 {\n  margin-left: 50%;\n}\n.col-xs-offset-5 {\n  margin-left: 41.66666667%;\n}\n.col-xs-offset-4 {\n  margin-left: 33.33333333%;\n}\n.col-xs-offset-3 {\n  margin-left: 25%;\n}\n.col-xs-offset-2 {\n  margin-left: 16.66666667%;\n}\n.col-xs-offset-1 {\n  margin-left: 8.33333333%;\n}\n.col-xs-offset-0 {\n  margin-left: 0%;\n}\n@media (min-width: 768px) {\n  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 {\n    float: left;\n  }\n  .col-sm-12 {\n    width: 100%;\n  }\n  .col-sm-11 {\n    width: 91.66666667%;\n  }\n  .col-sm-10 {\n    width: 83.33333333%;\n  }\n  .col-sm-9 {\n    width: 75%;\n  }\n  .col-sm-8 {\n    width: 66.66666667%;\n  }\n  .col-sm-7 {\n    width: 58.33333333%;\n  }\n  .col-sm-6 {\n    width: 50%;\n  }\n  .col-sm-5 {\n    width: 41.66666667%;\n  }\n  .col-sm-4 {\n    width: 33.33333333%;\n  }\n  .col-sm-3 {\n    width: 25%;\n  }\n  .col-sm-2 {\n    width: 16.66666667%;\n  }\n  .col-sm-1 {\n    width: 8.33333333%;\n  }\n  .col-sm-pull-12 {\n    right: 100%;\n  }\n  .col-sm-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-sm-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-sm-pull-9 {\n    right: 75%;\n  }\n  .col-sm-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-sm-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-sm-pull-6 {\n    right: 50%;\n  }\n  .col-sm-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-sm-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-sm-pull-3 {\n    right: 25%;\n  }\n  .col-sm-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-sm-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-sm-pull-0 {\n    right: auto;\n  }\n  .col-sm-push-12 {\n    left: 100%;\n  }\n  .col-sm-push-11 {\n    left: 91.66666667%;\n  }\n  .col-sm-push-10 {\n    left: 83.33333333%;\n  }\n  .col-sm-push-9 {\n    left: 75%;\n  }\n  .col-sm-push-8 {\n    left: 66.66666667%;\n  }\n  .col-sm-push-7 {\n    left: 58.33333333%;\n  }\n  .col-sm-push-6 {\n    left: 50%;\n  }\n  .col-sm-push-5 {\n    left: 41.66666667%;\n  }\n  .col-sm-push-4 {\n    left: 33.33333333%;\n  }\n  .col-sm-push-3 {\n    left: 25%;\n  }\n  .col-sm-push-2 {\n    left: 16.66666667%;\n  }\n  .col-sm-push-1 {\n    left: 8.33333333%;\n  }\n  .col-sm-push-0 {\n    left: auto;\n  }\n  .col-sm-offset-12 {\n    margin-left: 100%;\n  }\n  .col-sm-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-sm-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-sm-offset-9 {\n    margin-left: 75%;\n  }\n  .col-sm-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-sm-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-sm-offset-6 {\n    margin-left: 50%;\n  }\n  .col-sm-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-sm-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-sm-offset-3 {\n    margin-left: 25%;\n  }\n  .col-sm-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-sm-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-sm-offset-0 {\n    margin-left: 0%;\n  }\n}\n@media (min-width: 992px) {\n  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {\n    float: left;\n  }\n  .col-md-12 {\n    width: 100%;\n  }\n  .col-md-11 {\n    width: 91.66666667%;\n  }\n  .col-md-10 {\n    width: 83.33333333%;\n  }\n  .col-md-9 {\n    width: 75%;\n  }\n  .col-md-8 {\n    width: 66.66666667%;\n  }\n  .col-md-7 {\n    width: 58.33333333%;\n  }\n  .col-md-6 {\n    width: 50%;\n  }\n  .col-md-5 {\n    width: 41.66666667%;\n  }\n  .col-md-4 {\n    width: 33.33333333%;\n  }\n  .col-md-3 {\n    width: 25%;\n  }\n  .col-md-2 {\n    width: 16.66666667%;\n  }\n  .col-md-1 {\n    width: 8.33333333%;\n  }\n  .col-md-pull-12 {\n    right: 100%;\n  }\n  .col-md-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-md-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-md-pull-9 {\n    right: 75%;\n  }\n  .col-md-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-md-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-md-pull-6 {\n    right: 50%;\n  }\n  .col-md-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-md-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-md-pull-3 {\n    right: 25%;\n  }\n  .col-md-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-md-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-md-pull-0 {\n    right: auto;\n  }\n  .col-md-push-12 {\n    left: 100%;\n  }\n  .col-md-push-11 {\n    left: 91.66666667%;\n  }\n  .col-md-push-10 {\n    left: 83.33333333%;\n  }\n  .col-md-push-9 {\n    left: 75%;\n  }\n  .col-md-push-8 {\n    left: 66.66666667%;\n  }\n  .col-md-push-7 {\n    left: 58.33333333%;\n  }\n  .col-md-push-6 {\n    left: 50%;\n  }\n  .col-md-push-5 {\n    left: 41.66666667%;\n  }\n  .col-md-push-4 {\n    left: 33.33333333%;\n  }\n  .col-md-push-3 {\n    left: 25%;\n  }\n  .col-md-push-2 {\n    left: 16.66666667%;\n  }\n  .col-md-push-1 {\n    left: 8.33333333%;\n  }\n  .col-md-push-0 {\n    left: auto;\n  }\n  .col-md-offset-12 {\n    margin-left: 100%;\n  }\n  .col-md-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-md-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-md-offset-9 {\n    margin-left: 75%;\n  }\n  .col-md-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-md-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-md-offset-6 {\n    margin-left: 50%;\n  }\n  .col-md-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-md-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-md-offset-3 {\n    margin-left: 25%;\n  }\n  .col-md-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-md-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-md-offset-0 {\n    margin-left: 0%;\n  }\n}\n@media (min-width: 1200px) {\n  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {\n    float: left;\n  }\n  .col-lg-12 {\n    width: 100%;\n  }\n  .col-lg-11 {\n    width: 91.66666667%;\n  }\n  .col-lg-10 {\n    width: 83.33333333%;\n  }\n  .col-lg-9 {\n    width: 75%;\n  }\n  .col-lg-8 {\n    width: 66.66666667%;\n  }\n  .col-lg-7 {\n    width: 58.33333333%;\n  }\n  .col-lg-6 {\n    width: 50%;\n  }\n  .col-lg-5 {\n    width: 41.66666667%;\n  }\n  .col-lg-4 {\n    width: 33.33333333%;\n  }\n  .col-lg-3 {\n    width: 25%;\n  }\n  .col-lg-2 {\n    width: 16.66666667%;\n  }\n  .col-lg-1 {\n    width: 8.33333333%;\n  }\n  .col-lg-pull-12 {\n    right: 100%;\n  }\n  .col-lg-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-lg-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-lg-pull-9 {\n    right: 75%;\n  }\n  .col-lg-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-lg-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-lg-pull-6 {\n    right: 50%;\n  }\n  .col-lg-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-lg-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-lg-pull-3 {\n    right: 25%;\n  }\n  .col-lg-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-lg-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-lg-pull-0 {\n    right: auto;\n  }\n  .col-lg-push-12 {\n    left: 100%;\n  }\n  .col-lg-push-11 {\n    left: 91.66666667%;\n  }\n  .col-lg-push-10 {\n    left: 83.33333333%;\n  }\n  .col-lg-push-9 {\n    left: 75%;\n  }\n  .col-lg-push-8 {\n    left: 66.66666667%;\n  }\n  .col-lg-push-7 {\n    left: 58.33333333%;\n  }\n  .col-lg-push-6 {\n    left: 50%;\n  }\n  .col-lg-push-5 {\n    left: 41.66666667%;\n  }\n  .col-lg-push-4 {\n    left: 33.33333333%;\n  }\n  .col-lg-push-3 {\n    left: 25%;\n  }\n  .col-lg-push-2 {\n    left: 16.66666667%;\n  }\n  .col-lg-push-1 {\n    left: 8.33333333%;\n  }\n  .col-lg-push-0 {\n    left: auto;\n  }\n  .col-lg-offset-12 {\n    margin-left: 100%;\n  }\n  .col-lg-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-lg-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-lg-offset-9 {\n    margin-left: 75%;\n  }\n  .col-lg-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-lg-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-lg-offset-6 {\n    margin-left: 50%;\n  }\n  .col-lg-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-lg-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-lg-offset-3 {\n    margin-left: 25%;\n  }\n  .col-lg-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-lg-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-lg-offset-0 {\n    margin-left: 0%;\n  }\n}\ntable {\n  background-color: #2e3338;\n}\ntable col[class*=\"col-\"] {\n  position: static;\n  display: table-column;\n  float: none;\n}\ntable td[class*=\"col-\"],\ntable th[class*=\"col-\"] {\n  position: static;\n  display: table-cell;\n  float: none;\n}\ncaption {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  color: #7a8288;\n  text-align: left;\n}\nth {\n  text-align: left;\n}\n.table {\n  width: 100%;\n  max-width: 100%;\n  margin-bottom: 20px;\n}\n.table &gt; thead &gt; tr &gt; th,\n.table &gt; tbody &gt; tr &gt; th,\n.table &gt; tfoot &gt; tr &gt; th,\n.table &gt; thead &gt; tr &gt; td,\n.table &gt; tbody &gt; tr &gt; td,\n.table &gt; tfoot &gt; tr &gt; td {\n  padding: 8px;\n  line-height: 1.42857143;\n  vertical-align: top;\n  border-top: 1px solid #1c1e22;\n}\n.table &gt; thead &gt; tr &gt; th {\n  vertical-align: bottom;\n  border-bottom: 2px solid #1c1e22;\n}\n.table &gt; caption + thead &gt; tr:first-child &gt; th,\n.table &gt; colgroup + thead &gt; tr:first-child &gt; th,\n.table &gt; thead:first-child &gt; tr:first-child &gt; th,\n.table &gt; caption + thead &gt; tr:first-child &gt; td,\n.table &gt; colgroup + thead &gt; tr:first-child &gt; td,\n.table &gt; thead:first-child &gt; tr:first-child &gt; td {\n  border-top: 0;\n}\n.table &gt; tbody + tbody {\n  border-top: 2px solid #1c1e22;\n}\n.table .table {\n  background-color: #272b30;\n}\n.table-condensed &gt; thead &gt; tr &gt; th,\n.table-condensed &gt; tbody &gt; tr &gt; th,\n.table-condensed &gt; tfoot &gt; tr &gt; th,\n.table-condensed &gt; thead &gt; tr &gt; td,\n.table-condensed &gt; tbody &gt; tr &gt; td,\n.table-condensed &gt; tfoot &gt; tr &gt; td {\n  padding: 5px;\n}\n.table-bordered {\n  border: 1px solid #1c1e22;\n}\n.table-bordered &gt; thead &gt; tr &gt; th,\n.table-bordered &gt; tbody &gt; tr &gt; th,\n.table-bordered &gt; tfoot &gt; tr &gt; th,\n.table-bordered &gt; thead &gt; tr &gt; td,\n.table-bordered &gt; tbody &gt; tr &gt; td,\n.table-bordered &gt; tfoot &gt; tr &gt; td {\n  border: 1px solid #1c1e22;\n}\n.table-bordered &gt; thead &gt; tr &gt; th,\n.table-bordered &gt; thead &gt; tr &gt; td {\n  border-bottom-width: 2px;\n}\n.table-striped &gt; tbody &gt; tr:nth-of-type(odd) {\n  background-color: #353a41;\n}\n.table-hover &gt; tbody &gt; tr:hover {\n  background-color: #49515a;\n}\n.table &gt; thead &gt; tr &gt; td.active,\n.table &gt; tbody &gt; tr &gt; td.active,\n.table &gt; tfoot &gt; tr &gt; td.active,\n.table &gt; thead &gt; tr &gt; th.active,\n.table &gt; tbody &gt; tr &gt; th.active,\n.table &gt; tfoot &gt; tr &gt; th.active,\n.table &gt; thead &gt; tr.active &gt; td,\n.table &gt; tbody &gt; tr.active &gt; td,\n.table &gt; tfoot &gt; tr.active &gt; td,\n.table &gt; thead &gt; tr.active &gt; th,\n.table &gt; tbody &gt; tr.active &gt; th,\n.table &gt; tfoot &gt; tr.active &gt; th {\n  background-color: #49515a;\n}\n.table-hover &gt; tbody &gt; tr &gt; td.active:hover,\n.table-hover &gt; tbody &gt; tr &gt; th.active:hover,\n.table-hover &gt; tbody &gt; tr.active:hover &gt; td,\n.table-hover &gt; tbody &gt; tr:hover &gt; .active,\n.table-hover &gt; tbody &gt; tr.active:hover &gt; th {\n  background-color: #3e444c;\n}\n.table &gt; thead &gt; tr &gt; td.success,\n.table &gt; tbody &gt; tr &gt; td.success,\n.table &gt; tfoot &gt; tr &gt; td.success,\n.table &gt; thead &gt; tr &gt; th.success,\n.table &gt; tbody &gt; tr &gt; th.success,\n.table &gt; tfoot &gt; tr &gt; th.success,\n.table &gt; thead &gt; tr.success &gt; td,\n.table &gt; tbody &gt; tr.success &gt; td,\n.table &gt; tfoot &gt; tr.success &gt; td,\n.table &gt; thead &gt; tr.success &gt; th,\n.table &gt; tbody &gt; tr.success &gt; th,\n.table &gt; tfoot &gt; tr.success &gt; th {\n  background-color: #62c462;\n}\n.table-hover &gt; tbody &gt; tr &gt; td.success:hover,\n.table-hover &gt; tbody &gt; tr &gt; th.success:hover,\n.table-hover &gt; tbody &gt; tr.success:hover &gt; td,\n.table-hover &gt; tbody &gt; tr:hover &gt; .success,\n.table-hover &gt; tbody &gt; tr.success:hover &gt; th {\n  background-color: #4fbd4f;\n}\n.table &gt; thead &gt; tr &gt; td.info,\n.table &gt; tbody &gt; tr &gt; td.info,\n.table &gt; tfoot &gt; tr &gt; td.info,\n.table &gt; thead &gt; tr &gt; th.info,\n.table &gt; tbody &gt; tr &gt; th.info,\n.table &gt; tfoot &gt; tr &gt; th.info,\n.table &gt; thead &gt; tr.info &gt; td,\n.table &gt; tbody &gt; tr.info &gt; td,\n.table &gt; tfoot &gt; tr.info &gt; td,\n.table &gt; thead &gt; tr.info &gt; th,\n.table &gt; tbody &gt; tr.info &gt; th,\n.table &gt; tfoot &gt; tr.info &gt; th {\n  background-color: #5bc0de;\n}\n.table-hover &gt; tbody &gt; tr &gt; td.info:hover,\n.table-hover &gt; tbody &gt; tr &gt; th.info:hover,\n.table-hover &gt; tbody &gt; tr.info:hover &gt; td,\n.table-hover &gt; tbody &gt; tr:hover &gt; .info,\n.table-hover &gt; tbody &gt; tr.info:hover &gt; th {\n  background-color: #46b8da;\n}\n.table &gt; thead &gt; tr &gt; td.warning,\n.table &gt; tbody &gt; tr &gt; td.warning,\n.table &gt; tfoot &gt; tr &gt; td.warning,\n.table &gt; thead &gt; tr &gt; th.warning,\n.table &gt; tbody &gt; tr &gt; th.warning,\n.table &gt; tfoot &gt; tr &gt; th.warning,\n.table &gt; thead &gt; tr.warning &gt; td,\n.table &gt; tbody &gt; tr.warning &gt; td,\n.table &gt; tfoot &gt; tr.warning &gt; td,\n.table &gt; thead &gt; tr.warning &gt; th,\n.table &gt; tbody &gt; tr.warning &gt; th,\n.table &gt; tfoot &gt; tr.warning &gt; th {\n  background-color: #f89406;\n}\n.table-hover &gt; tbody &gt; tr &gt; td.warning:hover,\n.table-hover &gt; tbody &gt; tr &gt; th.warning:hover,\n.table-hover &gt; tbody &gt; tr.warning:hover &gt; td,\n.table-hover &gt; tbody &gt; tr:hover &gt; .warning,\n.table-hover &gt; tbody &gt; tr.warning:hover &gt; th {\n  background-color: #df8505;\n}\n.table &gt; thead &gt; tr &gt; td.danger,\n.table &gt; tbody &gt; tr &gt; td.danger,\n.table &gt; tfoot &gt; tr &gt; td.danger,\n.table &gt; thead &gt; tr &gt; th.danger,\n.table &gt; tbody &gt; tr &gt; th.danger,\n.table &gt; tfoot &gt; tr &gt; th.danger,\n.table &gt; thead &gt; tr.danger &gt; td,\n.table &gt; tbody &gt; tr.danger &gt; td,\n.table &gt; tfoot &gt; tr.danger &gt; td,\n.table &gt; thead &gt; tr.danger &gt; th,\n.table &gt; tbody &gt; tr.danger &gt; th,\n.table &gt; tfoot &gt; tr.danger &gt; th {\n  background-color: #ee5f5b;\n}\n.table-hover &gt; tbody &gt; tr &gt; td.danger:hover,\n.table-hover &gt; tbody &gt; tr &gt; th.danger:hover,\n.table-hover &gt; tbody &gt; tr.danger:hover &gt; td,\n.table-hover &gt; tbody &gt; tr:hover &gt; .danger,\n.table-hover &gt; tbody &gt; tr.danger:hover &gt; th {\n  background-color: #ec4844;\n}\n.table-responsive {\n  min-height: .01%;\n  overflow-x: auto;\n}\n@media screen and (max-width: 767px) {\n  .table-responsive {\n    width: 100%;\n    margin-bottom: 15px;\n    overflow-y: hidden;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n    border: 1px solid #1c1e22;\n  }\n  .table-responsive &gt; .table {\n    margin-bottom: 0;\n  }\n  .table-responsive &gt; .table &gt; thead &gt; tr &gt; th,\n  .table-responsive &gt; .table &gt; tbody &gt; tr &gt; th,\n  .table-responsive &gt; .table &gt; tfoot &gt; tr &gt; th,\n  .table-responsive &gt; .table &gt; thead &gt; tr &gt; td,\n  .table-responsive &gt; .table &gt; tbody &gt; tr &gt; td,\n  .table-responsive &gt; .table &gt; tfoot &gt; tr &gt; td {\n    white-space: nowrap;\n  }\n  .table-responsive &gt; .table-bordered {\n    border: 0;\n  }\n  .table-responsive &gt; .table-bordered &gt; thead &gt; tr &gt; th:first-child,\n  .table-responsive &gt; .table-bordered &gt; tbody &gt; tr &gt; th:first-child,\n  .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr &gt; th:first-child,\n  .table-responsive &gt; .table-bordered &gt; thead &gt; tr &gt; td:first-child,\n  .table-responsive &gt; .table-bordered &gt; tbody &gt; tr &gt; td:first-child,\n  .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr &gt; td:first-child {\n    border-left: 0;\n  }\n  .table-responsive &gt; .table-bordered &gt; thead &gt; tr &gt; th:last-child,\n  .table-responsive &gt; .table-bordered &gt; tbody &gt; tr &gt; th:last-child,\n  .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr &gt; th:last-child,\n  .table-responsive &gt; .table-bordered &gt; thead &gt; tr &gt; td:last-child,\n  .table-responsive &gt; .table-bordered &gt; tbody &gt; tr &gt; td:last-child,\n  .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr &gt; td:last-child {\n    border-right: 0;\n  }\n  .table-responsive &gt; .table-bordered &gt; tbody &gt; tr:last-child &gt; th,\n  .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr:last-child &gt; th,\n  .table-responsive &gt; .table-bordered &gt; tbody &gt; tr:last-child &gt; td,\n  .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr:last-child &gt; td {\n    border-bottom: 0;\n  }\n}\nfieldset {\n  min-width: 0;\n  padding: 0;\n  margin: 0;\n  border: 0;\n}\nlegend {\n  display: block;\n  width: 100%;\n  padding: 0;\n  margin-bottom: 20px;\n  font-size: 21px;\n  line-height: inherit;\n  color: #c8c8c8;\n  border: 0;\n  border-bottom: 1px solid #1c1e22;\n}\nlabel {\n  display: inline-block;\n  max-width: 100%;\n  margin-bottom: 5px;\n  font-weight: 700;\n}\ninput[type=\"search\"] {\n  box-sizing: border-box;\n  -webkit-appearance: none;\n  appearance: none;\n}\ninput[type=\"radio\"],\ninput[type=\"checkbox\"] {\n  margin: 4px 0 0;\n  margin-top: 1px \\9;\n  line-height: normal;\n}\ninput[type=\"radio\"][disabled],\ninput[type=\"checkbox\"][disabled],\ninput[type=\"radio\"].disabled,\ninput[type=\"checkbox\"].disabled,\nfieldset[disabled] input[type=\"radio\"],\nfieldset[disabled] input[type=\"checkbox\"] {\n  cursor: not-allowed;\n}\ninput[type=\"file\"] {\n  display: block;\n}\ninput[type=\"range\"] {\n  display: block;\n  width: 100%;\n}\nselect[multiple],\nselect[size] {\n  height: auto;\n}\ninput[type=\"file\"]:focus,\ninput[type=\"radio\"]:focus,\ninput[type=\"checkbox\"]:focus {\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\noutput {\n  display: block;\n  padding-top: 9px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #272b30;\n}\n.form-control {\n  display: block;\n  width: 100%;\n  height: 38px;\n  padding: 8px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #272b30;\n  background-color: #ffffff;\n  background-image: none;\n  border: 1px solid #000000;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n}\n.form-control:focus {\n  border-color: #66afe9;\n  outline: 0;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px rgba(102, 175, 233, 0.6);\n}\n.form-control::-moz-placeholder {\n  color: #7a8288;\n  opacity: 1;\n}\n.form-control:-ms-input-placeholder {\n  color: #7a8288;\n}\n.form-control::-webkit-input-placeholder {\n  color: #7a8288;\n}\n.form-control::-ms-expand {\n  background-color: transparent;\n  border: 0;\n}\n.form-control[disabled],\n.form-control[readonly],\nfieldset[disabled] .form-control {\n  background-color: #999999;\n  opacity: 1;\n}\n.form-control[disabled],\nfieldset[disabled] .form-control {\n  cursor: not-allowed;\n}\ntextarea.form-control {\n  height: auto;\n}\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\n  input[type=\"date\"].form-control,\n  input[type=\"time\"].form-control,\n  input[type=\"datetime-local\"].form-control,\n  input[type=\"month\"].form-control {\n    line-height: 38px;\n  }\n  input[type=\"date\"].input-sm,\n  input[type=\"time\"].input-sm,\n  input[type=\"datetime-local\"].input-sm,\n  input[type=\"month\"].input-sm,\n  .input-group-sm input[type=\"date\"],\n  .input-group-sm input[type=\"time\"],\n  .input-group-sm input[type=\"datetime-local\"],\n  .input-group-sm input[type=\"month\"] {\n    line-height: 30px;\n  }\n  input[type=\"date\"].input-lg,\n  input[type=\"time\"].input-lg,\n  input[type=\"datetime-local\"].input-lg,\n  input[type=\"month\"].input-lg,\n  .input-group-lg input[type=\"date\"],\n  .input-group-lg input[type=\"time\"],\n  .input-group-lg input[type=\"datetime-local\"],\n  .input-group-lg input[type=\"month\"] {\n    line-height: 54px;\n  }\n}\n.form-group {\n  margin-bottom: 15px;\n}\n.radio,\n.checkbox {\n  position: relative;\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.radio.disabled label,\n.checkbox.disabled label,\nfieldset[disabled] .radio label,\nfieldset[disabled] .checkbox label {\n  cursor: not-allowed;\n}\n.radio label,\n.checkbox label {\n  min-height: 20px;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: 400;\n  cursor: pointer;\n}\n.radio input[type=\"radio\"],\n.radio-inline input[type=\"radio\"],\n.checkbox input[type=\"checkbox\"],\n.checkbox-inline input[type=\"checkbox\"] {\n  position: absolute;\n  margin-top: 4px \\9;\n  margin-left: -20px;\n}\n.radio + .radio,\n.checkbox + .checkbox {\n  margin-top: -5px;\n}\n.radio-inline,\n.checkbox-inline {\n  position: relative;\n  display: inline-block;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: 400;\n  vertical-align: middle;\n  cursor: pointer;\n}\n.radio-inline.disabled,\n.checkbox-inline.disabled,\nfieldset[disabled] .radio-inline,\nfieldset[disabled] .checkbox-inline {\n  cursor: not-allowed;\n}\n.radio-inline + .radio-inline,\n.checkbox-inline + .checkbox-inline {\n  margin-top: 0;\n  margin-left: 10px;\n}\n.form-control-static {\n  min-height: 34px;\n  padding-top: 9px;\n  padding-bottom: 9px;\n  margin-bottom: 0;\n}\n.form-control-static.input-lg,\n.form-control-static.input-sm {\n  padding-right: 0;\n  padding-left: 0;\n}\n.input-sm {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-sm {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-sm,\nselect[multiple].input-sm {\n  height: auto;\n}\n.form-group-sm .form-control {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.form-group-sm select.form-control {\n  height: 30px;\n  line-height: 30px;\n}\n.form-group-sm textarea.form-control,\n.form-group-sm select[multiple].form-control {\n  height: auto;\n}\n.form-group-sm .form-control-static {\n  height: 30px;\n  min-height: 32px;\n  padding: 6px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.input-lg {\n  height: 54px;\n  padding: 14px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-lg {\n  height: 54px;\n  line-height: 54px;\n}\ntextarea.input-lg,\nselect[multiple].input-lg {\n  height: auto;\n}\n.form-group-lg .form-control {\n  height: 54px;\n  padding: 14px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.form-group-lg select.form-control {\n  height: 54px;\n  line-height: 54px;\n}\n.form-group-lg textarea.form-control,\n.form-group-lg select[multiple].form-control {\n  height: auto;\n}\n.form-group-lg .form-control-static {\n  height: 54px;\n  min-height: 38px;\n  padding: 15px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.has-feedback {\n  position: relative;\n}\n.has-feedback .form-control {\n  padding-right: 47.5px;\n}\n.form-control-feedback {\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 2;\n  display: block;\n  width: 38px;\n  height: 38px;\n  line-height: 38px;\n  text-align: center;\n  pointer-events: none;\n}\n.input-lg + .form-control-feedback,\n.input-group-lg + .form-control-feedback,\n.form-group-lg .form-control + .form-control-feedback {\n  width: 54px;\n  height: 54px;\n  line-height: 54px;\n}\n.input-sm + .form-control-feedback,\n.input-group-sm + .form-control-feedback,\n.form-group-sm .form-control + .form-control-feedback {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n}\n.has-success .help-block,\n.has-success .control-label,\n.has-success .radio,\n.has-success .checkbox,\n.has-success .radio-inline,\n.has-success .checkbox-inline,\n.has-success.radio label,\n.has-success.checkbox label,\n.has-success.radio-inline label,\n.has-success.checkbox-inline label {\n  color: #ffffff;\n}\n.has-success .form-control {\n  border-color: #ffffff;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.has-success .form-control:focus {\n  border-color: #e6e6e6;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #ffffff;\n}\n.has-success .input-group-addon {\n  color: #ffffff;\n  background-color: #62c462;\n  border-color: #ffffff;\n}\n.has-success .form-control-feedback {\n  color: #ffffff;\n}\n.has-warning .help-block,\n.has-warning .control-label,\n.has-warning .radio,\n.has-warning .checkbox,\n.has-warning .radio-inline,\n.has-warning .checkbox-inline,\n.has-warning.radio label,\n.has-warning.checkbox label,\n.has-warning.radio-inline label,\n.has-warning.checkbox-inline label {\n  color: #ffffff;\n}\n.has-warning .form-control {\n  border-color: #ffffff;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.has-warning .form-control:focus {\n  border-color: #e6e6e6;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #ffffff;\n}\n.has-warning .input-group-addon {\n  color: #ffffff;\n  background-color: #f89406;\n  border-color: #ffffff;\n}\n.has-warning .form-control-feedback {\n  color: #ffffff;\n}\n.has-error .help-block,\n.has-error .control-label,\n.has-error .radio,\n.has-error .checkbox,\n.has-error .radio-inline,\n.has-error .checkbox-inline,\n.has-error.radio label,\n.has-error.checkbox label,\n.has-error.radio-inline label,\n.has-error.checkbox-inline label {\n  color: #ffffff;\n}\n.has-error .form-control {\n  border-color: #ffffff;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.has-error .form-control:focus {\n  border-color: #e6e6e6;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #ffffff;\n}\n.has-error .input-group-addon {\n  color: #ffffff;\n  background-color: #ee5f5b;\n  border-color: #ffffff;\n}\n.has-error .form-control-feedback {\n  color: #ffffff;\n}\n.has-feedback label ~ .form-control-feedback {\n  top: 25px;\n}\n.has-feedback label.sr-only ~ .form-control-feedback {\n  top: 0;\n}\n.help-block {\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  color: #ffffff;\n}\n@media (min-width: 768px) {\n  .form-inline .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .form-inline .form-control-static {\n    display: inline-block;\n  }\n  .form-inline .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .form-inline .input-group .input-group-addon,\n  .form-inline .input-group .input-group-btn,\n  .form-inline .input-group .form-control {\n    width: auto;\n  }\n  .form-inline .input-group &gt; .form-control {\n    width: 100%;\n  }\n  .form-inline .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio,\n  .form-inline .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio label,\n  .form-inline .checkbox label {\n    padding-left: 0;\n  }\n  .form-inline .radio input[type=\"radio\"],\n  .form-inline .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .form-inline .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n.form-horizontal .radio,\n.form-horizontal .checkbox,\n.form-horizontal .radio-inline,\n.form-horizontal .checkbox-inline {\n  padding-top: 9px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.form-horizontal .radio,\n.form-horizontal .checkbox {\n  min-height: 29px;\n}\n.form-horizontal .form-group {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .control-label {\n    padding-top: 9px;\n    margin-bottom: 0;\n    text-align: right;\n  }\n}\n.form-horizontal .has-feedback .form-control-feedback {\n  right: 15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-lg .control-label {\n    padding-top: 15px;\n    font-size: 18px;\n  }\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-sm .control-label {\n    padding-top: 6px;\n    font-size: 12px;\n  }\n}\n.btn {\n  display: inline-block;\n  margin-bottom: 0;\n  font-weight: normal;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  -ms-touch-action: manipulation;\n      touch-action: manipulation;\n  cursor: pointer;\n  background-image: none;\n  border: 1px solid transparent;\n  padding: 8px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  border-radius: 4px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.btn:focus,\n.btn:active:focus,\n.btn.active:focus,\n.btn.focus,\n.btn:active.focus,\n.btn.active.focus {\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\n.btn:hover,\n.btn:focus,\n.btn.focus {\n  color: #ffffff;\n  text-decoration: none;\n}\n.btn:active,\n.btn.active {\n  background-image: none;\n  outline: 0;\n  box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n}\n.btn.disabled,\n.btn[disabled],\nfieldset[disabled] .btn {\n  cursor: not-allowed;\n  filter: alpha(opacity=65);\n  opacity: 0.65;\n  box-shadow: none;\n}\na.btn.disabled,\nfieldset[disabled] a.btn {\n  pointer-events: none;\n}\n.btn-default {\n  color: #ffffff;\n  background-color: #3a3f44;\n  border-color: #3a3f44;\n}\n.btn-default:focus,\n.btn-default.focus {\n  color: #ffffff;\n  background-color: #232628;\n  border-color: #000000;\n}\n.btn-default:hover {\n  color: #ffffff;\n  background-color: #232628;\n  border-color: #1e2023;\n}\n.btn-default:active,\n.btn-default.active,\n.open &gt; .dropdown-toggle.btn-default {\n  color: #ffffff;\n  background-color: #232628;\n  background-image: none;\n  border-color: #1e2023;\n}\n.btn-default:active:hover,\n.btn-default.active:hover,\n.open &gt; .dropdown-toggle.btn-default:hover,\n.btn-default:active:focus,\n.btn-default.active:focus,\n.open &gt; .dropdown-toggle.btn-default:focus,\n.btn-default:active.focus,\n.btn-default.active.focus,\n.open &gt; .dropdown-toggle.btn-default.focus {\n  color: #ffffff;\n  background-color: #121415;\n  border-color: #000000;\n}\n.btn-default.disabled:hover,\n.btn-default[disabled]:hover,\nfieldset[disabled] .btn-default:hover,\n.btn-default.disabled:focus,\n.btn-default[disabled]:focus,\nfieldset[disabled] .btn-default:focus,\n.btn-default.disabled.focus,\n.btn-default[disabled].focus,\nfieldset[disabled] .btn-default.focus {\n  background-color: #3a3f44;\n  border-color: #3a3f44;\n}\n.btn-default .badge {\n  color: #3a3f44;\n  background-color: #ffffff;\n}\n.btn-primary {\n  color: #ffffff;\n  background-color: #7a8288;\n  border-color: #7a8288;\n}\n.btn-primary:focus,\n.btn-primary.focus {\n  color: #ffffff;\n  background-color: #62686d;\n  border-color: #3e4245;\n}\n.btn-primary:hover {\n  color: #ffffff;\n  background-color: #62686d;\n  border-color: #5d6368;\n}\n.btn-primary:active,\n.btn-primary.active,\n.open &gt; .dropdown-toggle.btn-primary {\n  color: #ffffff;\n  background-color: #62686d;\n  background-image: none;\n  border-color: #5d6368;\n}\n.btn-primary:active:hover,\n.btn-primary.active:hover,\n.open &gt; .dropdown-toggle.btn-primary:hover,\n.btn-primary:active:focus,\n.btn-primary.active:focus,\n.open &gt; .dropdown-toggle.btn-primary:focus,\n.btn-primary:active.focus,\n.btn-primary.active.focus,\n.open &gt; .dropdown-toggle.btn-primary.focus {\n  color: #ffffff;\n  background-color: #51565a;\n  border-color: #3e4245;\n}\n.btn-primary.disabled:hover,\n.btn-primary[disabled]:hover,\nfieldset[disabled] .btn-primary:hover,\n.btn-primary.disabled:focus,\n.btn-primary[disabled]:focus,\nfieldset[disabled] .btn-primary:focus,\n.btn-primary.disabled.focus,\n.btn-primary[disabled].focus,\nfieldset[disabled] .btn-primary.focus {\n  background-color: #7a8288;\n  border-color: #7a8288;\n}\n.btn-primary .badge {\n  color: #7a8288;\n  background-color: #ffffff;\n}\n.btn-success {\n  color: #ffffff;\n  background-color: #62c462;\n  border-color: #62c462;\n}\n.btn-success:focus,\n.btn-success.focus {\n  color: #ffffff;\n  background-color: #42b142;\n  border-color: #2d792d;\n}\n.btn-success:hover {\n  color: #ffffff;\n  background-color: #42b142;\n  border-color: #40a940;\n}\n.btn-success:active,\n.btn-success.active,\n.open &gt; .dropdown-toggle.btn-success {\n  color: #ffffff;\n  background-color: #42b142;\n  background-image: none;\n  border-color: #40a940;\n}\n.btn-success:active:hover,\n.btn-success.active:hover,\n.open &gt; .dropdown-toggle.btn-success:hover,\n.btn-success:active:focus,\n.btn-success.active:focus,\n.open &gt; .dropdown-toggle.btn-success:focus,\n.btn-success:active.focus,\n.btn-success.active.focus,\n.open &gt; .dropdown-toggle.btn-success.focus {\n  color: #ffffff;\n  background-color: #399739;\n  border-color: #2d792d;\n}\n.btn-success.disabled:hover,\n.btn-success[disabled]:hover,\nfieldset[disabled] .btn-success:hover,\n.btn-success.disabled:focus,\n.btn-success[disabled]:focus,\nfieldset[disabled] .btn-success:focus,\n.btn-success.disabled.focus,\n.btn-success[disabled].focus,\nfieldset[disabled] .btn-success.focus {\n  background-color: #62c462;\n  border-color: #62c462;\n}\n.btn-success .badge {\n  color: #62c462;\n  background-color: #ffffff;\n}\n.btn-info {\n  color: #ffffff;\n  background-color: #5bc0de;\n  border-color: #5bc0de;\n}\n.btn-info:focus,\n.btn-info.focus {\n  color: #ffffff;\n  background-color: #31b0d5;\n  border-color: #1f7e9a;\n}\n.btn-info:hover {\n  color: #ffffff;\n  background-color: #31b0d5;\n  border-color: #2aabd2;\n}\n.btn-info:active,\n.btn-info.active,\n.open &gt; .dropdown-toggle.btn-info {\n  color: #ffffff;\n  background-color: #31b0d5;\n  background-image: none;\n  border-color: #2aabd2;\n}\n.btn-info:active:hover,\n.btn-info.active:hover,\n.open &gt; .dropdown-toggle.btn-info:hover,\n.btn-info:active:focus,\n.btn-info.active:focus,\n.open &gt; .dropdown-toggle.btn-info:focus,\n.btn-info:active.focus,\n.btn-info.active.focus,\n.open &gt; .dropdown-toggle.btn-info.focus {\n  color: #ffffff;\n  background-color: #269abc;\n  border-color: #1f7e9a;\n}\n.btn-info.disabled:hover,\n.btn-info[disabled]:hover,\nfieldset[disabled] .btn-info:hover,\n.btn-info.disabled:focus,\n.btn-info[disabled]:focus,\nfieldset[disabled] .btn-info:focus,\n.btn-info.disabled.focus,\n.btn-info[disabled].focus,\nfieldset[disabled] .btn-info.focus {\n  background-color: #5bc0de;\n  border-color: #5bc0de;\n}\n.btn-info .badge {\n  color: #5bc0de;\n  background-color: #ffffff;\n}\n.btn-warning {\n  color: #ffffff;\n  background-color: #f89406;\n  border-color: #f89406;\n}\n.btn-warning:focus,\n.btn-warning.focus {\n  color: #ffffff;\n  background-color: #c67605;\n  border-color: #7c4a03;\n}\n.btn-warning:hover {\n  color: #ffffff;\n  background-color: #c67605;\n  border-color: #bc7005;\n}\n.btn-warning:active,\n.btn-warning.active,\n.open &gt; .dropdown-toggle.btn-warning {\n  color: #ffffff;\n  background-color: #c67605;\n  background-image: none;\n  border-color: #bc7005;\n}\n.btn-warning:active:hover,\n.btn-warning.active:hover,\n.open &gt; .dropdown-toggle.btn-warning:hover,\n.btn-warning:active:focus,\n.btn-warning.active:focus,\n.open &gt; .dropdown-toggle.btn-warning:focus,\n.btn-warning:active.focus,\n.btn-warning.active.focus,\n.open &gt; .dropdown-toggle.btn-warning.focus {\n  color: #ffffff;\n  background-color: #a36104;\n  border-color: #7c4a03;\n}\n.btn-warning.disabled:hover,\n.btn-warning[disabled]:hover,\nfieldset[disabled] .btn-warning:hover,\n.btn-warning.disabled:focus,\n.btn-warning[disabled]:focus,\nfieldset[disabled] .btn-warning:focus,\n.btn-warning.disabled.focus,\n.btn-warning[disabled].focus,\nfieldset[disabled] .btn-warning.focus {\n  background-color: #f89406;\n  border-color: #f89406;\n}\n.btn-warning .badge {\n  color: #f89406;\n  background-color: #ffffff;\n}\n.btn-danger {\n  color: #ffffff;\n  background-color: #ee5f5b;\n  border-color: #ee5f5b;\n}\n.btn-danger:focus,\n.btn-danger.focus {\n  color: #ffffff;\n  background-color: #e9322d;\n  border-color: #b71713;\n}\n.btn-danger:hover {\n  color: #ffffff;\n  background-color: #e9322d;\n  border-color: #e82924;\n}\n.btn-danger:active,\n.btn-danger.active,\n.open &gt; .dropdown-toggle.btn-danger {\n  color: #ffffff;\n  background-color: #e9322d;\n  background-image: none;\n  border-color: #e82924;\n}\n.btn-danger:active:hover,\n.btn-danger.active:hover,\n.open &gt; .dropdown-toggle.btn-danger:hover,\n.btn-danger:active:focus,\n.btn-danger.active:focus,\n.open &gt; .dropdown-toggle.btn-danger:focus,\n.btn-danger:active.focus,\n.btn-danger.active.focus,\n.open &gt; .dropdown-toggle.btn-danger.focus {\n  color: #ffffff;\n  background-color: #dc1c17;\n  border-color: #b71713;\n}\n.btn-danger.disabled:hover,\n.btn-danger[disabled]:hover,\nfieldset[disabled] .btn-danger:hover,\n.btn-danger.disabled:focus,\n.btn-danger[disabled]:focus,\nfieldset[disabled] .btn-danger:focus,\n.btn-danger.disabled.focus,\n.btn-danger[disabled].focus,\nfieldset[disabled] .btn-danger.focus {\n  background-color: #ee5f5b;\n  border-color: #ee5f5b;\n}\n.btn-danger .badge {\n  color: #ee5f5b;\n  background-color: #ffffff;\n}\n.btn-link {\n  font-weight: 400;\n  color: #ffffff;\n  border-radius: 0;\n}\n.btn-link,\n.btn-link:active,\n.btn-link.active,\n.btn-link[disabled],\nfieldset[disabled] .btn-link {\n  background-color: transparent;\n  box-shadow: none;\n}\n.btn-link,\n.btn-link:hover,\n.btn-link:focus,\n.btn-link:active {\n  border-color: transparent;\n}\n.btn-link:hover,\n.btn-link:focus {\n  color: #ffffff;\n  text-decoration: underline;\n  background-color: transparent;\n}\n.btn-link[disabled]:hover,\nfieldset[disabled] .btn-link:hover,\n.btn-link[disabled]:focus,\nfieldset[disabled] .btn-link:focus {\n  color: #7a8288;\n  text-decoration: none;\n}\n.btn-lg,\n.btn-group-lg &gt; .btn {\n  padding: 14px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.btn-sm,\n.btn-group-sm &gt; .btn {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-xs,\n.btn-group-xs &gt; .btn {\n  padding: 1px 5px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-block {\n  display: block;\n  width: 100%;\n}\n.btn-block + .btn-block {\n  margin-top: 5px;\n}\ninput[type=\"submit\"].btn-block,\ninput[type=\"reset\"].btn-block,\ninput[type=\"button\"].btn-block {\n  width: 100%;\n}\n.fade {\n  opacity: 0;\n  transition: opacity 0.15s linear;\n}\n.fade.in {\n  opacity: 1;\n}\n.collapse {\n  display: none;\n}\n.collapse.in {\n  display: block;\n}\ntr.collapse.in {\n  display: table-row;\n}\ntbody.collapse.in {\n  display: table-row-group;\n}\n.collapsing {\n  position: relative;\n  height: 0;\n  overflow: hidden;\n  transition-property: height, visibility;\n  transition-duration: 0.35s;\n  transition-timing-function: ease;\n}\n.caret {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 2px;\n  vertical-align: middle;\n  border-top: 4px dashed;\n  border-top: 4px solid \\9;\n  border-right: 4px solid transparent;\n  border-left: 4px solid transparent;\n}\n.dropup,\n.dropdown {\n  position: relative;\n}\n.dropdown-toggle:focus {\n  outline: 0;\n}\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  float: left;\n  min-width: 160px;\n  padding: 5px 0;\n  margin: 2px 0 0;\n  font-size: 14px;\n  text-align: left;\n  list-style: none;\n  background-color: #3a3f44;\n  background-clip: padding-box;\n  border: 1px solid #272b30;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n}\n.dropdown-menu.pull-right {\n  right: 0;\n  left: auto;\n}\n.dropdown-menu .divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #272b30;\n}\n.dropdown-menu &gt; li &gt; a {\n  display: block;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: 400;\n  line-height: 1.42857143;\n  color: #c8c8c8;\n  white-space: nowrap;\n}\n.dropdown-menu &gt; li &gt; a:hover,\n.dropdown-menu &gt; li &gt; a:focus {\n  color: #ffffff;\n  text-decoration: none;\n  background-color: #272b30;\n}\n.dropdown-menu &gt; .active &gt; a,\n.dropdown-menu &gt; .active &gt; a:hover,\n.dropdown-menu &gt; .active &gt; a:focus {\n  color: #ffffff;\n  text-decoration: none;\n  background-color: #272b30;\n  outline: 0;\n}\n.dropdown-menu &gt; .disabled &gt; a,\n.dropdown-menu &gt; .disabled &gt; a:hover,\n.dropdown-menu &gt; .disabled &gt; a:focus {\n  color: #7a8288;\n}\n.dropdown-menu &gt; .disabled &gt; a:hover,\n.dropdown-menu &gt; .disabled &gt; a:focus {\n  text-decoration: none;\n  cursor: not-allowed;\n  background-color: transparent;\n  background-image: none;\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n}\n.open &gt; .dropdown-menu {\n  display: block;\n}\n.open &gt; a {\n  outline: 0;\n}\n.dropdown-menu-right {\n  right: 0;\n  left: auto;\n}\n.dropdown-menu-left {\n  right: auto;\n  left: 0;\n}\n.dropdown-header {\n  display: block;\n  padding: 3px 20px;\n  font-size: 12px;\n  line-height: 1.42857143;\n  color: #7a8288;\n  white-space: nowrap;\n}\n.dropdown-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 990;\n}\n.pull-right &gt; .dropdown-menu {\n  right: 0;\n  left: auto;\n}\n.dropup .caret,\n.navbar-fixed-bottom .dropdown .caret {\n  content: \"\";\n  border-top: 0;\n  border-bottom: 4px dashed;\n  border-bottom: 4px solid \\9;\n}\n.dropup .dropdown-menu,\n.navbar-fixed-bottom .dropdown .dropdown-menu {\n  top: auto;\n  bottom: 100%;\n  margin-bottom: 2px;\n}\n@media (min-width: 768px) {\n  .navbar-right .dropdown-menu {\n    right: 0;\n    left: auto;\n  }\n  .navbar-right .dropdown-menu-left {\n    right: auto;\n    left: 0;\n  }\n}\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n}\n.btn-group &gt; .btn,\n.btn-group-vertical &gt; .btn {\n  position: relative;\n  float: left;\n}\n.btn-group &gt; .btn:hover,\n.btn-group-vertical &gt; .btn:hover,\n.btn-group &gt; .btn:focus,\n.btn-group-vertical &gt; .btn:focus,\n.btn-group &gt; .btn:active,\n.btn-group-vertical &gt; .btn:active,\n.btn-group &gt; .btn.active,\n.btn-group-vertical &gt; .btn.active {\n  z-index: 2;\n}\n.btn-group .btn + .btn,\n.btn-group .btn + .btn-group,\n.btn-group .btn-group + .btn,\n.btn-group .btn-group + .btn-group {\n  margin-left: -1px;\n}\n.btn-toolbar {\n  margin-left: -5px;\n}\n.btn-toolbar .btn,\n.btn-toolbar .btn-group,\n.btn-toolbar .input-group {\n  float: left;\n}\n.btn-toolbar &gt; .btn,\n.btn-toolbar &gt; .btn-group,\n.btn-toolbar &gt; .input-group {\n  margin-left: 5px;\n}\n.btn-group &gt; .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\n  border-radius: 0;\n}\n.btn-group &gt; .btn:first-child {\n  margin-left: 0;\n}\n.btn-group &gt; .btn:first-child:not(:last-child):not(.dropdown-toggle) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.btn-group &gt; .btn:last-child:not(:first-child),\n.btn-group &gt; .dropdown-toggle:not(:first-child) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group &gt; .btn-group {\n  float: left;\n}\n.btn-group &gt; .btn-group:not(:first-child):not(:last-child) &gt; .btn {\n  border-radius: 0;\n}\n.btn-group &gt; .btn-group:first-child:not(:last-child) &gt; .btn:last-child,\n.btn-group &gt; .btn-group:first-child:not(:last-child) &gt; .dropdown-toggle {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.btn-group &gt; .btn-group:last-child:not(:first-child) &gt; .btn:first-child {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group .dropdown-toggle:active,\n.btn-group.open .dropdown-toggle {\n  outline: 0;\n}\n.btn-group &gt; .btn + .dropdown-toggle {\n  padding-right: 8px;\n  padding-left: 8px;\n}\n.btn-group &gt; .btn-lg + .dropdown-toggle {\n  padding-right: 12px;\n  padding-left: 12px;\n}\n.btn-group.open .dropdown-toggle {\n  box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n}\n.btn-group.open .dropdown-toggle.btn-link {\n  box-shadow: none;\n}\n.btn .caret {\n  margin-left: 0;\n}\n.btn-lg .caret {\n  border-width: 5px 5px 0;\n  border-bottom-width: 0;\n}\n.dropup .btn-lg .caret {\n  border-width: 0 5px 5px;\n}\n.btn-group-vertical &gt; .btn,\n.btn-group-vertical &gt; .btn-group,\n.btn-group-vertical &gt; .btn-group &gt; .btn {\n  display: block;\n  float: none;\n  width: 100%;\n  max-width: 100%;\n}\n.btn-group-vertical &gt; .btn-group &gt; .btn {\n  float: none;\n}\n.btn-group-vertical &gt; .btn + .btn,\n.btn-group-vertical &gt; .btn + .btn-group,\n.btn-group-vertical &gt; .btn-group + .btn,\n.btn-group-vertical &gt; .btn-group + .btn-group {\n  margin-top: -1px;\n  margin-left: 0;\n}\n.btn-group-vertical &gt; .btn:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.btn-group-vertical &gt; .btn:first-child:not(:last-child) {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical &gt; .btn:last-child:not(:first-child) {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.btn-group-vertical &gt; .btn-group:not(:first-child):not(:last-child) &gt; .btn {\n  border-radius: 0;\n}\n.btn-group-vertical &gt; .btn-group:first-child:not(:last-child) &gt; .btn:last-child,\n.btn-group-vertical &gt; .btn-group:first-child:not(:last-child) &gt; .dropdown-toggle {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical &gt; .btn-group:last-child:not(:first-child) &gt; .btn:first-child {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.btn-group-justified {\n  display: table;\n  width: 100%;\n  table-layout: fixed;\n  border-collapse: separate;\n}\n.btn-group-justified &gt; .btn,\n.btn-group-justified &gt; .btn-group {\n  display: table-cell;\n  float: none;\n  width: 1%;\n}\n.btn-group-justified &gt; .btn-group .btn {\n  width: 100%;\n}\n.btn-group-justified &gt; .btn-group .dropdown-menu {\n  left: auto;\n}\n[data-toggle=\"buttons\"] &gt; .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] &gt; .btn-group &gt; .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] &gt; .btn input[type=\"checkbox\"],\n[data-toggle=\"buttons\"] &gt; .btn-group &gt; .btn input[type=\"checkbox\"] {\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n.input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n}\n.input-group[class*=\"col-\"] {\n  float: none;\n  padding-right: 0;\n  padding-left: 0;\n}\n.input-group .form-control {\n  position: relative;\n  z-index: 2;\n  float: left;\n  width: 100%;\n  margin-bottom: 0;\n}\n.input-group .form-control:focus {\n  z-index: 3;\n}\n.input-group-lg &gt; .form-control,\n.input-group-lg &gt; .input-group-addon,\n.input-group-lg &gt; .input-group-btn &gt; .btn {\n  height: 54px;\n  padding: 14px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-group-lg &gt; .form-control,\nselect.input-group-lg &gt; .input-group-addon,\nselect.input-group-lg &gt; .input-group-btn &gt; .btn {\n  height: 54px;\n  line-height: 54px;\n}\ntextarea.input-group-lg &gt; .form-control,\ntextarea.input-group-lg &gt; .input-group-addon,\ntextarea.input-group-lg &gt; .input-group-btn &gt; .btn,\nselect[multiple].input-group-lg &gt; .form-control,\nselect[multiple].input-group-lg &gt; .input-group-addon,\nselect[multiple].input-group-lg &gt; .input-group-btn &gt; .btn {\n  height: auto;\n}\n.input-group-sm &gt; .form-control,\n.input-group-sm &gt; .input-group-addon,\n.input-group-sm &gt; .input-group-btn &gt; .btn {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-group-sm &gt; .form-control,\nselect.input-group-sm &gt; .input-group-addon,\nselect.input-group-sm &gt; .input-group-btn &gt; .btn {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-group-sm &gt; .form-control,\ntextarea.input-group-sm &gt; .input-group-addon,\ntextarea.input-group-sm &gt; .input-group-btn &gt; .btn,\nselect[multiple].input-group-sm &gt; .form-control,\nselect[multiple].input-group-sm &gt; .input-group-addon,\nselect[multiple].input-group-sm &gt; .input-group-btn &gt; .btn {\n  height: auto;\n}\n.input-group-addon,\n.input-group-btn,\n.input-group .form-control {\n  display: table-cell;\n}\n.input-group-addon:not(:first-child):not(:last-child),\n.input-group-btn:not(:first-child):not(:last-child),\n.input-group .form-control:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.input-group-addon,\n.input-group-btn {\n  width: 1%;\n  white-space: nowrap;\n  vertical-align: middle;\n}\n.input-group-addon {\n  padding: 8px 12px;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 1;\n  color: #272b30;\n  text-align: center;\n  background-color: #999999;\n  border: 1px solid rgba(0, 0, 0, 0.6);\n  border-radius: 4px;\n}\n.input-group-addon.input-sm {\n  padding: 5px 10px;\n  font-size: 12px;\n  border-radius: 3px;\n}\n.input-group-addon.input-lg {\n  padding: 14px 16px;\n  font-size: 18px;\n  border-radius: 6px;\n}\n.input-group-addon input[type=\"radio\"],\n.input-group-addon input[type=\"checkbox\"] {\n  margin-top: 0;\n}\n.input-group .form-control:first-child,\n.input-group-addon:first-child,\n.input-group-btn:first-child &gt; .btn,\n.input-group-btn:first-child &gt; .btn-group &gt; .btn,\n.input-group-btn:first-child &gt; .dropdown-toggle,\n.input-group-btn:last-child &gt; .btn:not(:last-child):not(.dropdown-toggle),\n.input-group-btn:last-child &gt; .btn-group:not(:last-child) &gt; .btn {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.input-group-addon:first-child {\n  border-right: 0;\n}\n.input-group .form-control:last-child,\n.input-group-addon:last-child,\n.input-group-btn:last-child &gt; .btn,\n.input-group-btn:last-child &gt; .btn-group &gt; .btn,\n.input-group-btn:last-child &gt; .dropdown-toggle,\n.input-group-btn:first-child &gt; .btn:not(:first-child),\n.input-group-btn:first-child &gt; .btn-group:not(:first-child) &gt; .btn {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.input-group-addon:last-child {\n  border-left: 0;\n}\n.input-group-btn {\n  position: relative;\n  font-size: 0;\n  white-space: nowrap;\n}\n.input-group-btn &gt; .btn {\n  position: relative;\n}\n.input-group-btn &gt; .btn + .btn {\n  margin-left: -1px;\n}\n.input-group-btn &gt; .btn:hover,\n.input-group-btn &gt; .btn:focus,\n.input-group-btn &gt; .btn:active {\n  z-index: 2;\n}\n.input-group-btn:first-child &gt; .btn,\n.input-group-btn:first-child &gt; .btn-group {\n  margin-right: -1px;\n}\n.input-group-btn:last-child &gt; .btn,\n.input-group-btn:last-child &gt; .btn-group {\n  z-index: 2;\n  margin-left: -1px;\n}\n.nav {\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n.nav &gt; li {\n  position: relative;\n  display: block;\n}\n.nav &gt; li &gt; a {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n}\n.nav &gt; li &gt; a:hover,\n.nav &gt; li &gt; a:focus {\n  text-decoration: none;\n  background-color: #3e444c;\n}\n.nav &gt; li.disabled &gt; a {\n  color: #7a8288;\n}\n.nav &gt; li.disabled &gt; a:hover,\n.nav &gt; li.disabled &gt; a:focus {\n  color: #7a8288;\n  text-decoration: none;\n  cursor: not-allowed;\n  background-color: transparent;\n}\n.nav .open &gt; a,\n.nav .open &gt; a:hover,\n.nav .open &gt; a:focus {\n  background-color: #3e444c;\n  border-color: #ffffff;\n}\n.nav .nav-divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n.nav &gt; li &gt; a &gt; img {\n  max-width: none;\n}\n.nav-tabs {\n  border-bottom: 1px solid #1c1e22;\n}\n.nav-tabs &gt; li {\n  float: left;\n  margin-bottom: -1px;\n}\n.nav-tabs &gt; li &gt; a {\n  margin-right: 2px;\n  line-height: 1.42857143;\n  border: 1px solid transparent;\n  border-radius: 4px 4px 0 0;\n}\n.nav-tabs &gt; li &gt; a:hover {\n  border-color: #1c1e22 #1c1e22 #1c1e22;\n}\n.nav-tabs &gt; li.active &gt; a,\n.nav-tabs &gt; li.active &gt; a:hover,\n.nav-tabs &gt; li.active &gt; a:focus {\n  color: #ffffff;\n  cursor: default;\n  background-color: #3e444c;\n  border: 1px solid #1c1e22;\n  border-bottom-color: transparent;\n}\n.nav-tabs.nav-justified {\n  width: 100%;\n  border-bottom: 0;\n}\n.nav-tabs.nav-justified &gt; li {\n  float: none;\n}\n.nav-tabs.nav-justified &gt; li &gt; a {\n  margin-bottom: 5px;\n  text-align: center;\n}\n.nav-tabs.nav-justified &gt; .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified &gt; li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-tabs.nav-justified &gt; li &gt; a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs.nav-justified &gt; li &gt; a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs.nav-justified &gt; .active &gt; a,\n.nav-tabs.nav-justified &gt; .active &gt; a:hover,\n.nav-tabs.nav-justified &gt; .active &gt; a:focus {\n  border: 1px solid #1c1e22;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified &gt; li &gt; a {\n    border-bottom: 1px solid #1c1e22;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs.nav-justified &gt; .active &gt; a,\n  .nav-tabs.nav-justified &gt; .active &gt; a:hover,\n  .nav-tabs.nav-justified &gt; .active &gt; a:focus {\n    border-bottom-color: #272b30;\n  }\n}\n.nav-pills &gt; li {\n  float: left;\n}\n.nav-pills &gt; li &gt; a {\n  border-radius: 4px;\n}\n.nav-pills &gt; li + li {\n  margin-left: 2px;\n}\n.nav-pills &gt; li.active &gt; a,\n.nav-pills &gt; li.active &gt; a:hover,\n.nav-pills &gt; li.active &gt; a:focus {\n  color: #ffffff;\n  background-color: transparent;\n}\n.nav-stacked &gt; li {\n  float: none;\n}\n.nav-stacked &gt; li + li {\n  margin-top: 2px;\n  margin-left: 0;\n}\n.nav-justified {\n  width: 100%;\n}\n.nav-justified &gt; li {\n  float: none;\n}\n.nav-justified &gt; li &gt; a {\n  margin-bottom: 5px;\n  text-align: center;\n}\n.nav-justified &gt; .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-justified &gt; li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-justified &gt; li &gt; a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs-justified {\n  border-bottom: 0;\n}\n.nav-tabs-justified &gt; li &gt; a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs-justified &gt; .active &gt; a,\n.nav-tabs-justified &gt; .active &gt; a:hover,\n.nav-tabs-justified &gt; .active &gt; a:focus {\n  border: 1px solid #1c1e22;\n}\n@media (min-width: 768px) {\n  .nav-tabs-justified &gt; li &gt; a {\n    border-bottom: 1px solid #1c1e22;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs-justified &gt; .active &gt; a,\n  .nav-tabs-justified &gt; .active &gt; a:hover,\n  .nav-tabs-justified &gt; .active &gt; a:focus {\n    border-bottom-color: #272b30;\n  }\n}\n.tab-content &gt; .tab-pane {\n  display: none;\n}\n.tab-content &gt; .active {\n  display: block;\n}\n.nav-tabs .dropdown-menu {\n  margin-top: -1px;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.navbar {\n  position: relative;\n  min-height: 50px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n}\n@media (min-width: 768px) {\n  .navbar {\n    border-radius: 4px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-header {\n    float: left;\n  }\n}\n.navbar-collapse {\n  padding-right: 15px;\n  padding-left: 15px;\n  overflow-x: visible;\n  border-top: 1px solid transparent;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  -webkit-overflow-scrolling: touch;\n}\n.navbar-collapse.in {\n  overflow-y: auto;\n}\n@media (min-width: 768px) {\n  .navbar-collapse {\n    width: auto;\n    border-top: 0;\n    box-shadow: none;\n  }\n  .navbar-collapse.collapse {\n    display: block !important;\n    height: auto !important;\n    padding-bottom: 0;\n    overflow: visible !important;\n  }\n  .navbar-collapse.in {\n    overflow-y: visible;\n  }\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-static-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n.navbar-fixed-top,\n.navbar-fixed-bottom {\n  position: fixed;\n  right: 0;\n  left: 0;\n  z-index: 1030;\n}\n.navbar-fixed-top .navbar-collapse,\n.navbar-fixed-bottom .navbar-collapse {\n  max-height: 340px;\n}\n@media (max-device-width: 480px) and (orientation: landscape) {\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    max-height: 200px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-fixed-top,\n  .navbar-fixed-bottom {\n    border-radius: 0;\n  }\n}\n.navbar-fixed-top {\n  top: 0;\n  border-width: 0 0 1px;\n}\n.navbar-fixed-bottom {\n  bottom: 0;\n  margin-bottom: 0;\n  border-width: 1px 0 0;\n}\n.container &gt; .navbar-header,\n.container-fluid &gt; .navbar-header,\n.container &gt; .navbar-collapse,\n.container-fluid &gt; .navbar-collapse {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n@media (min-width: 768px) {\n  .container &gt; .navbar-header,\n  .container-fluid &gt; .navbar-header,\n  .container &gt; .navbar-collapse,\n  .container-fluid &gt; .navbar-collapse {\n    margin-right: 0;\n    margin-left: 0;\n  }\n}\n.navbar-static-top {\n  z-index: 1000;\n  border-width: 0 0 1px;\n}\n@media (min-width: 768px) {\n  .navbar-static-top {\n    border-radius: 0;\n  }\n}\n.navbar-brand {\n  float: left;\n  height: 50px;\n  padding: 15px 15px;\n  font-size: 18px;\n  line-height: 20px;\n}\n.navbar-brand:hover,\n.navbar-brand:focus {\n  text-decoration: none;\n}\n.navbar-brand &gt; img {\n  display: block;\n}\n@media (min-width: 768px) {\n  .navbar &gt; .container .navbar-brand,\n  .navbar &gt; .container-fluid .navbar-brand {\n    margin-left: -15px;\n  }\n}\n.navbar-toggle {\n  position: relative;\n  float: right;\n  padding: 9px 10px;\n  margin-right: 15px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n  background-color: transparent;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.navbar-toggle:focus {\n  outline: 0;\n}\n.navbar-toggle .icon-bar {\n  display: block;\n  width: 22px;\n  height: 2px;\n  border-radius: 1px;\n}\n.navbar-toggle .icon-bar + .icon-bar {\n  margin-top: 4px;\n}\n@media (min-width: 768px) {\n  .navbar-toggle {\n    display: none;\n  }\n}\n.navbar-nav {\n  margin: 7.5px -15px;\n}\n.navbar-nav &gt; li &gt; a {\n  padding-top: 10px;\n  padding-bottom: 10px;\n  line-height: 20px;\n}\n@media (max-width: 767px) {\n  .navbar-nav .open .dropdown-menu {\n    position: static;\n    float: none;\n    width: auto;\n    margin-top: 0;\n    background-color: transparent;\n    border: 0;\n    box-shadow: none;\n  }\n  .navbar-nav .open .dropdown-menu &gt; li &gt; a,\n  .navbar-nav .open .dropdown-menu .dropdown-header {\n    padding: 5px 15px 5px 25px;\n  }\n  .navbar-nav .open .dropdown-menu &gt; li &gt; a {\n    line-height: 20px;\n  }\n  .navbar-nav .open .dropdown-menu &gt; li &gt; a:hover,\n  .navbar-nav .open .dropdown-menu &gt; li &gt; a:focus {\n    background-image: none;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-nav {\n    float: left;\n    margin: 0;\n  }\n  .navbar-nav &gt; li {\n    float: left;\n  }\n  .navbar-nav &gt; li &gt; a {\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }\n}\n.navbar-form {\n  padding: 10px 15px;\n  margin-right: -15px;\n  margin-left: -15px;\n  border-top: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1), 0 1px 0 rgba(255, 255, 255, 0.1);\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\n@media (min-width: 768px) {\n  .navbar-form .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control-static {\n    display: inline-block;\n  }\n  .navbar-form .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .navbar-form .input-group .input-group-addon,\n  .navbar-form .input-group .input-group-btn,\n  .navbar-form .input-group .form-control {\n    width: auto;\n  }\n  .navbar-form .input-group &gt; .form-control {\n    width: 100%;\n  }\n  .navbar-form .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio,\n  .navbar-form .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio label,\n  .navbar-form .checkbox label {\n    padding-left: 0;\n  }\n  .navbar-form .radio input[type=\"radio\"],\n  .navbar-form .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .navbar-form .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n@media (max-width: 767px) {\n  .navbar-form .form-group {\n    margin-bottom: 5px;\n  }\n  .navbar-form .form-group:last-child {\n    margin-bottom: 0;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-form {\n    width: auto;\n    padding-top: 0;\n    padding-bottom: 0;\n    margin-right: 0;\n    margin-left: 0;\n    border: 0;\n    box-shadow: none;\n  }\n}\n.navbar-nav &gt; li &gt; .dropdown-menu {\n  margin-top: 0;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.navbar-fixed-bottom .navbar-nav &gt; li &gt; .dropdown-menu {\n  margin-bottom: 0;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.navbar-btn {\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\n.navbar-btn.btn-sm {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.navbar-btn.btn-xs {\n  margin-top: 14px;\n  margin-bottom: 14px;\n}\n.navbar-text {\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n@media (min-width: 768px) {\n  .navbar-text {\n    float: left;\n    margin-right: 15px;\n    margin-left: 15px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-left {\n    float: left !important;\n  }\n  .navbar-right {\n    float: right !important;\n    margin-right: -15px;\n  }\n  .navbar-right ~ .navbar-right {\n    margin-right: 0;\n  }\n}\n.navbar-default {\n  background-color: #3a3f44;\n  border-color: #2b2e32;\n}\n.navbar-default .navbar-brand {\n  color: #c8c8c8;\n}\n.navbar-default .navbar-brand:hover,\n.navbar-default .navbar-brand:focus {\n  color: #ffffff;\n  background-color: none;\n}\n.navbar-default .navbar-text {\n  color: #c8c8c8;\n}\n.navbar-default .navbar-nav &gt; li &gt; a {\n  color: #c8c8c8;\n}\n.navbar-default .navbar-nav &gt; li &gt; a:hover,\n.navbar-default .navbar-nav &gt; li &gt; a:focus {\n  color: #ffffff;\n  background-color: #272b2e;\n}\n.navbar-default .navbar-nav &gt; .active &gt; a,\n.navbar-default .navbar-nav &gt; .active &gt; a:hover,\n.navbar-default .navbar-nav &gt; .active &gt; a:focus {\n  color: #ffffff;\n  background-color: #272b2e;\n}\n.navbar-default .navbar-nav &gt; .disabled &gt; a,\n.navbar-default .navbar-nav &gt; .disabled &gt; a:hover,\n.navbar-default .navbar-nav &gt; .disabled &gt; a:focus {\n  color: #cccccc;\n  background-color: transparent;\n}\n.navbar-default .navbar-nav &gt; .open &gt; a,\n.navbar-default .navbar-nav &gt; .open &gt; a:hover,\n.navbar-default .navbar-nav &gt; .open &gt; a:focus {\n  color: #ffffff;\n  background-color: #272b2e;\n}\n@media (max-width: 767px) {\n  .navbar-default .navbar-nav .open .dropdown-menu &gt; li &gt; a {\n    color: #c8c8c8;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu &gt; li &gt; a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu &gt; li &gt; a:focus {\n    color: #ffffff;\n    background-color: #272b2e;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu &gt; .active &gt; a,\n  .navbar-default .navbar-nav .open .dropdown-menu &gt; .active &gt; a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu &gt; .active &gt; a:focus {\n    color: #ffffff;\n    background-color: #272b2e;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu &gt; .disabled &gt; a,\n  .navbar-default .navbar-nav .open .dropdown-menu &gt; .disabled &gt; a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu &gt; .disabled &gt; a:focus {\n    color: #cccccc;\n    background-color: transparent;\n  }\n}\n.navbar-default .navbar-toggle {\n  border-color: #272b2e;\n}\n.navbar-default .navbar-toggle:hover,\n.navbar-default .navbar-toggle:focus {\n  background-color: #272b2e;\n}\n.navbar-default .navbar-toggle .icon-bar {\n  background-color: #c8c8c8;\n}\n.navbar-default .navbar-collapse,\n.navbar-default .navbar-form {\n  border-color: #2b2e32;\n}\n.navbar-default .navbar-link {\n  color: #c8c8c8;\n}\n.navbar-default .navbar-link:hover {\n  color: #ffffff;\n}\n.navbar-default .btn-link {\n  color: #c8c8c8;\n}\n.navbar-default .btn-link:hover,\n.navbar-default .btn-link:focus {\n  color: #ffffff;\n}\n.navbar-default .btn-link[disabled]:hover,\nfieldset[disabled] .navbar-default .btn-link:hover,\n.navbar-default .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-default .btn-link:focus {\n  color: #cccccc;\n}\n.navbar-inverse {\n  background-color: #7a8288;\n  border-color: #62686d;\n}\n.navbar-inverse .navbar-brand {\n  color: #cccccc;\n}\n.navbar-inverse .navbar-brand:hover,\n.navbar-inverse .navbar-brand:focus {\n  color: #ffffff;\n  background-color: none;\n}\n.navbar-inverse .navbar-text {\n  color: #cccccc;\n}\n.navbar-inverse .navbar-nav &gt; li &gt; a {\n  color: #cccccc;\n}\n.navbar-inverse .navbar-nav &gt; li &gt; a:hover,\n.navbar-inverse .navbar-nav &gt; li &gt; a:focus {\n  color: #ffffff;\n  background-color: #5d6368;\n}\n.navbar-inverse .navbar-nav &gt; .active &gt; a,\n.navbar-inverse .navbar-nav &gt; .active &gt; a:hover,\n.navbar-inverse .navbar-nav &gt; .active &gt; a:focus {\n  color: #ffffff;\n  background-color: #5d6368;\n}\n.navbar-inverse .navbar-nav &gt; .disabled &gt; a,\n.navbar-inverse .navbar-nav &gt; .disabled &gt; a:hover,\n.navbar-inverse .navbar-nav &gt; .disabled &gt; a:focus {\n  color: #cccccc;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-nav &gt; .open &gt; a,\n.navbar-inverse .navbar-nav &gt; .open &gt; a:hover,\n.navbar-inverse .navbar-nav &gt; .open &gt; a:focus {\n  color: #ffffff;\n  background-color: #5d6368;\n}\n@media (max-width: 767px) {\n  .navbar-inverse .navbar-nav .open .dropdown-menu &gt; .dropdown-header {\n    border-color: #62686d;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu .divider {\n    background-color: #62686d;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu &gt; li &gt; a {\n    color: #cccccc;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu &gt; li &gt; a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu &gt; li &gt; a:focus {\n    color: #ffffff;\n    background-color: #5d6368;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu &gt; .active &gt; a,\n  .navbar-inverse .navbar-nav .open .dropdown-menu &gt; .active &gt; a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu &gt; .active &gt; a:focus {\n    color: #ffffff;\n    background-color: #5d6368;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu &gt; .disabled &gt; a,\n  .navbar-inverse .navbar-nav .open .dropdown-menu &gt; .disabled &gt; a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu &gt; .disabled &gt; a:focus {\n    color: #cccccc;\n    background-color: transparent;\n  }\n}\n.navbar-inverse .navbar-toggle {\n  border-color: #5d6368;\n}\n.navbar-inverse .navbar-toggle:hover,\n.navbar-inverse .navbar-toggle:focus {\n  background-color: #5d6368;\n}\n.navbar-inverse .navbar-toggle .icon-bar {\n  background-color: #ffffff;\n}\n.navbar-inverse .navbar-collapse,\n.navbar-inverse .navbar-form {\n  border-color: #697075;\n}\n.navbar-inverse .navbar-link {\n  color: #cccccc;\n}\n.navbar-inverse .navbar-link:hover {\n  color: #ffffff;\n}\n.navbar-inverse .btn-link {\n  color: #cccccc;\n}\n.navbar-inverse .btn-link:hover,\n.navbar-inverse .btn-link:focus {\n  color: #ffffff;\n}\n.navbar-inverse .btn-link[disabled]:hover,\nfieldset[disabled] .navbar-inverse .btn-link:hover,\n.navbar-inverse .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-inverse .btn-link:focus {\n  color: #cccccc;\n}\n.breadcrumb {\n  padding: 8px 15px;\n  margin-bottom: 20px;\n  list-style: none;\n  background-color: transparent;\n  border-radius: 4px;\n}\n.breadcrumb &gt; li {\n  display: inline-block;\n}\n.breadcrumb &gt; li + li:before {\n  padding: 0 5px;\n  color: #cccccc;\n  content: \"/\\00a0\";\n}\n.breadcrumb &gt; .active {\n  color: #7a8288;\n}\n.pagination {\n  display: inline-block;\n  padding-left: 0;\n  margin: 20px 0;\n  border-radius: 4px;\n}\n.pagination &gt; li {\n  display: inline;\n}\n.pagination &gt; li &gt; a,\n.pagination &gt; li &gt; span {\n  position: relative;\n  float: left;\n  padding: 8px 12px;\n  margin-left: -1px;\n  line-height: 1.42857143;\n  color: #ffffff;\n  text-decoration: none;\n  background-color: #3a3f44;\n  border: 1px solid rgba(0, 0, 0, 0.6);\n}\n.pagination &gt; li &gt; a:hover,\n.pagination &gt; li &gt; span:hover,\n.pagination &gt; li &gt; a:focus,\n.pagination &gt; li &gt; span:focus {\n  z-index: 2;\n  color: #ffffff;\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.pagination &gt; li:first-child &gt; a,\n.pagination &gt; li:first-child &gt; span {\n  margin-left: 0;\n  border-top-left-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.pagination &gt; li:last-child &gt; a,\n.pagination &gt; li:last-child &gt; span {\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.pagination &gt; .active &gt; a,\n.pagination &gt; .active &gt; span,\n.pagination &gt; .active &gt; a:hover,\n.pagination &gt; .active &gt; span:hover,\n.pagination &gt; .active &gt; a:focus,\n.pagination &gt; .active &gt; span:focus {\n  z-index: 3;\n  color: #ffffff;\n  cursor: default;\n  background-color: #232628;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.pagination &gt; .disabled &gt; span,\n.pagination &gt; .disabled &gt; span:hover,\n.pagination &gt; .disabled &gt; span:focus,\n.pagination &gt; .disabled &gt; a,\n.pagination &gt; .disabled &gt; a:hover,\n.pagination &gt; .disabled &gt; a:focus {\n  color: #7a8288;\n  cursor: not-allowed;\n  background-color: #ffffff;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.pagination-lg &gt; li &gt; a,\n.pagination-lg &gt; li &gt; span {\n  padding: 14px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.pagination-lg &gt; li:first-child &gt; a,\n.pagination-lg &gt; li:first-child &gt; span {\n  border-top-left-radius: 6px;\n  border-bottom-left-radius: 6px;\n}\n.pagination-lg &gt; li:last-child &gt; a,\n.pagination-lg &gt; li:last-child &gt; span {\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.pagination-sm &gt; li &gt; a,\n.pagination-sm &gt; li &gt; span {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.pagination-sm &gt; li:first-child &gt; a,\n.pagination-sm &gt; li:first-child &gt; span {\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.pagination-sm &gt; li:last-child &gt; a,\n.pagination-sm &gt; li:last-child &gt; span {\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n.pager {\n  padding-left: 0;\n  margin: 20px 0;\n  text-align: center;\n  list-style: none;\n}\n.pager li {\n  display: inline;\n}\n.pager li &gt; a,\n.pager li &gt; span {\n  display: inline-block;\n  padding: 5px 14px;\n  background-color: #3a3f44;\n  border: 1px solid rgba(0, 0, 0, 0.6);\n  border-radius: 15px;\n}\n.pager li &gt; a:hover,\n.pager li &gt; a:focus {\n  text-decoration: none;\n  background-color: transparent;\n}\n.pager .next &gt; a,\n.pager .next &gt; span {\n  float: right;\n}\n.pager .previous &gt; a,\n.pager .previous &gt; span {\n  float: left;\n}\n.pager .disabled &gt; a,\n.pager .disabled &gt; a:hover,\n.pager .disabled &gt; a:focus,\n.pager .disabled &gt; span {\n  color: #7a8288;\n  cursor: not-allowed;\n  background-color: #3a3f44;\n}\n.label {\n  display: inline;\n  padding: .2em .6em .3em;\n  font-size: 75%;\n  font-weight: 700;\n  line-height: 1;\n  color: #ffffff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: .25em;\n}\na.label:hover,\na.label:focus {\n  color: #ffffff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.label:empty {\n  display: none;\n}\n.btn .label {\n  position: relative;\n  top: -1px;\n}\n.label-default {\n  background-color: #3a3f44;\n}\n.label-default[href]:hover,\n.label-default[href]:focus {\n  background-color: #232628;\n}\n.label-primary {\n  background-color: #7a8288;\n}\n.label-primary[href]:hover,\n.label-primary[href]:focus {\n  background-color: #62686d;\n}\n.label-success {\n  background-color: #62c462;\n}\n.label-success[href]:hover,\n.label-success[href]:focus {\n  background-color: #42b142;\n}\n.label-info {\n  background-color: #5bc0de;\n}\n.label-info[href]:hover,\n.label-info[href]:focus {\n  background-color: #31b0d5;\n}\n.label-warning {\n  background-color: #f89406;\n}\n.label-warning[href]:hover,\n.label-warning[href]:focus {\n  background-color: #c67605;\n}\n.label-danger {\n  background-color: #ee5f5b;\n}\n.label-danger[href]:hover,\n.label-danger[href]:focus {\n  background-color: #e9322d;\n}\n.badge {\n  display: inline-block;\n  min-width: 10px;\n  padding: 3px 7px;\n  font-size: 12px;\n  font-weight: bold;\n  line-height: 1;\n  color: #ffffff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  background-color: #7a8288;\n  border-radius: 10px;\n}\n.badge:empty {\n  display: none;\n}\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n.btn-xs .badge,\n.btn-group-xs &gt; .btn .badge {\n  top: 0;\n  padding: 1px 5px;\n}\na.badge:hover,\na.badge:focus {\n  color: #ffffff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.list-group-item.active &gt; .badge,\n.nav-pills &gt; .active &gt; a &gt; .badge {\n  color: #ffffff;\n  background-color: #7a8288;\n}\n.list-group-item &gt; .badge {\n  float: right;\n}\n.list-group-item &gt; .badge + .badge {\n  margin-right: 5px;\n}\n.nav-pills &gt; li &gt; a &gt; .badge {\n  margin-left: 3px;\n}\n.jumbotron {\n  padding-top: 30px;\n  padding-bottom: 30px;\n  margin-bottom: 30px;\n  color: inherit;\n  background-color: #1c1e22;\n}\n.jumbotron h1,\n.jumbotron .h1 {\n  color: inherit;\n}\n.jumbotron p {\n  margin-bottom: 15px;\n  font-size: 21px;\n  font-weight: 200;\n}\n.jumbotron &gt; hr {\n  border-top-color: #050506;\n}\n.container .jumbotron,\n.container-fluid .jumbotron {\n  padding-right: 15px;\n  padding-left: 15px;\n  border-radius: 6px;\n}\n.jumbotron .container {\n  max-width: 100%;\n}\n@media screen and (min-width: 768px) {\n  .jumbotron {\n    padding-top: 48px;\n    padding-bottom: 48px;\n  }\n  .container .jumbotron,\n  .container-fluid .jumbotron {\n    padding-right: 60px;\n    padding-left: 60px;\n  }\n  .jumbotron h1,\n  .jumbotron .h1 {\n    font-size: 63px;\n  }\n}\n.thumbnail {\n  display: block;\n  padding: 4px;\n  margin-bottom: 20px;\n  line-height: 1.42857143;\n  background-color: #1c1e22;\n  border: 1px solid #0c0d0e;\n  border-radius: 4px;\n  transition: border 0.2s ease-in-out;\n}\n.thumbnail &gt; img,\n.thumbnail a &gt; img {\n  margin-right: auto;\n  margin-left: auto;\n}\na.thumbnail:hover,\na.thumbnail:focus,\na.thumbnail.active {\n  border-color: #ffffff;\n}\n.thumbnail .caption {\n  padding: 9px;\n  color: #c8c8c8;\n}\n.alert {\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.alert h4 {\n  margin-top: 0;\n  color: inherit;\n}\n.alert .alert-link {\n  font-weight: bold;\n}\n.alert &gt; p,\n.alert &gt; ul {\n  margin-bottom: 0;\n}\n.alert &gt; p + p {\n  margin-top: 5px;\n}\n.alert-dismissable,\n.alert-dismissible {\n  padding-right: 35px;\n}\n.alert-dismissable .close,\n.alert-dismissible .close {\n  position: relative;\n  top: -2px;\n  right: -21px;\n  color: inherit;\n}\n.alert-success {\n  color: #ffffff;\n  background-color: #62c462;\n  border-color: #62bd4f;\n}\n.alert-success hr {\n  border-top-color: #55b142;\n}\n.alert-success .alert-link {\n  color: #e6e6e6;\n}\n.alert-info {\n  color: #ffffff;\n  background-color: #5bc0de;\n  border-color: #3dced8;\n}\n.alert-info hr {\n  border-top-color: #2ac7d2;\n}\n.alert-info .alert-link {\n  color: #e6e6e6;\n}\n.alert-warning {\n  color: #ffffff;\n  background-color: #f89406;\n  border-color: #e96506;\n}\n.alert-warning hr {\n  border-top-color: #d05a05;\n}\n.alert-warning .alert-link {\n  color: #e6e6e6;\n}\n.alert-danger {\n  color: #ffffff;\n  background-color: #ee5f5b;\n  border-color: #ed4d63;\n}\n.alert-danger hr {\n  border-top-color: #ea364f;\n}\n.alert-danger .alert-link {\n  color: #e6e6e6;\n}\n@-webkit-keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n@keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n.progress {\n  height: 20px;\n  margin-bottom: 20px;\n  overflow: hidden;\n  background-color: #1c1e22;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n.progress-bar {\n  float: left;\n  width: 0%;\n  height: 100%;\n  font-size: 12px;\n  line-height: 20px;\n  color: #ffffff;\n  text-align: center;\n  background-color: #7a8288;\n  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);\n  transition: width 0.6s ease;\n}\n.progress-striped .progress-bar,\n.progress-bar-striped {\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-size: 40px 40px;\n}\n.progress.active .progress-bar,\n.progress-bar.active {\n  -webkit-animation: progress-bar-stripes 2s linear infinite;\n  animation: progress-bar-stripes 2s linear infinite;\n}\n.progress-bar-success {\n  background-color: #62c462;\n}\n.progress-striped .progress-bar-success {\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.progress-bar-info {\n  background-color: #5bc0de;\n}\n.progress-striped .progress-bar-info {\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.progress-bar-warning {\n  background-color: #f89406;\n}\n.progress-striped .progress-bar-warning {\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.progress-bar-danger {\n  background-color: #ee5f5b;\n}\n.progress-striped .progress-bar-danger {\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.media {\n  margin-top: 15px;\n}\n.media:first-child {\n  margin-top: 0;\n}\n.media,\n.media-body {\n  overflow: hidden;\n  zoom: 1;\n}\n.media-body {\n  width: 10000px;\n}\n.media-object {\n  display: block;\n}\n.media-object.img-thumbnail {\n  max-width: none;\n}\n.media-right,\n.media &gt; .pull-right {\n  padding-left: 10px;\n}\n.media-left,\n.media &gt; .pull-left {\n  padding-right: 10px;\n}\n.media-left,\n.media-right,\n.media-body {\n  display: table-cell;\n  vertical-align: top;\n}\n.media-middle {\n  vertical-align: middle;\n}\n.media-bottom {\n  vertical-align: bottom;\n}\n.media-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.media-list {\n  padding-left: 0;\n  list-style: none;\n}\n.list-group {\n  padding-left: 0;\n  margin-bottom: 20px;\n}\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n  margin-bottom: -1px;\n  background-color: #32383e;\n  border: 1px solid rgba(0, 0, 0, 0.6);\n}\n.list-group-item:first-child {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.list-group-item:last-child {\n  margin-bottom: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.list-group-item.disabled,\n.list-group-item.disabled:hover,\n.list-group-item.disabled:focus {\n  color: #7a8288;\n  cursor: not-allowed;\n  background-color: #999999;\n}\n.list-group-item.disabled .list-group-item-heading,\n.list-group-item.disabled:hover .list-group-item-heading,\n.list-group-item.disabled:focus .list-group-item-heading {\n  color: inherit;\n}\n.list-group-item.disabled .list-group-item-text,\n.list-group-item.disabled:hover .list-group-item-text,\n.list-group-item.disabled:focus .list-group-item-text {\n  color: #7a8288;\n}\n.list-group-item.active,\n.list-group-item.active:hover,\n.list-group-item.active:focus {\n  z-index: 2;\n  color: #ffffff;\n  background-color: #3e444c;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.list-group-item.active .list-group-item-heading,\n.list-group-item.active:hover .list-group-item-heading,\n.list-group-item.active:focus .list-group-item-heading,\n.list-group-item.active .list-group-item-heading &gt; small,\n.list-group-item.active:hover .list-group-item-heading &gt; small,\n.list-group-item.active:focus .list-group-item-heading &gt; small,\n.list-group-item.active .list-group-item-heading &gt; .small,\n.list-group-item.active:hover .list-group-item-heading &gt; .small,\n.list-group-item.active:focus .list-group-item-heading &gt; .small {\n  color: inherit;\n}\n.list-group-item.active .list-group-item-text,\n.list-group-item.active:hover .list-group-item-text,\n.list-group-item.active:focus .list-group-item-text {\n  color: #a2aab4;\n}\na.list-group-item,\nbutton.list-group-item {\n  color: #c8c8c8;\n}\na.list-group-item .list-group-item-heading,\nbutton.list-group-item .list-group-item-heading {\n  color: #ffffff;\n}\na.list-group-item:hover,\nbutton.list-group-item:hover,\na.list-group-item:focus,\nbutton.list-group-item:focus {\n  color: #c8c8c8;\n  text-decoration: none;\n  background-color: #3e444c;\n}\nbutton.list-group-item {\n  width: 100%;\n  text-align: left;\n}\n.list-group-item-success {\n  color: #ffffff;\n  background-color: #62c462;\n}\na.list-group-item-success,\nbutton.list-group-item-success {\n  color: #ffffff;\n}\na.list-group-item-success .list-group-item-heading,\nbutton.list-group-item-success .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-success:hover,\nbutton.list-group-item-success:hover,\na.list-group-item-success:focus,\nbutton.list-group-item-success:focus {\n  color: #ffffff;\n  background-color: #4fbd4f;\n}\na.list-group-item-success.active,\nbutton.list-group-item-success.active,\na.list-group-item-success.active:hover,\nbutton.list-group-item-success.active:hover,\na.list-group-item-success.active:focus,\nbutton.list-group-item-success.active:focus {\n  color: #fff;\n  background-color: #ffffff;\n  border-color: #ffffff;\n}\n.list-group-item-info {\n  color: #ffffff;\n  background-color: #5bc0de;\n}\na.list-group-item-info,\nbutton.list-group-item-info {\n  color: #ffffff;\n}\na.list-group-item-info .list-group-item-heading,\nbutton.list-group-item-info .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-info:hover,\nbutton.list-group-item-info:hover,\na.list-group-item-info:focus,\nbutton.list-group-item-info:focus {\n  color: #ffffff;\n  background-color: #46b8da;\n}\na.list-group-item-info.active,\nbutton.list-group-item-info.active,\na.list-group-item-info.active:hover,\nbutton.list-group-item-info.active:hover,\na.list-group-item-info.active:focus,\nbutton.list-group-item-info.active:focus {\n  color: #fff;\n  background-color: #ffffff;\n  border-color: #ffffff;\n}\n.list-group-item-warning {\n  color: #ffffff;\n  background-color: #f89406;\n}\na.list-group-item-warning,\nbutton.list-group-item-warning {\n  color: #ffffff;\n}\na.list-group-item-warning .list-group-item-heading,\nbutton.list-group-item-warning .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-warning:hover,\nbutton.list-group-item-warning:hover,\na.list-group-item-warning:focus,\nbutton.list-group-item-warning:focus {\n  color: #ffffff;\n  background-color: #df8505;\n}\na.list-group-item-warning.active,\nbutton.list-group-item-warning.active,\na.list-group-item-warning.active:hover,\nbutton.list-group-item-warning.active:hover,\na.list-group-item-warning.active:focus,\nbutton.list-group-item-warning.active:focus {\n  color: #fff;\n  background-color: #ffffff;\n  border-color: #ffffff;\n}\n.list-group-item-danger {\n  color: #ffffff;\n  background-color: #ee5f5b;\n}\na.list-group-item-danger,\nbutton.list-group-item-danger {\n  color: #ffffff;\n}\na.list-group-item-danger .list-group-item-heading,\nbutton.list-group-item-danger .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-danger:hover,\nbutton.list-group-item-danger:hover,\na.list-group-item-danger:focus,\nbutton.list-group-item-danger:focus {\n  color: #ffffff;\n  background-color: #ec4844;\n}\na.list-group-item-danger.active,\nbutton.list-group-item-danger.active,\na.list-group-item-danger.active:hover,\nbutton.list-group-item-danger.active:hover,\na.list-group-item-danger.active:focus,\nbutton.list-group-item-danger.active:focus {\n  color: #fff;\n  background-color: #ffffff;\n  border-color: #ffffff;\n}\n.list-group-item-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.list-group-item-text {\n  margin-bottom: 0;\n  line-height: 1.3;\n}\n.panel {\n  margin-bottom: 20px;\n  background-color: #2e3338;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);\n}\n.panel-body {\n  padding: 15px;\n}\n.panel-heading {\n  padding: 10px 15px;\n  border-bottom: 1px solid transparent;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel-heading &gt; .dropdown .dropdown-toggle {\n  color: inherit;\n}\n.panel-title {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-size: 16px;\n  color: inherit;\n}\n.panel-title &gt; a,\n.panel-title &gt; small,\n.panel-title &gt; .small,\n.panel-title &gt; small &gt; a,\n.panel-title &gt; .small &gt; a {\n  color: inherit;\n}\n.panel-footer {\n  padding: 10px 15px;\n  background-color: #3e444c;\n  border-top: 1px solid rgba(0, 0, 0, 0.6);\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel &gt; .list-group,\n.panel &gt; .panel-collapse &gt; .list-group {\n  margin-bottom: 0;\n}\n.panel &gt; .list-group .list-group-item,\n.panel &gt; .panel-collapse &gt; .list-group .list-group-item {\n  border-width: 1px 0;\n  border-radius: 0;\n}\n.panel &gt; .list-group:first-child .list-group-item:first-child,\n.panel &gt; .panel-collapse &gt; .list-group:first-child .list-group-item:first-child {\n  border-top: 0;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel &gt; .list-group:last-child .list-group-item:last-child,\n.panel &gt; .panel-collapse &gt; .list-group:last-child .list-group-item:last-child {\n  border-bottom: 0;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel &gt; .panel-heading + .panel-collapse &gt; .list-group .list-group-item:first-child {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.panel-heading + .list-group .list-group-item:first-child {\n  border-top-width: 0;\n}\n.list-group + .panel-footer {\n  border-top-width: 0;\n}\n.panel &gt; .table,\n.panel &gt; .table-responsive &gt; .table,\n.panel &gt; .panel-collapse &gt; .table {\n  margin-bottom: 0;\n}\n.panel &gt; .table caption,\n.panel &gt; .table-responsive &gt; .table caption,\n.panel &gt; .panel-collapse &gt; .table caption {\n  padding-right: 15px;\n  padding-left: 15px;\n}\n.panel &gt; .table:first-child,\n.panel &gt; .table-responsive:first-child &gt; .table:first-child {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel &gt; .table:first-child &gt; thead:first-child &gt; tr:first-child,\n.panel &gt; .table-responsive:first-child &gt; .table:first-child &gt; thead:first-child &gt; tr:first-child,\n.panel &gt; .table:first-child &gt; tbody:first-child &gt; tr:first-child,\n.panel &gt; .table-responsive:first-child &gt; .table:first-child &gt; tbody:first-child &gt; tr:first-child {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel &gt; .table:first-child &gt; thead:first-child &gt; tr:first-child td:first-child,\n.panel &gt; .table-responsive:first-child &gt; .table:first-child &gt; thead:first-child &gt; tr:first-child td:first-child,\n.panel &gt; .table:first-child &gt; tbody:first-child &gt; tr:first-child td:first-child,\n.panel &gt; .table-responsive:first-child &gt; .table:first-child &gt; tbody:first-child &gt; tr:first-child td:first-child,\n.panel &gt; .table:first-child &gt; thead:first-child &gt; tr:first-child th:first-child,\n.panel &gt; .table-responsive:first-child &gt; .table:first-child &gt; thead:first-child &gt; tr:first-child th:first-child,\n.panel &gt; .table:first-child &gt; tbody:first-child &gt; tr:first-child th:first-child,\n.panel &gt; .table-responsive:first-child &gt; .table:first-child &gt; tbody:first-child &gt; tr:first-child th:first-child {\n  border-top-left-radius: 3px;\n}\n.panel &gt; .table:first-child &gt; thead:first-child &gt; tr:first-child td:last-child,\n.panel &gt; .table-responsive:first-child &gt; .table:first-child &gt; thead:first-child &gt; tr:first-child td:last-child,\n.panel &gt; .table:first-child &gt; tbody:first-child &gt; tr:first-child td:last-child,\n.panel &gt; .table-responsive:first-child &gt; .table:first-child &gt; tbody:first-child &gt; tr:first-child td:last-child,\n.panel &gt; .table:first-child &gt; thead:first-child &gt; tr:first-child th:last-child,\n.panel &gt; .table-responsive:first-child &gt; .table:first-child &gt; thead:first-child &gt; tr:first-child th:last-child,\n.panel &gt; .table:first-child &gt; tbody:first-child &gt; tr:first-child th:last-child,\n.panel &gt; .table-responsive:first-child &gt; .table:first-child &gt; tbody:first-child &gt; tr:first-child th:last-child {\n  border-top-right-radius: 3px;\n}\n.panel &gt; .table:last-child,\n.panel &gt; .table-responsive:last-child &gt; .table:last-child {\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel &gt; .table:last-child &gt; tbody:last-child &gt; tr:last-child,\n.panel &gt; .table-responsive:last-child &gt; .table:last-child &gt; tbody:last-child &gt; tr:last-child,\n.panel &gt; .table:last-child &gt; tfoot:last-child &gt; tr:last-child,\n.panel &gt; .table-responsive:last-child &gt; .table:last-child &gt; tfoot:last-child &gt; tr:last-child {\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel &gt; .table:last-child &gt; tbody:last-child &gt; tr:last-child td:first-child,\n.panel &gt; .table-responsive:last-child &gt; .table:last-child &gt; tbody:last-child &gt; tr:last-child td:first-child,\n.panel &gt; .table:last-child &gt; tfoot:last-child &gt; tr:last-child td:first-child,\n.panel &gt; .table-responsive:last-child &gt; .table:last-child &gt; tfoot:last-child &gt; tr:last-child td:first-child,\n.panel &gt; .table:last-child &gt; tbody:last-child &gt; tr:last-child th:first-child,\n.panel &gt; .table-responsive:last-child &gt; .table:last-child &gt; tbody:last-child &gt; tr:last-child th:first-child,\n.panel &gt; .table:last-child &gt; tfoot:last-child &gt; tr:last-child th:first-child,\n.panel &gt; .table-responsive:last-child &gt; .table:last-child &gt; tfoot:last-child &gt; tr:last-child th:first-child {\n  border-bottom-left-radius: 3px;\n}\n.panel &gt; .table:last-child &gt; tbody:last-child &gt; tr:last-child td:last-child,\n.panel &gt; .table-responsive:last-child &gt; .table:last-child &gt; tbody:last-child &gt; tr:last-child td:last-child,\n.panel &gt; .table:last-child &gt; tfoot:last-child &gt; tr:last-child td:last-child,\n.panel &gt; .table-responsive:last-child &gt; .table:last-child &gt; tfoot:last-child &gt; tr:last-child td:last-child,\n.panel &gt; .table:last-child &gt; tbody:last-child &gt; tr:last-child th:last-child,\n.panel &gt; .table-responsive:last-child &gt; .table:last-child &gt; tbody:last-child &gt; tr:last-child th:last-child,\n.panel &gt; .table:last-child &gt; tfoot:last-child &gt; tr:last-child th:last-child,\n.panel &gt; .table-responsive:last-child &gt; .table:last-child &gt; tfoot:last-child &gt; tr:last-child th:last-child {\n  border-bottom-right-radius: 3px;\n}\n.panel &gt; .panel-body + .table,\n.panel &gt; .panel-body + .table-responsive,\n.panel &gt; .table + .panel-body,\n.panel &gt; .table-responsive + .panel-body {\n  border-top: 1px solid #1c1e22;\n}\n.panel &gt; .table &gt; tbody:first-child &gt; tr:first-child th,\n.panel &gt; .table &gt; tbody:first-child &gt; tr:first-child td {\n  border-top: 0;\n}\n.panel &gt; .table-bordered,\n.panel &gt; .table-responsive &gt; .table-bordered {\n  border: 0;\n}\n.panel &gt; .table-bordered &gt; thead &gt; tr &gt; th:first-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; thead &gt; tr &gt; th:first-child,\n.panel &gt; .table-bordered &gt; tbody &gt; tr &gt; th:first-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tbody &gt; tr &gt; th:first-child,\n.panel &gt; .table-bordered &gt; tfoot &gt; tr &gt; th:first-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr &gt; th:first-child,\n.panel &gt; .table-bordered &gt; thead &gt; tr &gt; td:first-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; thead &gt; tr &gt; td:first-child,\n.panel &gt; .table-bordered &gt; tbody &gt; tr &gt; td:first-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tbody &gt; tr &gt; td:first-child,\n.panel &gt; .table-bordered &gt; tfoot &gt; tr &gt; td:first-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr &gt; td:first-child {\n  border-left: 0;\n}\n.panel &gt; .table-bordered &gt; thead &gt; tr &gt; th:last-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; thead &gt; tr &gt; th:last-child,\n.panel &gt; .table-bordered &gt; tbody &gt; tr &gt; th:last-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tbody &gt; tr &gt; th:last-child,\n.panel &gt; .table-bordered &gt; tfoot &gt; tr &gt; th:last-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr &gt; th:last-child,\n.panel &gt; .table-bordered &gt; thead &gt; tr &gt; td:last-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; thead &gt; tr &gt; td:last-child,\n.panel &gt; .table-bordered &gt; tbody &gt; tr &gt; td:last-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tbody &gt; tr &gt; td:last-child,\n.panel &gt; .table-bordered &gt; tfoot &gt; tr &gt; td:last-child,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr &gt; td:last-child {\n  border-right: 0;\n}\n.panel &gt; .table-bordered &gt; thead &gt; tr:first-child &gt; td,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; thead &gt; tr:first-child &gt; td,\n.panel &gt; .table-bordered &gt; tbody &gt; tr:first-child &gt; td,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tbody &gt; tr:first-child &gt; td,\n.panel &gt; .table-bordered &gt; thead &gt; tr:first-child &gt; th,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; thead &gt; tr:first-child &gt; th,\n.panel &gt; .table-bordered &gt; tbody &gt; tr:first-child &gt; th,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tbody &gt; tr:first-child &gt; th {\n  border-bottom: 0;\n}\n.panel &gt; .table-bordered &gt; tbody &gt; tr:last-child &gt; td,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tbody &gt; tr:last-child &gt; td,\n.panel &gt; .table-bordered &gt; tfoot &gt; tr:last-child &gt; td,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr:last-child &gt; td,\n.panel &gt; .table-bordered &gt; tbody &gt; tr:last-child &gt; th,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tbody &gt; tr:last-child &gt; th,\n.panel &gt; .table-bordered &gt; tfoot &gt; tr:last-child &gt; th,\n.panel &gt; .table-responsive &gt; .table-bordered &gt; tfoot &gt; tr:last-child &gt; th {\n  border-bottom: 0;\n}\n.panel &gt; .table-responsive {\n  margin-bottom: 0;\n  border: 0;\n}\n.panel-group {\n  margin-bottom: 20px;\n}\n.panel-group .panel {\n  margin-bottom: 0;\n  border-radius: 4px;\n}\n.panel-group .panel + .panel {\n  margin-top: 5px;\n}\n.panel-group .panel-heading {\n  border-bottom: 0;\n}\n.panel-group .panel-heading + .panel-collapse &gt; .panel-body,\n.panel-group .panel-heading + .panel-collapse &gt; .list-group {\n  border-top: 1px solid rgba(0, 0, 0, 0.6);\n}\n.panel-group .panel-footer {\n  border-top: 0;\n}\n.panel-group .panel-footer + .panel-collapse .panel-body {\n  border-bottom: 1px solid rgba(0, 0, 0, 0.6);\n}\n.panel-default {\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-default &gt; .panel-heading {\n  color: #c8c8c8;\n  background-color: #3e444c;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-default &gt; .panel-heading + .panel-collapse &gt; .panel-body {\n  border-top-color: rgba(0, 0, 0, 0.6);\n}\n.panel-default &gt; .panel-heading .badge {\n  color: #3e444c;\n  background-color: #c8c8c8;\n}\n.panel-default &gt; .panel-footer + .panel-collapse &gt; .panel-body {\n  border-bottom-color: rgba(0, 0, 0, 0.6);\n}\n.panel-primary {\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-primary &gt; .panel-heading {\n  color: #ffffff;\n  background-color: #7a8288;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-primary &gt; .panel-heading + .panel-collapse &gt; .panel-body {\n  border-top-color: rgba(0, 0, 0, 0.6);\n}\n.panel-primary &gt; .panel-heading .badge {\n  color: #7a8288;\n  background-color: #ffffff;\n}\n.panel-primary &gt; .panel-footer + .panel-collapse &gt; .panel-body {\n  border-bottom-color: rgba(0, 0, 0, 0.6);\n}\n.panel-success {\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-success &gt; .panel-heading {\n  color: #ffffff;\n  background-color: #62c462;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-success &gt; .panel-heading + .panel-collapse &gt; .panel-body {\n  border-top-color: rgba(0, 0, 0, 0.6);\n}\n.panel-success &gt; .panel-heading .badge {\n  color: #62c462;\n  background-color: #ffffff;\n}\n.panel-success &gt; .panel-footer + .panel-collapse &gt; .panel-body {\n  border-bottom-color: rgba(0, 0, 0, 0.6);\n}\n.panel-info {\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-info &gt; .panel-heading {\n  color: #ffffff;\n  background-color: #5bc0de;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-info &gt; .panel-heading + .panel-collapse &gt; .panel-body {\n  border-top-color: rgba(0, 0, 0, 0.6);\n}\n.panel-info &gt; .panel-heading .badge {\n  color: #5bc0de;\n  background-color: #ffffff;\n}\n.panel-info &gt; .panel-footer + .panel-collapse &gt; .panel-body {\n  border-bottom-color: rgba(0, 0, 0, 0.6);\n}\n.panel-warning {\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-warning &gt; .panel-heading {\n  color: #ffffff;\n  background-color: #f89406;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-warning &gt; .panel-heading + .panel-collapse &gt; .panel-body {\n  border-top-color: rgba(0, 0, 0, 0.6);\n}\n.panel-warning &gt; .panel-heading .badge {\n  color: #f89406;\n  background-color: #ffffff;\n}\n.panel-warning &gt; .panel-footer + .panel-collapse &gt; .panel-body {\n  border-bottom-color: rgba(0, 0, 0, 0.6);\n}\n.panel-danger {\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-danger &gt; .panel-heading {\n  color: #ffffff;\n  background-color: #ee5f5b;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.panel-danger &gt; .panel-heading + .panel-collapse &gt; .panel-body {\n  border-top-color: rgba(0, 0, 0, 0.6);\n}\n.panel-danger &gt; .panel-heading .badge {\n  color: #ee5f5b;\n  background-color: #ffffff;\n}\n.panel-danger &gt; .panel-footer + .panel-collapse &gt; .panel-body {\n  border-bottom-color: rgba(0, 0, 0, 0.6);\n}\n.embed-responsive {\n  position: relative;\n  display: block;\n  height: 0;\n  padding: 0;\n  overflow: hidden;\n}\n.embed-responsive .embed-responsive-item,\n.embed-responsive iframe,\n.embed-responsive embed,\n.embed-responsive object,\n.embed-responsive video {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: 0;\n}\n.embed-responsive-16by9 {\n  padding-bottom: 56.25%;\n}\n.embed-responsive-4by3 {\n  padding-bottom: 75%;\n}\n.well {\n  min-height: 20px;\n  padding: 19px;\n  margin-bottom: 20px;\n  background-color: #1c1e22;\n  border: 1px solid #0c0d0e;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);\n}\n.well blockquote {\n  border-color: #ddd;\n  border-color: rgba(0, 0, 0, 0.15);\n}\n.well-lg {\n  padding: 24px;\n  border-radius: 6px;\n}\n.well-sm {\n  padding: 9px;\n  border-radius: 3px;\n}\n.close {\n  float: right;\n  font-size: 21px;\n  font-weight: bold;\n  line-height: 1;\n  color: #000000;\n  text-shadow: 0 1px 0 #ffffff;\n  filter: alpha(opacity=20);\n  opacity: 0.2;\n}\n.close:hover,\n.close:focus {\n  color: #000000;\n  text-decoration: none;\n  cursor: pointer;\n  filter: alpha(opacity=50);\n  opacity: 0.5;\n}\nbutton.close {\n  padding: 0;\n  cursor: pointer;\n  background: transparent;\n  border: 0;\n  -webkit-appearance: none;\n  appearance: none;\n}\n.modal-open {\n  overflow: hidden;\n}\n.modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1050;\n  display: none;\n  overflow: hidden;\n  -webkit-overflow-scrolling: touch;\n  outline: 0;\n}\n.modal.fade .modal-dialog {\n  -webkit-transform: translate(0, -25%);\n  transform: translate(0, -25%);\n  transition: -webkit-transform 0.3s ease-out;\n  transition: transform 0.3s ease-out;\n}\n.modal.in .modal-dialog {\n  -webkit-transform: translate(0, 0);\n  transform: translate(0, 0);\n}\n.modal-open .modal {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 10px;\n}\n.modal-content {\n  position: relative;\n  background-color: #2e3338;\n  background-clip: padding-box;\n  border: 1px solid #999999;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 6px;\n  box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);\n  outline: 0;\n}\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1040;\n  background-color: #000000;\n}\n.modal-backdrop.fade {\n  filter: alpha(opacity=0);\n  opacity: 0;\n}\n.modal-backdrop.in {\n  filter: alpha(opacity=50);\n  opacity: 0.5;\n}\n.modal-header {\n  padding: 15px;\n  border-bottom: 1px solid #1c1e22;\n}\n.modal-header .close {\n  margin-top: -2px;\n}\n.modal-title {\n  margin: 0;\n  line-height: 1.42857143;\n}\n.modal-body {\n  position: relative;\n  padding: 20px;\n}\n.modal-footer {\n  padding: 20px;\n  text-align: right;\n  border-top: 1px solid #1c1e22;\n}\n.modal-footer .btn + .btn {\n  margin-bottom: 0;\n  margin-left: 5px;\n}\n.modal-footer .btn-group .btn + .btn {\n  margin-left: -1px;\n}\n.modal-footer .btn-block + .btn-block {\n  margin-left: 0;\n}\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll;\n}\n@media (min-width: 768px) {\n  .modal-dialog {\n    width: 600px;\n    margin: 30px auto;\n  }\n  .modal-content {\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n  }\n  .modal-sm {\n    width: 300px;\n  }\n}\n@media (min-width: 992px) {\n  .modal-lg {\n    width: 900px;\n  }\n}\n.tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.42857143;\n  line-break: auto;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  white-space: normal;\n  font-size: 12px;\n  filter: alpha(opacity=0);\n  opacity: 0;\n}\n.tooltip.in {\n  filter: alpha(opacity=90);\n  opacity: 0.9;\n}\n.tooltip.top {\n  padding: 5px 0;\n  margin-top: -3px;\n}\n.tooltip.right {\n  padding: 0 5px;\n  margin-left: 3px;\n}\n.tooltip.bottom {\n  padding: 5px 0;\n  margin-top: 3px;\n}\n.tooltip.left {\n  padding: 0 5px;\n  margin-left: -3px;\n}\n.tooltip.top .tooltip-arrow {\n  bottom: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000000;\n}\n.tooltip.top-left .tooltip-arrow {\n  right: 5px;\n  bottom: 0;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000000;\n}\n.tooltip.top-right .tooltip-arrow {\n  bottom: 0;\n  left: 5px;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000000;\n}\n.tooltip.right .tooltip-arrow {\n  top: 50%;\n  left: 0;\n  margin-top: -5px;\n  border-width: 5px 5px 5px 0;\n  border-right-color: #000000;\n}\n.tooltip.left .tooltip-arrow {\n  top: 50%;\n  right: 0;\n  margin-top: -5px;\n  border-width: 5px 0 5px 5px;\n  border-left-color: #000000;\n}\n.tooltip.bottom .tooltip-arrow {\n  top: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000000;\n}\n.tooltip.bottom-left .tooltip-arrow {\n  top: 0;\n  right: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000000;\n}\n.tooltip.bottom-right .tooltip-arrow {\n  top: 0;\n  left: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000000;\n}\n.tooltip-inner {\n  max-width: 200px;\n  padding: 3px 8px;\n  color: #ffffff;\n  text-align: center;\n  background-color: #000000;\n  border-radius: 4px;\n}\n.tooltip-arrow {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1060;\n  display: none;\n  max-width: 276px;\n  padding: 1px;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.42857143;\n  line-break: auto;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  white-space: normal;\n  font-size: 14px;\n  background-color: #2e3338;\n  background-clip: padding-box;\n  border: 1px solid #999999;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 6px;\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n}\n.popover.top {\n  margin-top: -10px;\n}\n.popover.right {\n  margin-left: 10px;\n}\n.popover.bottom {\n  margin-top: 10px;\n}\n.popover.left {\n  margin-left: -10px;\n}\n.popover &gt; .arrow {\n  border-width: 11px;\n}\n.popover &gt; .arrow,\n.popover &gt; .arrow:after {\n  position: absolute;\n  display: block;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.popover &gt; .arrow:after {\n  content: \"\";\n  border-width: 10px;\n}\n.popover.top &gt; .arrow {\n  bottom: -11px;\n  left: 50%;\n  margin-left: -11px;\n  border-top-color: #666666;\n  border-top-color: rgba(0, 0, 0, 0.25);\n  border-bottom-width: 0;\n}\n.popover.top &gt; .arrow:after {\n  bottom: 1px;\n  margin-left: -10px;\n  content: \" \";\n  border-top-color: #2e3338;\n  border-bottom-width: 0;\n}\n.popover.right &gt; .arrow {\n  top: 50%;\n  left: -11px;\n  margin-top: -11px;\n  border-right-color: #666666;\n  border-right-color: rgba(0, 0, 0, 0.25);\n  border-left-width: 0;\n}\n.popover.right &gt; .arrow:after {\n  bottom: -10px;\n  left: 1px;\n  content: \" \";\n  border-right-color: #2e3338;\n  border-left-width: 0;\n}\n.popover.bottom &gt; .arrow {\n  top: -11px;\n  left: 50%;\n  margin-left: -11px;\n  border-top-width: 0;\n  border-bottom-color: #666666;\n  border-bottom-color: rgba(0, 0, 0, 0.25);\n}\n.popover.bottom &gt; .arrow:after {\n  top: 1px;\n  margin-left: -10px;\n  content: \" \";\n  border-top-width: 0;\n  border-bottom-color: #2e3338;\n}\n.popover.left &gt; .arrow {\n  top: 50%;\n  right: -11px;\n  margin-top: -11px;\n  border-right-width: 0;\n  border-left-color: #666666;\n  border-left-color: rgba(0, 0, 0, 0.25);\n}\n.popover.left &gt; .arrow:after {\n  right: 1px;\n  bottom: -10px;\n  content: \" \";\n  border-right-width: 0;\n  border-left-color: #2e3338;\n}\n.popover-title {\n  padding: 8px 14px;\n  margin: 0;\n  font-size: 14px;\n  background-color: #2e3338;\n  border-bottom: 1px solid #22262a;\n  border-radius: 5px 5px 0 0;\n}\n.popover-content {\n  padding: 9px 14px;\n}\n.carousel {\n  position: relative;\n}\n.carousel-inner {\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n}\n.carousel-inner &gt; .item {\n  position: relative;\n  display: none;\n  transition: 0.6s ease-in-out left;\n}\n.carousel-inner &gt; .item &gt; img,\n.carousel-inner &gt; .item &gt; a &gt; img {\n  line-height: 1;\n}\n@media all and (transform-3d), (-webkit-transform-3d) {\n  .carousel-inner &gt; .item {\n    transition: -webkit-transform 0.6s ease-in-out;\n    transition: transform 0.6s ease-in-out;\n    -webkit-backface-visibility: hidden;\n    backface-visibility: hidden;\n    -webkit-perspective: 1000px;\n    perspective: 1000px;\n  }\n  .carousel-inner &gt; .item.next,\n  .carousel-inner &gt; .item.active.right {\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n    left: 0;\n  }\n  .carousel-inner &gt; .item.prev,\n  .carousel-inner &gt; .item.active.left {\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n    left: 0;\n  }\n  .carousel-inner &gt; .item.next.left,\n  .carousel-inner &gt; .item.prev.right,\n  .carousel-inner &gt; .item.active {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    left: 0;\n  }\n}\n.carousel-inner &gt; .active,\n.carousel-inner &gt; .next,\n.carousel-inner &gt; .prev {\n  display: block;\n}\n.carousel-inner &gt; .active {\n  left: 0;\n}\n.carousel-inner &gt; .next,\n.carousel-inner &gt; .prev {\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n.carousel-inner &gt; .next {\n  left: 100%;\n}\n.carousel-inner &gt; .prev {\n  left: -100%;\n}\n.carousel-inner &gt; .next.left,\n.carousel-inner &gt; .prev.right {\n  left: 0;\n}\n.carousel-inner &gt; .active.left {\n  left: -100%;\n}\n.carousel-inner &gt; .active.right {\n  left: 100%;\n}\n.carousel-control {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 15%;\n  font-size: 20px;\n  color: #ffffff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);\n  background-color: rgba(0, 0, 0, 0);\n  filter: alpha(opacity=50);\n  opacity: 0.5;\n}\n.carousel-control.left {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);\n  background-repeat: repeat-x;\n}\n.carousel-control.right {\n  right: 0;\n  left: auto;\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);\n  background-repeat: repeat-x;\n}\n.carousel-control:hover,\n.carousel-control:focus {\n  color: #ffffff;\n  text-decoration: none;\n  outline: 0;\n  filter: alpha(opacity=90);\n  opacity: 0.9;\n}\n.carousel-control .icon-prev,\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-left,\n.carousel-control .glyphicon-chevron-right {\n  position: absolute;\n  top: 50%;\n  z-index: 5;\n  display: inline-block;\n  margin-top: -10px;\n}\n.carousel-control .icon-prev,\n.carousel-control .glyphicon-chevron-left {\n  left: 50%;\n  margin-left: -10px;\n}\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-right {\n  right: 50%;\n  margin-right: -10px;\n}\n.carousel-control .icon-prev,\n.carousel-control .icon-next {\n  width: 20px;\n  height: 20px;\n  font-family: serif;\n  line-height: 1;\n}\n.carousel-control .icon-prev:before {\n  content: \"\\2039\";\n}\n.carousel-control .icon-next:before {\n  content: \"\\203a\";\n}\n.carousel-indicators {\n  position: absolute;\n  bottom: 10px;\n  left: 50%;\n  z-index: 15;\n  width: 60%;\n  padding-left: 0;\n  margin-left: -30%;\n  text-align: center;\n  list-style: none;\n}\n.carousel-indicators li {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin: 1px;\n  text-indent: -999px;\n  cursor: pointer;\n  background-color: #000 \\9;\n  background-color: rgba(0, 0, 0, 0);\n  border: 1px solid #ffffff;\n  border-radius: 10px;\n}\n.carousel-indicators .active {\n  width: 12px;\n  height: 12px;\n  margin: 0;\n  background-color: #ffffff;\n}\n.carousel-caption {\n  position: absolute;\n  right: 15%;\n  bottom: 20px;\n  left: 15%;\n  z-index: 10;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #ffffff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);\n}\n.carousel-caption .btn {\n  text-shadow: none;\n}\n@media screen and (min-width: 768px) {\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-prev,\n  .carousel-control .icon-next {\n    width: 30px;\n    height: 30px;\n    margin-top: -10px;\n    font-size: 30px;\n  }\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .icon-prev {\n    margin-left: -10px;\n  }\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-next {\n    margin-right: -10px;\n  }\n  .carousel-caption {\n    right: 20%;\n    left: 20%;\n    padding-bottom: 30px;\n  }\n  .carousel-indicators {\n    bottom: 20px;\n  }\n}\n.clearfix:before,\n.clearfix:after,\n.dl-horizontal dd:before,\n.dl-horizontal dd:after,\n.container:before,\n.container:after,\n.container-fluid:before,\n.container-fluid:after,\n.row:before,\n.row:after,\n.form-horizontal .form-group:before,\n.form-horizontal .form-group:after,\n.btn-toolbar:before,\n.btn-toolbar:after,\n.btn-group-vertical &gt; .btn-group:before,\n.btn-group-vertical &gt; .btn-group:after,\n.nav:before,\n.nav:after,\n.navbar:before,\n.navbar:after,\n.navbar-header:before,\n.navbar-header:after,\n.navbar-collapse:before,\n.navbar-collapse:after,\n.pager:before,\n.pager:after,\n.panel-body:before,\n.panel-body:after,\n.modal-header:before,\n.modal-header:after,\n.modal-footer:before,\n.modal-footer:after {\n  display: table;\n  content: \" \";\n}\n.clearfix:after,\n.dl-horizontal dd:after,\n.container:after,\n.container-fluid:after,\n.row:after,\n.form-horizontal .form-group:after,\n.btn-toolbar:after,\n.btn-group-vertical &gt; .btn-group:after,\n.nav:after,\n.navbar:after,\n.navbar-header:after,\n.navbar-collapse:after,\n.pager:after,\n.panel-body:after,\n.modal-header:after,\n.modal-footer:after {\n  clear: both;\n}\n.center-block {\n  display: block;\n  margin-right: auto;\n  margin-left: auto;\n}\n.pull-right {\n  float: right !important;\n}\n.pull-left {\n  float: left !important;\n}\n.hide {\n  display: none !important;\n}\n.show {\n  display: block !important;\n}\n.invisible {\n  visibility: hidden;\n}\n.text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n.hidden {\n  display: none !important;\n}\n.affix {\n  position: fixed;\n}\n@-ms-viewport {\n  width: device-width;\n}\n.visible-xs,\n.visible-sm,\n.visible-md,\n.visible-lg {\n  display: none !important;\n}\n.visible-xs-block,\n.visible-xs-inline,\n.visible-xs-inline-block,\n.visible-sm-block,\n.visible-sm-inline,\n.visible-sm-inline-block,\n.visible-md-block,\n.visible-md-inline,\n.visible-md-inline-block,\n.visible-lg-block,\n.visible-lg-inline,\n.visible-lg-inline-block {\n  display: none !important;\n}\n@media (max-width: 767px) {\n  .visible-xs {\n    display: block !important;\n  }\n  table.visible-xs {\n    display: table !important;\n  }\n  tr.visible-xs {\n    display: table-row !important;\n  }\n  th.visible-xs,\n  td.visible-xs {\n    display: table-cell !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-block {\n    display: block !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline {\n    display: inline !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm {\n    display: block !important;\n  }\n  table.visible-sm {\n    display: table !important;\n  }\n  tr.visible-sm {\n    display: table-row !important;\n  }\n  th.visible-sm,\n  td.visible-sm {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-block {\n    display: block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md {\n    display: block !important;\n  }\n  table.visible-md {\n    display: table !important;\n  }\n  tr.visible-md {\n    display: table-row !important;\n  }\n  th.visible-md,\n  td.visible-md {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-block {\n    display: block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg {\n    display: block !important;\n  }\n  table.visible-lg {\n    display: table !important;\n  }\n  tr.visible-lg {\n    display: table-row !important;\n  }\n  th.visible-lg,\n  td.visible-lg {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-block {\n    display: block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (max-width: 767px) {\n  .hidden-xs {\n    display: none !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .hidden-sm {\n    display: none !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .hidden-md {\n    display: none !important;\n  }\n}\n@media (min-width: 1200px) {\n  .hidden-lg {\n    display: none !important;\n  }\n}\n.visible-print {\n  display: none !important;\n}\n@media print {\n  .visible-print {\n    display: block !important;\n  }\n  table.visible-print {\n    display: table !important;\n  }\n  tr.visible-print {\n    display: table-row !important;\n  }\n  th.visible-print,\n  td.visible-print {\n    display: table-cell !important;\n  }\n}\n.visible-print-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-block {\n    display: block !important;\n  }\n}\n.visible-print-inline {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline {\n    display: inline !important;\n  }\n}\n.visible-print-inline-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline-block {\n    display: inline-block !important;\n  }\n}\n@media print {\n  .hidden-print {\n    display: none !important;\n  }\n}\n.navbar {\n  background-image: linear-gradient(#484e55, #3a3f44 60%, #313539);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff484e55', endColorstr='#ff313539', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n  border: 1px solid rgba(0, 0, 0, 0.6);\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\n}\n.navbar .navbar-nav &gt; li &gt; a {\n  border-right: 1px solid rgba(0, 0, 0, 0.2);\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\n}\n.navbar .navbar-nav &gt; li &gt; a:hover {\n  background-image: linear-gradient(#020202, #101112 40%, #141618);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff020202', endColorstr='#ff141618', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n  border-left-color: transparent;\n}\n.navbar-inverse {\n  background-image: linear-gradient(#8a9196, #7a8288 60%, #70787d);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff8a9196', endColorstr='#ff70787d', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.navbar-inverse .badge {\n  background-color: #5d6368;\n}\n.navbar-inverse .navbar-nav &gt; li &gt; a:hover {\n  background-image: linear-gradient(#404448, #4e5458 40%, #53595d);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff404448', endColorstr='#ff53595d', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.navbar .nav .open &gt; a {\n  border-color: transparent;\n}\n.navbar-nav &gt; li.active &gt; a {\n  border-left-color: transparent;\n}\n.navbar-form {\n  margin-left: 5px;\n  margin-right: 5px;\n}\n.btn,\n.btn:hover {\n  border-color: rgba(0, 0, 0, 0.6);\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\n}\n.btn-default {\n  background-image: linear-gradient(#484e55, #3a3f44 60%, #313539);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff484e55', endColorstr='#ff313539', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-default:hover {\n  background-image: linear-gradient(#020202, #101112 40%, #141618);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff020202', endColorstr='#ff141618', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-primary {\n  background-image: linear-gradient(#8a9196, #7a8288 60%, #70787d);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff8a9196', endColorstr='#ff70787d', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-primary:hover {\n  background-image: linear-gradient(#404448, #4e5458 40%, #53595d);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff404448', endColorstr='#ff53595d', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-success {\n  background-image: linear-gradient(#78cc78, #62c462 60%, #53be53);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff78cc78', endColorstr='#ff53be53', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-success:hover {\n  background-image: linear-gradient(#2f7d2f, #379337 40%, #3a9a3a);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff2f7d2f', endColorstr='#ff3a9a3a', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-info {\n  background-image: linear-gradient(#74cae3, #5bc0de 60%, #4ab9db);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff74cae3', endColorstr='#ff4ab9db', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-info:hover {\n  background-image: linear-gradient(#20829f, #2596b8 40%, #279dc1);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff20829f', endColorstr='#ff279dc1', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-warning {\n  background-image: linear-gradient(#faa123, #f89406 60%, #e48806);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fffaa123', endColorstr='#ffe48806', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-warning:hover {\n  background-image: linear-gradient(#804d03, #9e5f04 40%, #a86404);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff804d03', endColorstr='#ffa86404', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-danger {\n  background-image: linear-gradient(#f17a77, #ee5f5b 60%, #ec4d49);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff17a77', endColorstr='#ffec4d49', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-danger:hover {\n  background-image: linear-gradient(#bb1813, #d71c16 40%, #e01d17);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffbb1813', endColorstr='#ffe01d17', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.btn-link,\n.btn-link:hover {\n  border-color: transparent;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  text-shadow: -1px -1px 0 rgba(0, 0, 0, 0.3);\n}\n.text-primary,\n.text-primary:hover {\n  color: #7a8288;\n}\n.text-success,\n.text-success:hover {\n  color: #62c462;\n}\n.text-danger,\n.text-danger:hover {\n  color: #ee5f5b;\n}\n.text-warning,\n.text-warning:hover {\n  color: #f89406;\n}\n.text-info,\n.text-info:hover {\n  color: #5bc0de;\n}\n.table .success,\n.table .warning,\n.table .danger,\n.table .info {\n  color: #fff;\n}\n.table-bordered tbody tr.success td,\n.table-bordered tbody tr.warning td,\n.table-bordered tbody tr.danger td,\n.table-bordered tbody tr.success:hover td,\n.table-bordered tbody tr.warning:hover td,\n.table-bordered tbody tr.danger:hover td {\n  border-color: #1c1e22;\n}\n.table-responsive &gt; .table {\n  background-color: #2e3338;\n}\ninput,\ntextarea {\n  color: #272b30;\n}\n.has-warning .help-block,\n.has-warning .control-label,\n.has-warning .radio,\n.has-warning .checkbox,\n.has-warning .radio-inline,\n.has-warning .checkbox-inline,\n.has-warning.radio label,\n.has-warning.checkbox label,\n.has-warning.radio-inline label,\n.has-warning.checkbox-inline label,\n.has-warning .form-control-feedback {\n  color: #f89406;\n}\n.has-warning .form-control,\n.has-warning .form-control:focus {\n  border-color: #f89406;\n}\n.has-warning .input-group-addon {\n  background-color: #3a3f44;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.has-error .help-block,\n.has-error .control-label,\n.has-error .radio,\n.has-error .checkbox,\n.has-error .radio-inline,\n.has-error .checkbox-inline,\n.has-error.radio label,\n.has-error.checkbox label,\n.has-error.radio-inline label,\n.has-error.checkbox-inline label,\n.has-error .form-control-feedback {\n  color: #ee5f5b;\n}\n.has-error .form-control,\n.has-error .form-control:focus {\n  border-color: #ee5f5b;\n}\n.has-error .input-group-addon {\n  background-color: #3a3f44;\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.has-success .help-block,\n.has-success .control-label,\n.has-success .radio,\n.has-success .checkbox,\n.has-success .radio-inline,\n.has-success .checkbox-inline,\n.has-success.radio label,\n.has-success.checkbox label,\n.has-success.radio-inline label,\n.has-success.checkbox-inline label,\n.has-success .form-control-feedback {\n  color: #62c462;\n}\n.has-success .form-control,\n.has-success .form-control:focus {\n  border-color: #62c462;\n}\n.has-success .input-group-addon {\n  background-color: #3a3f44;\n  border-color: rgba(0, 0, 0, 0.6);\n}\nlegend {\n  color: #fff;\n}\n.input-group-addon {\n  background-color: #3a3f44;\n  background-image: linear-gradient(#484e55, #3a3f44 60%, #313539);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff484e55', endColorstr='#ff313539', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\n  color: #ffffff;\n}\n.nav .open &gt; a,\n.nav .open &gt; a:hover,\n.nav .open &gt; a:focus {\n  border-color: rgba(0, 0, 0, 0.6);\n}\n.nav-pills &gt; li &gt; a {\n  background-image: linear-gradient(#484e55, #3a3f44 60%, #313539);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff484e55', endColorstr='#ff313539', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n  border: 1px solid rgba(0, 0, 0, 0.6);\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\n}\n.nav-pills &gt; li &gt; a:hover {\n  background-image: linear-gradient(#020202, #101112 40%, #141618);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff020202', endColorstr='#ff141618', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n  border: 1px solid rgba(0, 0, 0, 0.6);\n}\n.nav-pills &gt; li.active &gt; a,\n.nav-pills &gt; li.active &gt; a:hover {\n  background-color: none;\n  background-image: linear-gradient(#020202, #101112 40%, #141618);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff020202', endColorstr='#ff141618', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n  border: 1px solid rgba(0, 0, 0, 0.6);\n}\n.nav-pills &gt; li.disabled &gt; a,\n.nav-pills &gt; li.disabled &gt; a:hover {\n  background-image: linear-gradient(#484e55, #3a3f44 60%, #313539);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff484e55', endColorstr='#ff313539', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.pagination &gt; li &gt; a,\n.pagination &gt; li &gt; span {\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\n  background-image: linear-gradient(#484e55, #3a3f44 60%, #313539);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff484e55', endColorstr='#ff313539', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.pagination &gt; li &gt; a:hover,\n.pagination &gt; li &gt; span:hover {\n  background-image: linear-gradient(#020202, #101112 40%, #141618);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff020202', endColorstr='#ff141618', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.pagination &gt; li.active &gt; a,\n.pagination &gt; li.active &gt; span {\n  background-image: linear-gradient(#020202, #101112 40%, #141618);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff020202', endColorstr='#ff141618', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.pagination &gt; li.disabled &gt; a,\n.pagination &gt; li.disabled &gt; a:hover,\n.pagination &gt; li.disabled &gt; span,\n.pagination &gt; li.disabled &gt; span:hover {\n  background-color: transparent;\n  background-image: linear-gradient(#484e55, #3a3f44 60%, #313539);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff484e55', endColorstr='#ff313539', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.pager &gt; li &gt; a {\n  background-image: linear-gradient(#484e55, #3a3f44 60%, #313539);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff484e55', endColorstr='#ff313539', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\n}\n.pager &gt; li &gt; a:hover {\n  background-image: linear-gradient(#020202, #101112 40%, #141618);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff020202', endColorstr='#ff141618', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.pager &gt; li.disabled &gt; a,\n.pager &gt; li.disabled &gt; a:hover {\n  background-color: transparent;\n  background-image: linear-gradient(#484e55, #3a3f44 60%, #313539);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff484e55', endColorstr='#ff313539', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.breadcrumb {\n  border: 1px solid rgba(0, 0, 0, 0.6);\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\n  background-image: linear-gradient(#484e55, #3a3f44 60%, #313539);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff484e55', endColorstr='#ff313539', GradientType=0);\n  background-repeat: no-repeat;\n  -webkit-filter: none;\n          filter: none;\n}\n.alert .alert-link,\n.alert a {\n  color: #fff;\n  text-decoration: underline;\n}\n.alert .close {\n  color: #000000;\n  text-decoration: none;\n}\na.thumbnail:hover,\na.thumbnail:focus,\na.thumbnail.active {\n  border-color: #0c0d0e;\n}\na.list-group-item.active,\na.list-group-item.active:hover,\na.list-group-item.active:focus {\n  border-color: rgba(0, 0, 0, 0.6);\n}\na.list-group-item-success.active {\n  background-color: #62c462;\n}\na.list-group-item-success.active:hover,\na.list-group-item-success.active:focus {\n  background-color: #4fbd4f;\n}\na.list-group-item-warning.active {\n  background-color: #f89406;\n}\na.list-group-item-warning.active:hover,\na.list-group-item-warning.active:focus {\n  background-color: #df8505;\n}\na.list-group-item-danger.active {\n  background-color: #ee5f5b;\n}\na.list-group-item-danger.active:hover,\na.list-group-item-danger.active:focus {\n  background-color: #ec4844;\n}\n.jumbotron {\n  border: 1px solid rgba(0, 0, 0, 0.6);\n}\n.panel-primary .panel-heading,\n.panel-success .panel-heading,\n.panel-danger .panel-heading,\n.panel-warning .panel-heading,\n.panel-info .panel-heading {\n  border-color: #000;\n}",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code examples"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#objectives",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#objectives",
    "title": "Modelling in R",
    "section": "Objectives",
    "text": "Objectives\n\nLook at the basics of modelling in R, focusing on the R package tidymodels and the “linear” class of models\nLearn to build, interact with and visualise these models\nLearn how to qualitatively assess models\nImportantly, get used to the formula notation in R!",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#question-what-is-a-model",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#question-what-is-a-model",
    "title": "Modelling in R",
    "section": "Question: what is a model?",
    "text": "Question: what is a model?",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#broad-types-of-models",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#broad-types-of-models",
    "title": "Modelling in R",
    "section": "Broad types of models",
    "text": "Broad types of models\n\nDescriptive models\n\nIs there a trend in my data? Is it linear?\n\nInferential models\n\nHypothesis lead - does my therapy improve outcomes?\n\nPredictive models\n\nHow many people will buy product X next month?",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#modelling-in-r---an-overview",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#modelling-in-r---an-overview",
    "title": "Modelling in R",
    "section": "Modelling in R - An Overview",
    "text": "Modelling in R - An Overview\n\nStatistical models are complementary tools to visualisation\nModels help you to extract patterns out of data you input to it\nThe overall goal of a model:\n\nProvide a simple, low-dimensional summary of a dataset",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#setting-up",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#setting-up",
    "title": "Modelling in R",
    "section": "Setting Up!",
    "text": "Setting Up!\n\ntidymodels describes itself thusly: “The tidymodels framework is a collection of packages for modelling and machine learning using tidyverse principles.”\n\n\nlibrary(tidymodels) # for the parsnip package, along with the rest of tidymodels\n\n# Helper packages\nlibrary(tidyverse) # for data manipulations\nlibrary(conflicted) # for helping with conflicts\nlibrary(skimr) # for nice data summaries\nlibrary(ranger) # needed for our random forests\nlibrary(gt) # for tables\nlibrary(usemodels) # for generating nice boilerplate code\nlibrary(vip) # for variable importance of random forest\n\nconflicts_prefer(dplyr::filter)\nconflicts_prefer(modeldata::penguins)",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#starting-simple",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#starting-simple",
    "title": "Modelling in R",
    "section": "Starting Simple",
    "text": "Starting Simple\n\nLet’s start with our old friend, mtcars\n\n\nskimr::skim(mtcars)\n\n\nData summary\n\n\nName\nmtcars\n\n\nNumber of rows\n32\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n11\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nmpg\n0\n1\n20.09\n6.03\n10.40\n15.43\n19.20\n22.80\n33.90\n▃▇▅▁▂\n\n\ncyl\n0\n1\n6.19\n1.79\n4.00\n4.00\n6.00\n8.00\n8.00\n▆▁▃▁▇\n\n\ndisp\n0\n1\n230.72\n123.94\n71.10\n120.83\n196.30\n326.00\n472.00\n▇▃▃▃▂\n\n\nhp\n0\n1\n146.69\n68.56\n52.00\n96.50\n123.00\n180.00\n335.00\n▇▇▆▃▁\n\n\ndrat\n0\n1\n3.60\n0.53\n2.76\n3.08\n3.70\n3.92\n4.93\n▇▃▇▅▁\n\n\nwt\n0\n1\n3.22\n0.98\n1.51\n2.58\n3.33\n3.61\n5.42\n▃▃▇▁▂\n\n\nqsec\n0\n1\n17.85\n1.79\n14.50\n16.89\n17.71\n18.90\n22.90\n▃▇▇▂▁\n\n\nvs\n0\n1\n0.44\n0.50\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▆\n\n\nam\n0\n1\n0.41\n0.50\n0.00\n0.00\n0.00\n1.00\n1.00\n▇▁▁▁▆\n\n\ngear\n0\n1\n3.69\n0.74\n3.00\n3.00\n4.00\n4.00\n5.00\n▇▁▆▁▂\n\n\ncarb\n0\n1\n2.81\n1.62\n1.00\n2.00\n2.00\n4.00\n8.00\n▇▂▅▁▁",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#plot-data",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#plot-data",
    "title": "Modelling in R",
    "section": "Plot data",
    "text": "Plot data\n\nPlotting our data is always a good first step\nDo you see an obvious trend?\n\n\n\nmtcars |&gt;\n  ggplot(aes(x = hp, y = mpg)) +\n  geom_point()",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#models---line-of-best-fit",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#models---line-of-best-fit",
    "title": "Modelling in R",
    "section": "Models - line of best fit",
    "text": "Models - line of best fit\n\nYou’ve seen how we can add a line to the data before, but what does it mean?\n\n\n\nmtcars |&gt;\n  ggplot(aes(x = hp, y = mpg)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#establishing-a-model",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#establishing-a-model",
    "title": "Modelling in R",
    "section": "Establishing a Model",
    "text": "Establishing a Model\n\nSelection: Defining a family of models\n\nA precise, but generic, pattern that you want to capture within your data (such as a straight line or a quadratic curve\nExpress the model family as an equation for a line/curve, such as:\n\n\\(Y = a_1 + a_2 \\times X\\)\n\n\\(X\\) and \\(Y\\) are known variables from your data\n\\(a_1\\) and \\(a_2\\) are parameters that can vary depending on the pattern that is captured\n\nFitting: Generate a fitted model (model fit)\n\nFind the model from the family you’ve chosen that is closes to your data\nThen, taking the generic model and making it specific to your data, like:\n\n\\(Y = 7 + 2 \\times X\\)",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#visualising-model-fitness",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#visualising-model-fitness",
    "title": "Modelling in R",
    "section": "Visualising Model Fitness",
    "text": "Visualising Model Fitness\n\n\ny_model &lt;- 34 + -0.1 * mtcars$hp # A guess of a1 and a2\ny_diff &lt;- mtcars$mpg - y_model\nggplot(mtcars, aes(x = hp, mpg)) +\n  geom_point() +\n  geom_abline(aes(intercept = 34, slope = -0.1)) +\n  geom_segment(\n    aes(\n      x = hp,\n      y = mpg,\n      xend = hp,\n      yend = y_model\n    ),\n    color = \"blue\"\n  )",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#fitness-of-models",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#fitness-of-models",
    "title": "Modelling in R",
    "section": "Fitness of Models",
    "text": "Fitness of Models\n\nA good statistical model is expected to be close to the data\nTo calculate the fitness of a model, we quantify the distance between data and the model to produce a score\nWe repeatedly trail \\(a_1\\) and \\(a_2\\) to find the model with the smallest distance\nWe can therefore define the fitness of the model as the sum of all vertical distances to each data point from the model we’ve picked\nThe distance between these is equivalent to the difference between the \\(Y\\) value given by the model (the prediction) and the \\(Y\\) value in the data (the response)",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#linear-models-and-lm",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#linear-models-and-lm",
    "title": "Modelling in R",
    "section": "Linear models and lm()",
    "text": "Linear models and lm()\n\nAlternatively, we can use a broader family of models called linear models\nA linear model has the general form:\n\n\\(y = a_1 + a_2 \\times x_1 + a_3 \\times x_2 + ... + an \\times x_{(n-1)}\\)\n\nThe previous simple model is equivalent to a general linear model where \\(n = 2\\) and \\(x_1 = x\\)\nFunction for fitting a linear model: lm()\nlm() comes with a special syntax to specify the model family: formula\nFormulas look like y ~ x which translate to a function like \\(y = a_1 + a_2 \\times x\\)\n\n\n\n# A manual base R model with lm\nmodel &lt;- lm(hp ~ mpg, data = mtcars)\n# Extract model coefficients\ncoef(model) |&gt; round(3)\n\n\n(Intercept)         mpg \n    324.082      -8.830",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#an-example-with-the-palmer-penguins-dataset",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#an-example-with-the-palmer-penguins-dataset",
    "title": "Modelling in R",
    "section": "An example with the Palmer penguins dataset",
    "text": "An example with the Palmer penguins dataset\n\nObservations of Antarctic penguins who live on the Palmer Archipelago\nLet’s have a quick look at the data\n\nIt looks like there’s a slight negative correlation between bill length and depth right…?\n\n\n\n\npenguins |&gt;\n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(size = 2) +\n  geom_smooth(method = \"lm\", se = FALSE)",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#think-carefully-about-your-data",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#think-carefully-about-your-data",
    "title": "Modelling in R",
    "section": "Think carefully about your data!",
    "text": "Think carefully about your data!\n\nWe have 3 different species in this data, what happens if we check those?\nA nice example of Simpson’s paradox\n\n\n\npenguins |&gt;\n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species, shape = species), size = 2) +\n  geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n  scale_color_manual(\n    values = c(\n      \"darkorange\",\n      \"darkorchid\",\n      \"cyan4\"\n    )\n  )",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#building-a-model-with-tidymodels",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#building-a-model-with-tidymodels",
    "title": "Modelling in R",
    "section": "Building a model with tidymodels",
    "text": "Building a model with tidymodels\n\nLet’s say we want to try and predict the sex of a penguin based on it’s physical characteristics\n\n\n\npenguins |&gt;\n  filter(!is.na(sex)) |&gt;\n  ggplot(aes(\n    flipper_length_mm,\n    bill_length_mm,\n    color = sex,\n    size = body_mass_g\n  )) +\n  geom_point(alpha = 0.5) +\n  facet_wrap(~species)\n\n\n\n\n\n\n\n\n# Removed unneeded columns and filter NAs\npenguins_df &lt;- penguins |&gt;\n  filter(!is.na(sex)) |&gt;\n  select(-island)",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#how-do-we-know-how-good-our-model-is",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#how-do-we-know-how-good-our-model-is",
    "title": "Modelling in R",
    "section": "How do we know how good our model is?",
    "text": "How do we know how good our model is?",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#splitting-our-data",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#splitting-our-data",
    "title": "Modelling in R",
    "section": "Splitting our data",
    "text": "Splitting our data\n\nWe want to split our data into testing and training datasets prior to modelling\nNOTE that our testing data is precious! We don’t want to squander it and so should only let our final model see it once at the very end\nBut many models require hyperparameter tuning, and what if we want to compare the performance of different models?\n\n\nset.seed(123) # set seed to make sure our results don't change!\n# split data making sure we have sex balanced groups\npenguin_split &lt;- initial_split(penguins_df, strata = sex)\npenguin_train &lt;- training(penguin_split)\npenguin_test &lt;- testing(penguin_split)\npenguin_split\n\n&lt;Training/Testing/Total&gt;\n&lt;249/84/333&gt;",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#internal-resamping",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#internal-resamping",
    "title": "Modelling in R",
    "section": "Internal resamping",
    "text": "Internal resamping\n\nThe prior step gave us our training and final testing set, but we want to compare models so we’ll need some internal testing within the training set\nThere are several approaches but two common ones are:\n\nCross-fold validation - split the data several times (typically 10) and run the model against those splits\nBootstrap validation - resample with replacement, so the same sample can appear multiple times in the training set of each iteration (this approach can be better when you’ve smaller datasets)\n\n\n\n\nset.seed(123)\n# Makes 25 version by default\npenguin_boot &lt;- bootstraps(penguin_train)\nhead(penguin_boot, n = 3)\n\n\n# A tibble: 3 × 2\n  splits           id         \n  &lt;list&gt;           &lt;chr&gt;      \n1 &lt;split [249/93]&gt; Bootstrap01\n2 &lt;split [249/91]&gt; Bootstrap02\n3 &lt;split [249/90]&gt; Bootstrap03",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#comparing-two-modelling-appraoches",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#comparing-two-modelling-appraoches",
    "title": "Modelling in R",
    "section": "Comparing two modelling appraoches",
    "text": "Comparing two modelling appraoches\n\nLet’s compare a logistic regression model and a random forest model\nIn tidymodels we specify the type of model we want and the computational engine to be used\nIn the case of random forest we also have to specify that’s we want a classification model since random forest can model both continuous and categorical outcomes\n\n\n\nglm_spec &lt;- logistic_reg() |&gt;\n  set_engine(\"glm\")\n\nglm_spec\n\n\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#aside---hyperparameter-tuning",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#aside---hyperparameter-tuning",
    "title": "Modelling in R",
    "section": "Aside - hyperparameter tuning",
    "text": "Aside - hyperparameter tuning\n\nModel hyperparameters are model variables we can set for some modelling approaches that can be very important for how that model performs\nIt can also be difficult to know what values to use for some of these and so we might want to iterate over several values to see which performs the best\n\n\n\n# make some nice boilerplate code\nusemodels::use_ranger(sex ~ ., data = penguin_train)\n\n\nranger_recipe &lt;- \n  recipe(formula = sex ~ ., data = penguin_train) \n\nranger_spec &lt;- \n  rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %&gt;% \n  set_mode(\"classification\") %&gt;% \n  set_engine(\"ranger\") \n\nranger_workflow &lt;- \n  workflow() %&gt;% \n  add_recipe(ranger_recipe) %&gt;% \n  add_model(ranger_spec) \n\nset.seed(12151)\nranger_tune &lt;-\n  tune_grid(ranger_workflow, resamples = stop(\"add your rsample object\"), grid = stop(\"add number of candidate points\"))",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#testing-hyperparameters",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#testing-hyperparameters",
    "title": "Modelling in R",
    "section": "Testing hyperparameters",
    "text": "Testing hyperparameters\n\n\nranger_recipe &lt;-\n  recipe(formula = sex ~ ., data = penguin_train) |&gt;\n  # impute the mean if any values are missing\n  step_impute_mean(all_numeric_predictors()) |&gt;\n  # apply hot-one encoding to factors\n  step_dummy(all_nominal_predictors()) |&gt;\n  # remove any predictors that have 0 variance\n  step_nzv(all_numeric_predictors())\n\nranger_spec &lt;-\n  rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %&gt;%\n  set_mode(\"classification\") %&gt;%\n  set_engine(\"ranger\")\n\nranger_workflow &lt;-\n  workflow() %&gt;%\n  add_recipe(ranger_recipe) %&gt;%\n  add_model(ranger_spec)\n\nset.seed(70081)\ndoParallel::registerDoParallel()\nranger_tune &lt;-\n  tune_grid(ranger_workflow, resamples = penguin_boot, grid = 10)",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#visualising-different-hyperparameters",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#visualising-different-hyperparameters",
    "title": "Modelling in R",
    "section": "Visualising different hyperparameters",
    "text": "Visualising different hyperparameters\n\n\nshow_best(ranger_tune, metric = \"accuracy\")\n\n\n# A tibble: 5 × 8\n   mtry min_n .metric  .estimator  mean     n std_err .config              \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                \n1     1    14 accuracy binary     0.920    25 0.00550 Preprocessor1_Model01\n2     2     2 accuracy binary     0.918    25 0.00571 Preprocessor1_Model03\n3     1    31 accuracy binary     0.915    25 0.00581 Preprocessor1_Model02\n4     2    18 accuracy binary     0.914    25 0.00522 Preprocessor1_Model04\n5     3     6 accuracy binary     0.910    25 0.00525 Preprocessor1_Model06\n\nshow_best(ranger_tune, metric = \"roc_auc\")\n\n# A tibble: 5 × 8\n   mtry min_n .metric .estimator  mean     n std_err .config              \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                \n1     2     2 roc_auc binary     0.979    25 0.00195 Preprocessor1_Model03\n2     1    14 roc_auc binary     0.977    25 0.00220 Preprocessor1_Model01\n3     2    18 roc_auc binary     0.976    25 0.00211 Preprocessor1_Model04\n4     3     6 roc_auc binary     0.976    25 0.00203 Preprocessor1_Model06\n5     1    31 roc_auc binary     0.975    25 0.00236 Preprocessor1_Model02\n\n\n\n\nautoplot(ranger_tune)",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#finalise-our-random-forest-workflow",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#finalise-our-random-forest-workflow",
    "title": "Modelling in R",
    "section": "Finalise our random forest workflow",
    "text": "Finalise our random forest workflow\n\nWe can easily just take the best parameters from our best using select_best, though note that what you might want to optimise your model for may depend on your goal!\n\n\n\nfinal_rf &lt;- ranger_workflow %&gt;%\n  finalize_workflow(select_best(ranger_tune))\n\nfinal_rf\n\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n3 Recipe Steps\n\n• step_impute_mean()\n• step_dummy()\n• step_nzv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nRandom Forest Model Specification (classification)\n\nMain Arguments:\n  mtry = 2\n  trees = 1000\n  min_n = 2\n\nComputational engine: ranger",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#model-formula-and-pre-processing-with-recipes",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#model-formula-and-pre-processing-with-recipes",
    "title": "Modelling in R",
    "section": "Model formula and pre-processing with recipes",
    "text": "Model formula and pre-processing with recipes\n\nThere are many processing steps we might want to perform on our data when modelling it, so tidymodels provides a framework for this\nThis gives us lots of function for imputing missing data, scaling and centring and much more\n\n\n# Set sex as the outcome and use all other\n# variables as predictors with the \".\" shorthand\nrecipe &lt;- recipe(sex ~ ., data = penguin_train) |&gt;\n  # impute the mean if any values are missing\n  step_impute_mean(all_numeric_predictors()) |&gt;\n  # apply hot-one encoding to factors\n  step_dummy(all_nominal_predictors()) |&gt;\n  # remove any predictors that have 0 variance\n  step_nzv(all_numeric_predictors())\n\n# Add this to a workflow\npenguin_wf &lt;- workflow() |&gt;\n  add_recipe(recipe)\npenguin_wf\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: None\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n3 Recipe Steps\n\n• step_impute_mean()\n• step_dummy()\n• step_nzv()",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#aside---formula-options---interactions",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#aside---formula-options---interactions",
    "title": "Modelling in R",
    "section": "Aside - formula options - interactions",
    "text": "Aside - formula options - interactions\n\nWe often might be interested in interactions between variables, so we can use the * to assess this in the formula\n\n\n\nlm(body_mass_g ~ bill_length_mm * bill_depth_mm, data = penguins_df) |&gt;\n  tidy()\n\n\n# A tibble: 4 × 5\n  term                         estimate std.error statistic  p.value\n  &lt;chr&gt;                           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)                  -25718.    2696.       -9.54 3.37e-19\n2 bill_length_mm                  719.      59.3      12.1  3.03e-28\n3 bill_depth_mm                  1493.     151.        9.90 2.19e-20\n4 bill_length_mm:bill_depth_mm    -36.3      3.33    -10.9  7.28e-24",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#aside---formula-options---multilevel-modelling",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#aside---formula-options---multilevel-modelling",
    "title": "Modelling in R",
    "section": "Aside - formula options - multilevel modelling",
    "text": "Aside - formula options - multilevel modelling\n\nThere are multilevel modelling approaches that allow us to set random effects for variables using a | syntax\nThis in package dependant though, so we need to add the formula in a engine specific way\n\n\n\nlibrary(multilevelmod)\n\nmultilevel_spec &lt;- linear_reg() |&gt;\n  set_engine(\"lmer\")\n\nmultilevel_workflow &lt;-\n  workflow() |&gt;\n  # Pass the data along as-is:\n  add_variables(\n    outcome = body_mass_g,\n    predictors = c(species, bill_depth_mm, sex)\n  ) |&gt;\n  add_model(\n    multilevel_spec,\n    # This formula is given to the model\n    formula = body_mass_g ~ sex + (bill_depth_mm | species)\n  )\n\nmultilevel_fit &lt;- fit(multilevel_workflow, data = penguins_df)\nmultilevel_fit\n\n\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Variables\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\nOutcomes: body_mass_g\nPredictors: c(species, bill_depth_mm, sex)\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear mixed model fit by REML ['lmerMod']\nFormula: body_mass_g ~ sex + (bill_depth_mm | species)\n   Data: data\nREML criterion at convergence: 4748.6697\nRandom effects:\n Groups   Name          Std.Dev.   Corr      \n species  (Intercept)   405.334397           \n          bill_depth_mm 115.494533 -0.5679630\n Residual               301.509210           \nNumber of obs: 333, groups:  species, 3\nFixed Effects:\n(Intercept)      sexmale  \n 2469.88962    510.40032",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#checking-our-recipe",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#checking-our-recipe",
    "title": "Modelling in R",
    "section": "Checking our recipe",
    "text": "Checking our recipe\n\nMight be wise to make sure our recipe is doing what we think it is!\n\n\n\nprep(recipe)",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#running-our-logistic-regression-model",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#running-our-logistic-regression-model",
    "title": "Modelling in R",
    "section": "Running our logistic regression model",
    "text": "Running our logistic regression model\n\n\nglm_rs &lt;- penguin_wf |&gt;\n  add_model(glm_spec) |&gt;\n  fit_resamples(\n    resamples = penguin_boot,\n    control = control_resamples(save_pred = TRUE)\n  )\n\nglm_rs\n\n\n# Resampling results\n# Bootstrap sampling \n# A tibble: 25 × 5\n   splits           id          .metrics         .notes           .predictions\n   &lt;list&gt;           &lt;chr&gt;       &lt;list&gt;           &lt;list&gt;           &lt;list&gt;      \n 1 &lt;split [249/93]&gt; Bootstrap01 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 2 &lt;split [249/91]&gt; Bootstrap02 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 3 &lt;split [249/90]&gt; Bootstrap03 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 4 &lt;split [249/91]&gt; Bootstrap04 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 5 &lt;split [249/85]&gt; Bootstrap05 &lt;tibble [3 × 4]&gt; &lt;tibble [1 × 3]&gt; &lt;tibble&gt;    \n 6 &lt;split [249/87]&gt; Bootstrap06 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 7 &lt;split [249/94]&gt; Bootstrap07 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 8 &lt;split [249/88]&gt; Bootstrap08 &lt;tibble [3 × 4]&gt; &lt;tibble [1 × 3]&gt; &lt;tibble&gt;    \n 9 &lt;split [249/95]&gt; Bootstrap09 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n10 &lt;split [249/89]&gt; Bootstrap10 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n# ℹ 15 more rows\n\nThere were issues with some computations:\n\n  - Warning(s) x3: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nRun `show_notes(.Last.tune.result)` for more information.",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#running-our-random-forest-model",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#running-our-random-forest-model",
    "title": "Modelling in R",
    "section": "Running our random forest model",
    "text": "Running our random forest model\n\n\nrf_rs &lt;- final_rf |&gt;\n  fit_resamples(\n    resamples = penguin_boot,\n    control = control_resamples(save_pred = TRUE)\n  )\n\nrf_rs\n\n\n# Resampling results\n# Bootstrap sampling \n# A tibble: 25 × 5\n   splits           id          .metrics         .notes           .predictions\n   &lt;list&gt;           &lt;chr&gt;       &lt;list&gt;           &lt;list&gt;           &lt;list&gt;      \n 1 &lt;split [249/93]&gt; Bootstrap01 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 2 &lt;split [249/91]&gt; Bootstrap02 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 3 &lt;split [249/90]&gt; Bootstrap03 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 4 &lt;split [249/91]&gt; Bootstrap04 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 5 &lt;split [249/85]&gt; Bootstrap05 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 6 &lt;split [249/87]&gt; Bootstrap06 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 7 &lt;split [249/94]&gt; Bootstrap07 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 8 &lt;split [249/88]&gt; Bootstrap08 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n 9 &lt;split [249/95]&gt; Bootstrap09 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n10 &lt;split [249/89]&gt; Bootstrap10 &lt;tibble [3 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble&gt;    \n# ℹ 15 more rows",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#evaluating-our-models",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#evaluating-our-models",
    "title": "Modelling in R",
    "section": "Evaluating our models",
    "text": "Evaluating our models\n\nWhich performed better?\n\n\n\ncollect_metrics(glm_rs) |&gt;\n  mutate(across(where(is.numeric), round, digits = 3)) |&gt;\n  gt()\ncollect_metrics(rf_rs) |&gt;\n  mutate(across(where(is.numeric), round, digits = 3)) |&gt;\n  gt()\n\n\n\n\n\n\n\n\n.metric\n.estimator\nmean\nn\nstd_err\n.config\n\n\n\n\naccuracy\nbinary\n0.918\n25\n0.006\nPreprocessor1_Model1\n\n\nbrier_class\nbinary\n0.059\n25\n0.004\nPreprocessor1_Model1\n\n\nroc_auc\nbinary\n0.979\n25\n0.003\nPreprocessor1_Model1\n\n\n\n\n\n\n\n\n\n\n\n.metric\n.estimator\nmean\nn\nstd_err\n.config\n\n\n\n\naccuracy\nbinary\n0.919\n25\n0.006\nPreprocessor1_Model1\n\n\nbrier_class\nbinary\n0.064\n25\n0.002\nPreprocessor1_Model1\n\n\nroc_auc\nbinary\n0.979\n25\n0.002\nPreprocessor1_Model1",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#random-forest-variable-importance",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#random-forest-variable-importance",
    "title": "Modelling in R",
    "section": "Random forest variable importance",
    "text": "Random forest variable importance\n\n\nimp_spec &lt;- ranger_spec %&gt;%\n  finalize_model(select_best(ranger_tune)) %&gt;%\n  set_engine(\"ranger\", importance = \"permutation\")\n\nworkflow() %&gt;%\n  add_recipe(ranger_recipe) %&gt;%\n  add_model(imp_spec) %&gt;%\n  fit(penguin_train) %&gt;%\n  extract_fit_parsnip() %&gt;%\n  vip(aesthetics = list(alpha = 0.8, fill = \"midnightblue\"))",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#confusion-matrix",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#confusion-matrix",
    "title": "Modelling in R",
    "section": "Confusion matrix",
    "text": "Confusion matrix\n\nA confusion matrix tells us how many time our model predicts a correct category\n\n\n\nglm_rs |&gt;\n  conf_mat_resampled()\n\n\n# A tibble: 4 × 3\n  Prediction Truth   Freq\n  &lt;fct&gt;      &lt;fct&gt;  &lt;dbl&gt;\n1 female     female  41.1\n2 female     male     3  \n3 male       female   4.4\n4 male       male    42.3",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#roc-curve",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#roc-curve",
    "title": "Modelling in R",
    "section": "ROC curve",
    "text": "ROC curve\n\n\nglm_rs |&gt;\n  collect_predictions() |&gt;\n  group_by(id) |&gt;\n  roc_curve(sex, .pred_female) |&gt;\n  ggplot(aes(1 - specificity, sensitivity, color = id)) +\n  geom_abline(lty = 2, color = \"gray80\", linewidth = 1.5) +\n  geom_path(show.legend = FALSE, alpha = 0.6, linewidth = 1.2) +\n  coord_equal()",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#using-our-precious-testing-data",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#using-our-precious-testing-data",
    "title": "Modelling in R",
    "section": "Using our precious testing data",
    "text": "Using our precious testing data\n\nHaving decided on our best model we can finally use our testing set to evaluate our performance using all of our training data\n\n\n\npenguin_final &lt;- penguin_wf %&gt;%\n  add_model(glm_spec) %&gt;%\n  last_fit(penguin_split)\n\npenguin_final\n\n\n# Resampling results\n# Manual resampling \n# A tibble: 1 × 6\n  splits           id               .metrics .notes   .predictions .workflow \n  &lt;list&gt;           &lt;chr&gt;            &lt;list&gt;   &lt;list&gt;   &lt;list&gt;       &lt;list&gt;    \n1 &lt;split [249/84]&gt; train/test split &lt;tibble&gt; &lt;tibble&gt; &lt;tibble&gt;     &lt;workflow&gt;",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#final-model-performance",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#final-model-performance",
    "title": "Modelling in R",
    "section": "Final model performance",
    "text": "Final model performance\n\n\ncollect_metrics(penguin_final)\n\n\n# A tibble: 3 × 4\n  .metric     .estimator .estimate .config             \n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 accuracy    binary         0.857 Preprocessor1_Model1\n2 roc_auc     binary         0.938 Preprocessor1_Model1\n3 brier_class binary         0.101 Preprocessor1_Model1\n\ncollect_predictions(penguin_final) |&gt;\n  conf_mat(sex, .pred_class)\n\n          Truth\nPrediction female male\n    female     37    7\n    male        5   35",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#odds-ratios",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#odds-ratios",
    "title": "Modelling in R",
    "section": "Odds ratios",
    "text": "Odds ratios\n\nWe can check our coefficients to see what variables are predictive of sex\n\n\n\npenguin_final$.workflow[[1]] %&gt;%\n  tidy(exponentiate = TRUE) |&gt;\n  arrange(estimate)\n\n\n# A tibble: 7 × 5\n  term              estimate std.error statistic     p.value\n  &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1 (Intercept)       5.75e-46  19.6        -5.31  0.000000110\n2 species_Gentoo    1.14e- 5   3.75       -3.03  0.00243    \n3 species_Chinstrap 1.37e- 4   2.34       -3.79  0.000148   \n4 body_mass_g       1.01e+ 0   0.00176     4.59  0.00000442 \n5 flipper_length_mm 1.06e+ 0   0.0611      0.926 0.355      \n6 bill_length_mm    1.91e+ 0   0.180       3.60  0.000321   \n7 bill_depth_mm     8.36e+ 0   0.478       4.45  0.00000868",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#final-plot",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#final-plot",
    "title": "Modelling in R",
    "section": "Final plot",
    "text": "Final plot\n\nHaving learnt that bill depth is our strongest predictor by far (an increase of 1mm for bill depth corresponds to an over 8x higher odds of being male!), we can plot this variable to see how well is segregates\n\n\n\npenguins %&gt;%\n  filter(!is.na(sex)) %&gt;%\n  ggplot(aes(bill_depth_mm, bill_length_mm, color = sex, size = body_mass_g)) +\n  geom_point(alpha = 0.5) +\n  facet_wrap(~species)",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#links-and-resources",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#links-and-resources",
    "title": "Modelling in R",
    "section": "Links and Resources",
    "text": "Links and Resources\n\nA great book on modelling with R that focuses on using tidymodels: https://www.tmwr.org/\nA nice YouTube channel with lots of modelling examples: https://www.youtube.com/@JuliaSilge/featured",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/met581_08_modelling_r.html#workshop-time",
    "href": "08_Modelling_in_R/met581_08_modelling_r.html#workshop-time",
    "title": "Modelling in R",
    "section": "Workshop time!",
    "text": "Workshop time!\n\nThese slides and the workshop can be found on the website here:",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_programming_in_r_workshop.html",
    "href": "06_Programming_in_R/met581_programming_in_r_workshop.html",
    "title": "Programming in R Workshop",
    "section": "",
    "text": "Load purrr, tidyverse and dplyr packages.\n\nCodelibrary(purrr)\nlibrary(tidyverse)\nlibrary(conflicted)\nlibrary(dplyr)\n\n\nLoad the Eukaryotes dataset - only have to run this once to get the data\n\nCodeeukaryotes &lt;- read_tsv(\n  file = \"ftp://ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/eukaryotes.txt\", \n  na = c(\"\", \"na\", \"-\")\n)\n\n# Reformat dataset headers\nnames_new &lt;- names(eukaryotes) |&gt; \n  str_replace_all(\"[#%()]\", \"\") |&gt; \n  str_replace_all(\"[ /]\", \"_\") |&gt;\n  str_to_lower()\n\neukaryotes &lt;- eukaryotes |&gt; \n  set_names(names_new)\n\n# Save tibble\nwrite_tsv(eukaryotes, \"eukaryotes.tsv\")\n\n\nLoad the saved dataset\n\nCodeeukaryotes &lt;- read_tsv(\"https://raw.githubusercontent.com/swuyts/purrr_tutorial/master/data/eukaryotes.tsv\")\n\nRows: 11508 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (10): organism_name, bioproject_accession, group, subgroup, assembly_ac...\ndbl   (7): taxid, bioproject_id, size_mb, gc, scaffolds, genes, proteins\ndate  (2): release_date, modify_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHow many different organisms are there in our dataset?\n\nCode# Put your answer here\n\n\nSubset dataframe by selecting variables for the analysis:\nUsing n_distinct to each variable of eukaryotes_subset"
  },
  {
    "objectID": "06_Programming_in_R/met581_programming_in_r_workshop.html#load-packages",
    "href": "06_Programming_in_R/met581_programming_in_r_workshop.html#load-packages",
    "title": "Programming in R Workshop",
    "section": "",
    "text": "Load purrr, tidyverse and dplyr packages.\n\nCodelibrary(purrr)\nlibrary(tidyverse)\nlibrary(conflicted)\nlibrary(dplyr)\n\n\nLoad the Eukaryotes dataset - only have to run this once to get the data\n\nCodeeukaryotes &lt;- read_tsv(\n  file = \"ftp://ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/eukaryotes.txt\", \n  na = c(\"\", \"na\", \"-\")\n)\n\n# Reformat dataset headers\nnames_new &lt;- names(eukaryotes) |&gt; \n  str_replace_all(\"[#%()]\", \"\") |&gt; \n  str_replace_all(\"[ /]\", \"_\") |&gt;\n  str_to_lower()\n\neukaryotes &lt;- eukaryotes |&gt; \n  set_names(names_new)\n\n# Save tibble\nwrite_tsv(eukaryotes, \"eukaryotes.tsv\")\n\n\nLoad the saved dataset\n\nCodeeukaryotes &lt;- read_tsv(\"https://raw.githubusercontent.com/swuyts/purrr_tutorial/master/data/eukaryotes.tsv\")\n\nRows: 11508 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (10): organism_name, bioproject_accession, group, subgroup, assembly_ac...\ndbl   (7): taxid, bioproject_id, size_mb, gc, scaffolds, genes, proteins\ndate  (2): release_date, modify_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHow many different organisms are there in our dataset?\n\nCode# Put your answer here\n\n\nSubset dataframe by selecting variables for the analysis:\nUsing n_distinct to each variable of eukaryotes_subset"
  },
  {
    "objectID": "06_Programming_in_R/met581_programming_in_r_workshop.html#nested-tibbles",
    "href": "06_Programming_in_R/met581_programming_in_r_workshop.html#nested-tibbles",
    "title": "Programming in R Workshop",
    "section": "Nested Tibbles",
    "text": "Nested Tibbles\nSplit the eukaryotes dataset according to groups defined in the group variable:\nSplit the “eukaryotes_nested” into 5 smaller dataframes."
  },
  {
    "objectID": "06_Programming_in_R/met581_programming_in_r_workshop.html#combine-nested-tibbles-and-map",
    "href": "06_Programming_in_R/met581_programming_in_r_workshop.html#combine-nested-tibbles-and-map",
    "title": "Programming in R Workshop",
    "section": "Combine nested tibbles and map",
    "text": "Combine nested tibbles and map\nCount number of rows for each sub data frames\nCreate a new column using mutate()\nHow many different organisms are there per group ?\nThere are two different ways:\nApply the function to our nested data:\nWe can define the functions on the fly:"
  },
  {
    "objectID": "06_Programming_in_R/met581_programming_in_r_workshop.html#pmap-and-walk2-functions",
    "href": "06_Programming_in_R/met581_programming_in_r_workshop.html#pmap-and-walk2-functions",
    "title": "Programming in R Workshop",
    "section": "pmap and walk2 functions",
    "text": "pmap and walk2 functions\nThis about the following example for pmap, what will it do?:\n\nCodedf &lt;- data.frame(\n  x = c(\"ATTTTACTGGGAGGGAA\", \"TATTTTTTAAAGGGCCC\", \"GCGCGCCCCAAATTATAGGC\", \"TGCCACATTTTATCCGCGCA\"),\n  pattern = c(\"A\", \"T\", \"G\", \"C\"),\n  replacement = c(\"a\", \"t\", \"g\", \"c\"),\n  stringsAsFactors = FALSE\n  )\n\npmap(df, gsub)\n\n[[1]]\n[1] \"aTTTTaCTGGGaGGGaa\"\n\n[[2]]\n[1] \"tAttttttAAAGGGCCC\"\n\n[[3]]\n[1] \"gCgCgCCCCAAATTATAggC\"\n\n[[4]]\n[1] \"TGccAcATTTTATccGcGcA\"\n\n\nExample for walk2:\n\nCodedf1 &lt;- data.frame(\n  index = c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),\n  value = c(40,20,10,5,50,80,30,20,80,90,33,21,56,66,43,89,66,80,30,10),\n  category = c(\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\")\n)\n\ndf1 %&gt;%\n  split(.$category) %&gt;%\n  .[order(names(.))] %&gt;%\n  walk2(paste('Plot', names(.)), \n        ~plot(value ~ index, data = .x, type = \"l\", main = .y))"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#anonymous-feedback-course-content",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#anonymous-feedback-course-content",
    "title": "MET581 Lecture 05",
    "section": "Anonymous Feedback | Course content",
    "text": "Anonymous Feedback | Course content\nUse the QR code, this link or type code #3267575 into slido.com",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#overview",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#overview",
    "title": "MET581 Lecture 05",
    "section": "Overview",
    "text": "Overview",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#setup",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#setup",
    "title": "MET581 Lecture 05",
    "section": "Setup",
    "text": "Setup\nPlease install and load the following packages for today\n\nlibrary(forcats)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(testthat)\nlibrary(gapminder)",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#review",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#review",
    "title": "MET581 Lecture 05",
    "section": "Review",
    "text": "Review\n\ndplyr verbs, tidyr, joins, stringr\nhomework",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#significantly-more-important-review",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#significantly-more-important-review",
    "title": "MET581 Lecture 05",
    "section": "Significantly More Important Review",
    "text": "Significantly More Important Review",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#the-plan",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#the-plan",
    "title": "MET581 Lecture 05",
    "section": "The Plan",
    "text": "The Plan\n\nFactors and Forcats\nDates and Lubridate\nFunctions and conditionals",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#factors-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#factors-1",
    "title": "MET581 Lecture 05",
    "section": "Factors",
    "text": "Factors\nA factor:\n\nis how we store categorical variables in R\ncontains a fixed and known set of possible values\n\nWe can create them using the factor() function, which takes the format: factor(vector, levels, labels)\n\n# e.g.\nfactor(c(0, 1, 1, 1, 0), labels=c('Female', 'Male'))\n\n[1] Female Male   Male   Male   Female\nLevels: Female Male",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#making-factors",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#making-factors",
    "title": "MET581 Lecture 05",
    "section": "Making Factors",
    "text": "Making Factors\nWe can make factors that have an inherent order\n\nmonthLevels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\ndata &lt;- factor(c(\"Dec\", \"Jun\", \"Apr\"))\ndata\n\n[1] Dec Jun Apr\nLevels: Apr Dec Jun\n\n\nBut sorting them may not give us what we expect\n\nsort(data)\n\n[1] Apr Dec Jun\nLevels: Apr Dec Jun",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#making-factors-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#making-factors-1",
    "title": "MET581 Lecture 05",
    "section": "Making Factors",
    "text": "Making Factors\n\nFactors always have an internal order, even if you don’t give one\nIf you don’t set the levels, they will be alphabetical\nIf you want a specific order, you need to give it:\n\n\nmonthLevels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\ndata &lt;- factor(c(\"Dec\", \"Jun\", \"Apr\"), levels = monthLevels)\nsort(data)\n\n[1] Apr Jun Dec\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#making-factors-2",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#making-factors-2",
    "title": "MET581 Lecture 05",
    "section": "Making Factors",
    "text": "Making Factors\nStrings that aren’t in your levels are silently set as NA\n\nfactor(c(\"Dec\", \"Jum\", \"Apr\"), levels = monthLevels)\n\n[1] Dec  &lt;NA&gt; Apr \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nBy contrast, readr’s parse_factor() will warn you\n\nreadr::parse_factor(c(\"Dec\", \"Jum\", \"Apr\"), levels = monthLevels)\n\n[1] Dec  &lt;NA&gt; Apr \nattr(,\"problems\")\n# A tibble: 1 × 4\n    row   col expected           actual\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;              &lt;chr&gt; \n1     2    NA value in level set Jum   \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#factors-practice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#factors-practice",
    "title": "MET581 Lecture 05",
    "section": "Factors Practice",
    "text": "Factors Practice\n\ncreate a factor vector called ‘marauders’ that contains the strings ‘moony’, ‘wormtail’, ‘padfoot’ and ‘prongs’ in alphabetical order\ncreate a factor called ‘patronus’ with the strings ‘stag’, ‘dog’, ‘otter’, creating levels from the order they appear in the input vector\nprint only the levels of these factors\n\nUsing diamonds\n\nuse dplyr::count() to show how many rows there are for each factor level in the ‘cut’ column. Is it any different to using forcats::fct_count()?\nuse dplyr::arrange(desc()) to sort the cut column in descending order. What were the rows sorted by?",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#why-should-i-care",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#why-should-i-care",
    "title": "MET581 Lecture 05",
    "section": "Why should I care?",
    "text": "Why should I care?\n\nyou’re better than that\nplots\nmodels\nforcats",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#why-use-the-forcats-package",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#why-use-the-forcats-package",
    "title": "MET581 Lecture 05",
    "section": "Why use the Forcats* package?",
    "text": "Why use the Forcats* package?\n\nIt enables a lot of the common needs we have with factors\nIt works well with ggplot2 (also written by Hadley/the tidyverse team)\nIt generally tries to warn you when something may be wrong\nIt has the word cats in it\nIt’s an anagram of factors\nIt’s for categoricals (factors)\nSomething about cats\n\n*strictly for humans",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_inorder",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_inorder",
    "title": "MET581 Lecture 05",
    "section": "fct_inorder()",
    "text": "fct_inorder()\nfct_inorder()\n\n# sets the levels to be the\n# order they appear in the vector\nhead(fct_inorder(gss_cat$marital))\n\n[1] Never married Divorced      Widowed       Never married Divorced     \n[6] Married      \nLevels: Never married Divorced Widowed Married Separated No answer",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_relevel",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_relevel",
    "title": "MET581 Lecture 05",
    "section": "fct_relevel()",
    "text": "fct_relevel()\nfct_relevel()\n\n# moves one or more levels to the start\nhead(fct_relevel(gss_cat$marital, 'Married'))\n\n[1] Never married Divorced      Widowed       Never married Divorced     \n[6] Married      \nLevels: Married No answer Never married Separated Divorced Widowed",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_recode",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_recode",
    "title": "MET581 Lecture 05",
    "section": "fct_recode()",
    "text": "fct_recode()\nFor changing the names of existing levels by hand\n\nmyFactor &lt;- factor(c(\"M\", \"F\", \"O\", \"M\", \"P\", \"M\",\n                     \"F\", \"F\", \"F\", \"M\", \"O\", \"P\"))\nmyFactorPub &lt;- fct_recode(myFactor, male = \"M\", female = \"F\",\n                          unknown = \"O\", unknown = \"P\")\nmyFactorPub\n\n [1] male    female  unknown male    unknown male    female  female  female \n[10] male    unknown unknown\nLevels: female male unknown",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder",
    "title": "MET581 Lecture 05",
    "section": "fct_reorder()",
    "text": "fct_reorder()",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder-1",
    "title": "MET581 Lecture 05",
    "section": "fct_reorder()",
    "text": "fct_reorder()",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder-2",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder-2",
    "title": "MET581 Lecture 05",
    "section": "fct_reorder()",
    "text": "fct_reorder()\n\nthe most useful (in my opinion)\nreorder your factor levels by another variable\nallows you to bring structure to plots\n\n\ngss_cat |&gt;\n    group_by(marital) |&gt;\n    summarise(tvhours = mean(tvhours, na.rm = TRUE)) |&gt;\n    ggplot(aes(tvhours, fct_reorder(marital, tvhours))) + # &lt;&lt;&lt;---\n      geom_point()",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#forcats---practice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#forcats---practice",
    "title": "MET581 Lecture 05",
    "section": "Forcats - Practice!",
    "text": "Forcats - Practice!\nUsing gss_cat\n\nhow many levels are there in the ‘relig’ column?\nreorder the levels of ‘denom’ in order of appearance\ntake the code below which plots income by age. Try changing the order of the levels in ‘rincome’ to be sorted by ‘age’. Now try just moving n/a to the start. Which option works best?\n\n\ngss_cat |&gt;\n  group_by(rincome) |&gt;\n  summarise(\n    age = mean(age, na.rm = TRUE),\n    tvhours = mean(tvhours, na.rm = TRUE),\n    n = n()) |&gt;\n  ggplot(aes(age, rincome)) +\n    geom_point()",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder2",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder2",
    "title": "MET581 Lecture 05",
    "section": "fct_reorder2()",
    "text": "fct_reorder2()",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder2-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder2-1",
    "title": "MET581 Lecture 05",
    "section": "fct_reorder2()",
    "text": "fct_reorder2()",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder2-2",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#fct_reorder2-2",
    "title": "MET581 Lecture 05",
    "section": "fct_reorder2()",
    "text": "fct_reorder2()\n\nprobably the second most useful\nsuprisingly helpful when reading graphs\n\n\ngss_cat |&gt;\n  filter(!is.na(age)) |&gt;\n  count(age, marital) |&gt;\n  group_by(age) |&gt;\n  mutate(prop = n / sum(n)) |&gt;\n  ggplot(aes(age, prop, colour = fct_reorder2(marital, age, prop))) + # &lt;&lt;&lt;---\n    geom_line() +\n    labs(colour = \"marital\")",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#other-useful-forcats-functions",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#other-useful-forcats-functions",
    "title": "MET581 Lecture 05",
    "section": "Other useful Forcats functions",
    "text": "Other useful Forcats functions\n\nfct_rev() reverses the order of the levels\nfct_lump() combines least common factor levels into ‘other’\nfct_expand() adds new levels to your factors\nfct_relabel() automatically relabels factor levels\nfct_infreq() order factors from most frequent to least frequent",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#forcats---more-practice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#forcats---more-practice",
    "title": "MET581 Lecture 05",
    "section": "Forcats - More Practice!",
    "text": "Forcats - More Practice!\nUsing gss_cat\n\nchange the names of the levels of partyid from “Not str republican”, “Ind,near dem” and “Ind,near rep” to “Not strong republican”, “Independent, near democrat” and “Independent, near republican”\nrun the code chunk below and view the output. Now edit the code so that the bars are sorted from lowest to highest using fct_infreq() and fct_rev()\n\n\ngss_cat |&gt;\n  ggplot(aes(marital)) +\n    geom_bar()",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#forcats---still-more-practice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#forcats---still-more-practice",
    "title": "MET581 Lecture 05",
    "section": "Forcats - Still More Practice!",
    "text": "Forcats - Still More Practice!\nUsing gss_cat\n\nchange the code below so that the legend colours match the order of the lines at the right side of the plot\n\n\ndiamonds |&gt;\n  filter(color == 'J', depth &gt; 55, carat &lt;=2.5) |&gt;\n  ggplot(aes(carat, price, col=cut)) +\n    geom_line(alpha=0.6)",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#gotchas-coercing-factors",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#gotchas-coercing-factors",
    "title": "MET581 Lecture 05",
    "section": "Gotchas: coercing factors",
    "text": "Gotchas: coercing factors\nErrors may be obvious:\n\nx &lt;- factor(c(1, 1, 0, 0, 1, 0, 1, 1, 1, 0))\nas.numeric(x)\n\n [1] 2 2 1 1 2 1 2 2 2 1",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#gotchas-coercing-factors-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#gotchas-coercing-factors-1",
    "title": "MET581 Lecture 05",
    "section": "Gotchas: coercing factors",
    "text": "Gotchas: coercing factors\nOr they can be more subtle:\n\nx &lt;- factor(c(1, 1, 2, 5, 3, 3, 1, 6, 5, 1, 6, 2))\nas.numeric(x)\n\n [1] 1 1 2 4 3 3 1 5 4 1 5 2",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#gotchas-coercing-factors-2",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#gotchas-coercing-factors-2",
    "title": "MET581 Lecture 05",
    "section": "Gotchas: coercing factors",
    "text": "Gotchas: coercing factors\n\nNEVER convert from factor to numeric unless you know that’s what you want\nIt returns R’s internal codes for the factors, not their values\nInstead, convert to character first, then to numeric, i.e.:\n\n\nx &lt;- factor(c(1, 1, 2, 5, 3, 3, 1, 6, 5, 1, 6, 2))\nas.numeric(as.character(x))\n\n [1] 1 1 2 5 3 3 1 6 5 1 6 2",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#dates-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#dates-1",
    "title": "MET581 Lecture 05",
    "section": "Dates",
    "text": "Dates",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#how-dates-work-in-r",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#how-dates-work-in-r",
    "title": "MET581 Lecture 05",
    "section": "How Dates Work in R",
    "text": "How Dates Work in R\n\nDates and times are not just strings, they have many formats like YYYY-MM-DD, MM/DD/YYYY, or even DD-MM-YYYY.\nHandling dates involves dealing with varied formats, time zones, leap years, and calculations between dates\nR has special packages to parse and manage dates efficiently.\n\n\nclass(\"2024-10-20\") # a simple date string\n\n[1] \"character\"\n\nclass(as.Date(\"2024-10-20\")) # a date object\n\n[1] \"Date\"\n\ntypeof(as.Date(\"2024-10-20\")) # but a double under the hood\n\n[1] \"double\"",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#introduction-to-lubridate",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#introduction-to-lubridate",
    "title": "MET581 Lecture 05",
    "section": "Introduction to lubridate",
    "text": "Introduction to lubridate\n\nlubridate is an R package designed to make working with dates and times easier\nIt helps parse different date formats, manipulate dates, and perform calculations.\nIt’s just not possible to be accurate in handling dates without a dedicated date package\nBut with lubridate, you can:\n\nparse dates from strings in common formats\ndo arithmetic with dates easily\naccount for time zones, leap years etc.\nhandle times too (though we don’t cover that here)",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#lubridatefunctions",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#lubridatefunctions",
    "title": "MET581 Lecture 05",
    "section": "lubridate::functions()",
    "text": "lubridate::functions()\n\nymd() converts strings to dates in the format YYYY-MM-DD (year-month-day)\nit returns a date object, which is a special type of object in R\nthere are several related functions which parse slightly different formats, such as mdy(), dmy(), ymd_hms() etc.\ntoday() returns the current date\nyear(), month(), day() extract the year, month, and day from a date object",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#lubridatefunctions-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#lubridatefunctions-1",
    "title": "MET581 Lecture 05",
    "section": "lubridate::functions()",
    "text": "lubridate::functions()\n\ninterval() creates an interval between two dates\nwe can pass this to time_length(), which calculates the length of an interval in a specified unit\n\n\n# Create two date objects\nstart_date &lt;- ymd(\"2015-05-15\")\nend_date &lt;- ymd(\"2024-10-20\")\ndate_interval &lt;- interval(start_date, end_date)\n\nprint(time_length(date_interval, \"years\"))\n\n[1] 9.43287671233",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#lubridatepractice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#lubridatepractice",
    "title": "MET581 Lecture 05",
    "section": "lubridate::practice()",
    "text": "lubridate::practice()\n\nJohn Doe was born on 4th September, 1983. Create a date object for his birth date\nHow old was John on the 6th June, 2020?\nWhat about today?\n\nusing the lakers dataset which comes with lubridate\n\nchoose the correct function to replace some_function below:\n\n\nlakers |&gt; \n  as_tibble() |&gt; \n  mutate(date = some_function(sprintf(\"%08d\", date)))",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#lubridatepractice_more",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#lubridatepractice_more",
    "title": "MET581 Lecture 05",
    "section": "lubridate::practice_more()",
    "text": "lubridate::practice_more()\nusing the economics dataset from ggplot2\n\ntake the date column from the economics dataset and create two new columns which contain the year and month of each date\ncreate a new column called time_since_nyse, which contains the number of years between the founding of the New York Stock Exchange on 17th May, 1792 and the date column",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#anonymous-feedback-comments",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#anonymous-feedback-comments",
    "title": "MET581 Lecture 05",
    "section": "Anonymous Feedback | Comments",
    "text": "Anonymous Feedback | Comments\nUse the QR code, this link or type code #3267575 into slido.com",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#functions-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#functions-1",
    "title": "MET581 Lecture 05",
    "section": "Functions",
    "text": "Functions\nFunctions in R:\n\nallow you to automate tasks in a more powerful way than copy/paste\nmean you only need to update code in one place\nreduce the likelihood of errors\nare for others, but mainly for YOU\nshould be written for readability and reusability\nhave the format\n\n\nfunction_name &lt;- function(arg1, arg2, arg3) {\n  # function body\n}",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#functions---practice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#functions---practice",
    "title": "MET581 Lecture 05",
    "section": "Functions - Practice!",
    "text": "Functions - Practice!\ncall your functions after creating them to check their output\n\nwrite an empty function with no arguments, called ‘stub_func’.\nwrite a function that takes no arguments and returns the number 3 using the return() statement. Choose an appropriate name.\ncreate another function with no return statement or arguments, which only contains the number 3. Run the function. Is it different to before?\ncreate a function called my_divide() which takes two arguments, ‘x’ and ‘y’ and returns x divided by y. Use an explicit return statement.\nwe want to still return a value when y is zero. Change the my_divide() function so that there is another argument called ‘tol’. Set it to a very low value, and add it to y before dividing.",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#general-rules-for-writing-functions",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#general-rules-for-writing-functions",
    "title": "MET581 Lecture 05",
    "section": "General Rules for Writing Functions",
    "text": "General Rules for Writing Functions\nTry to decipher the following code below - what does it do? - does it work? Are there errors?\n\ndf &lt;- data.frame(a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10))\ndf$a &lt;- (df$a - min(df$a, na.rm = TRUE)) / (max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))\ndf$b &lt;- (df$b - min(df$b, na.rm = TRUE)) / (max(df$b, na.rm = TRUE) - min(df$a, na.rm = TRUE))\ndf$c &lt;- (df$c - min(df$c, na.rm = TRUE)) / (max(df$c, na.rm = TRUE) - min(df$c, na.rm = TRUE))\ndf$d &lt;- (df$d - min(df$d, na.rm = TRUE)) / (max(df$d, na.rm = TRUE) - min(df$d, na.rm = TRUE))",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#general-rules-for-writing-functions-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#general-rules-for-writing-functions-1",
    "title": "MET581 Lecture 05",
    "section": "General Rules for Writing Functions",
    "text": "General Rules for Writing Functions\nIs this better?\n\nrescale &lt;- function(x) {\n    return((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)))\n}",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#general-rules-for-writing-functions-2",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#general-rules-for-writing-functions-2",
    "title": "MET581 Lecture 05",
    "section": "General Rules for Writing Functions",
    "text": "General Rules for Writing Functions\nEven better?\n\nrescale &lt;- function(x) {\n    y &lt;- min(x, na.rm = TRUE)\n    return((x - y) / (max(x, na.rm = TRUE) - y))\n}",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#general-rules-for-writing-functions-3",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#general-rules-for-writing-functions-3",
    "title": "MET581 Lecture 05",
    "section": "General Rules for Writing Functions",
    "text": "General Rules for Writing Functions\nPerfect?\n\nrescale &lt;- function(x) {\n  # rescale vector to the range from 0 to 1\n  min_value &lt;- min(x, na.rm = TRUE)\n  return((x - min_value) / (max(x, na.rm = TRUE) - min_value))\n}",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#general-rules-for-writing-functions-4",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#general-rules-for-writing-functions-4",
    "title": "MET581 Lecture 05",
    "section": "General Rules for Writing Functions",
    "text": "General Rules for Writing Functions\n\nnever take variables created outside a function and use them from inside a function unless you pass them as an argument\nif you have a lot of functions, it’s good practice to put them in a separate file and use ‘source’\ngenerally, functions should do one thing, but you can do whatever you like, including nested functions",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#when-to-write-a-function",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#when-to-write-a-function",
    "title": "MET581 Lecture 05",
    "section": "When to write a function",
    "text": "When to write a function\n\nif you find yourself writing/pasting the same thing 2/3 times",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#when-not-to-write-a-function",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#when-not-to-write-a-function",
    "title": "MET581 Lecture 05",
    "section": "When NOT to write a function",
    "text": "When NOT to write a function\n\nif it’s a one-off bit of code you’ll never use again\nyou’re lazy\nyou hate future you",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#anonymous-functions",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#anonymous-functions",
    "title": "MET581 Lecture 05",
    "section": "Anonymous functions",
    "text": "Anonymous functions\n\nsometimes we need to package up some code in a function, but we know we’ll never need it again\nthis is common where we do something trivial, like a simple calculation\nin these cases we often create a function on the fly in the call to another function\nthese are called anonymous functions (because we don’t name them) or lambda functions (from lambda calculus)\nthey’re reasonably common in R, especially when using dplyr",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#anonymous-functions-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#anonymous-functions-1",
    "title": "MET581 Lecture 05",
    "section": "Anonymous functions",
    "text": "Anonymous functions\n\nyou’ve already seen these in calls to functions like summarise()!\nthe tilde (~) is used to create a lambda function, and the dot (.x) is used to refer to the input\nyou will also see . used to refer to the input - this is the same as .x\nyou can actually use anything you like, but . and .x are common conventions\n\n\n# example use of an anonymous function with summarise\ngapminder |&gt;\n  group_by(continent) |&gt;\n  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) |&gt;\n  head(3)\n\n\n\n\n\ncontinent\nyear\nlifeExp\npop\ngdpPercap\n\n\n\n\nAfrica\n1979.5\n48.8653301282\n9916003.14263\n2193.75457829\n\n\nAmericas\n1979.5\n64.6587366667\n24504794.99667\n7136.11035559\n\n\nAsia\n1979.5\n60.0649032323\n77038721.97222\n7902.15042805",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#anonymous-functions-2",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#anonymous-functions-2",
    "title": "MET581 Lecture 05",
    "section": "Anonymous functions",
    "text": "Anonymous functions\n\nIn this way,\n\n\n~ mean(.x, na.rm = TRUE)\n\nis equivalent to\n\nfunction(.x) {\n  mean(.x, na.rm = TRUE)\n}",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#if-else-statements",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#if-else-statements",
    "title": "MET581 Lecture 05",
    "section": "if-else statements",
    "text": "if-else statements\nif statements have the format:\n\nif (condition) {\n  # code executed when condition is TRUE\n} else {\n  # code executed when condition is FALSE\n}",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#if-else-statements-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#if-else-statements-1",
    "title": "MET581 Lecture 05",
    "section": "if-else statements",
    "text": "if-else statements\nWe can add multiple else if statements to these\n\nif (x &gt; 0) {\n    print(\"Positive\")\n} else if (x &lt; 0) {\n    print(\"Negative\")\n} else {\n    print(\"Zero\")\n}",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#if-else-statements-2",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#if-else-statements-2",
    "title": "MET581 Lecture 05",
    "section": "if-else statements",
    "text": "if-else statements\n\nifelse() lets us use vectorised if-else statements (note, dplyr has a version called dplyr::if_else() that’s a bit stricter)\nif you have a lot of if statements, check out the switch() function\ndplyr::case_when() handles multiple vectorised if_else() statements\n\n\n# example use of case_when to simplify multiple if_else statements\ngapminder |&gt;\n  mutate(lifeExp_category = case_when(\n    lifeExp &lt; 50 ~ \"Low\",\n    lifeExp &gt;= 50 & lifeExp &lt;= 70 ~ \"Medium\",\n    lifeExp &gt; 70 ~ \"High\"\n  )) |&gt;\n  head(3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncountry\ncontinent\nyear\nlifeExp\npop\ngdpPercap\nlifeExp_category\n\n\n\n\nAfghanistan\nAsia\n1952\n28.801\n8425333\n779.4453145\nLow\n\n\nAfghanistan\nAsia\n1957\n30.332\n9240934\n820.8530296\nLow\n\n\nAfghanistan\nAsia\n1962\n31.997\n10267083\n853.1007100\nLow",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#using-your-functions-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#using-your-functions-1",
    "title": "MET581 Lecture 05",
    "section": "Using your functions",
    "text": "Using your functions\n\nmodularising code\nunit testing\npackages",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#modularising-code",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#modularising-code",
    "title": "MET581 Lecture 05",
    "section": "Modularising code",
    "text": "Modularising code\n\nseparating code into functions and files makes it easier to re-use across projects\nit also makes it easier to maintain as we know where to go to change them\ntesting functions is also easier than testing code spread out in a script and interweaved with results",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#modularising-code---practice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#modularising-code---practice",
    "title": "MET581 Lecture 05",
    "section": "Modularising code - practice!",
    "text": "Modularising code - practice!\n\ncreate a new R script\ncreate a function in the script called my_add() that takes two arguments, x and y and returns their sum (do not paste it into the terminal!)\nsave the R script\nin the console, source the R script with source(\"path/to/script.R\")\nrun the function with my_add(2, 3)",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#types-of-testing",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#types-of-testing",
    "title": "MET581 Lecture 05",
    "section": "Types of testing",
    "text": "Types of testing\n\nthere are many ways to test your code! We have:\n\nunit tests in your local development environment or CI/CD pipeline\nintegration tests to check that your code works with other code\nquality assurance tests to check that your code meets a certain standard (usually done by a separate team)\nend-to-end tests to check that your code works in a real-world (production) environment",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#unit-testing",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#unit-testing",
    "title": "MET581 Lecture 05",
    "section": "Unit Testing",
    "text": "Unit Testing\n\nfor testing the smallest unit of code (functions)\nthey are simply functions that test your code to make sure it does what it is supposed to\nthis can mean it gives the correct output with expected input, but also that it errors as expected when you give it faulty input\nallows you to change your code and quickly check it still works\nallows you to sleep at night\ndone in r using the testthat package",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#unit-testing---practice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#unit-testing---practice",
    "title": "MET581 Lecture 05",
    "section": "Unit testing - practice!",
    "text": "Unit testing - practice!\n\ncreate a function called my_multiply() that takes two arguments, x and y and returns their product\nwrite a test for this function that checks that my_multiply(2, 3) returns 6\nuse the example of my_add below and modify it:\n\n\nmy_add &lt;- function(x, y) {\n  return(x + y)\n}\n\ntestthat::test_that(\"my_add() works as expected\",\n{\n  testthat::expect_equal(my_add(2, 3), 5)\n})",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#putting-it-all-together-optional-extra-homework",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#putting-it-all-together-optional-extra-homework",
    "title": "MET581 Lecture 05",
    "section": "Putting it all together (optional extra homework)",
    "text": "Putting it all together (optional extra homework)\n\ncreate a github account\ninstall devtools and testthat\nmake a personal package following the outline here\nadd a function to the package for a common task you do (can be simple)\nwrite test for your function using testthat\npush it to github and (double optional) send me the link!",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#putting-it-all-together-optional-extra-homework-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#putting-it-all-together-optional-extra-homework-1",
    "title": "MET581 Lecture 05",
    "section": "Putting it all together (optional extra homework)",
    "text": "Putting it all together (optional extra homework)\n\nthis:\n\nis a great way to learn how to write functions and test them\nit will set you up for future projects\nis entirely optional and not required for the course",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#homework",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Slides.html#homework",
    "title": "MET581 Lecture 05",
    "section": "Homework",
    "text": "Homework\n\nQuarto file and optional reading below\nA history of stringsAsFactors\nBackground to factors\nAnonymous functions\nMore information on unit tests",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Slides"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework.html",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework.html",
    "title": "MET581 Lecture 05 Homework",
    "section": "",
    "text": "This document contains all questions for the lecture ‘Wrangling Data 3’. Please create a Quarto document containing all text, code and output used to answer the questions.",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Homework"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework.html#factors",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework.html#factors",
    "title": "MET581 Lecture 05 Homework",
    "section": "1 Factors",
    "text": "1 Factors\n\nWhen does fct_lump() stop adding levels into “other”?\nLoad the gss_cat dataframe and get a summary to see if the amount of tv hours per day affects the political party a person belongs to.\nRepeat the previous exercise, but this time merge all the “other party” levels into a single option and reorder the factor by the average tv hours per day.\n\nYou have a vector of categorical data that has a natural order to it, and you want to use in a regression model. The vector is c(‘Some’, ‘All’, ‘None’, ‘Half’, ‘Most’, ‘Most’, ‘Most’, ‘All’, ‘Some’, ‘None’). Create a factor from this vector by pasting it into the factor() function and assign to a variable.\n\nYou’re concerned to make sure that ‘None’ is set as the baseline. Check the coding for regression problems with contrasts() and print the output.\nWhy are the levels in this order by default?\nRe-order the levels of this factor to go from ‘None’ to ‘All’ in increasing amount",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Homework"
    ]
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework.html#functions",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework.html#functions",
    "title": "MET581 Lecture 05 Homework",
    "section": "2 Functions",
    "text": "2 Functions\n\nCan you tell which of the arguments of myFunction are mandatory and which are optional?\n\n\nmyFunction &lt;- function(x, y, verbose = FALSE){\n  result &lt;- x ** y\n  if (verbose){\n    print(result)\n  }\n  return(result)\n}\n\n\nWhat will be the output of the previous function if we type the following command myFunction(2, 3, TRUE)? Try to do it without running the code.\nWrite any_na(), a function that takes two vectors of the same length and returns the number of positions that have an NA in, at least, one of the vectors.\nWrite complementary(), a function that takes a DNA strand of variable length and returns its complementary strand.\nWrite a function that transcribes and translates a DNA strand into its corresponding protein sequence. You can assume that the length of the input DNA strand is a multiple of 3.",
    "crumbs": [
      "Home",
      "Wrangling Data 3",
      "Homework"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#overview",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#overview",
    "title": "MET581 Lecture 04",
    "section": "Overview",
    "text": "Overview",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#review",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#review",
    "title": "MET581 Lecture 04",
    "section": "Review",
    "text": "Review\n\nThe verbs of dplyr\nHomework",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#first-load-everything",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#first-load-everything",
    "title": "MET581 Lecture 04",
    "section": "First, Load everything",
    "text": "First, Load everything\n\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(gapminder)\nlibrary(nycflights13)\nlibrary(ggplot2)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#basic-organisation",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#basic-organisation",
    "title": "MET581 Lecture 04",
    "section": "Basic organisation",
    "text": "Basic organisation\n\nBy now there should be some structure to your work\nThis might be R scripts or literate programming (Quarto files)\nIt’s worth creating a new project for each class, and a new .qmd file for each homework\nTest in the console to build up parts of a query and transfer to the .qmd file",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#scoped-verbs-vs.-pick-and-across",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#scoped-verbs-vs.-pick-and-across",
    "title": "MET581 Lecture 04",
    "section": "Scoped verbs vs. pick and across",
    "text": "Scoped verbs vs. pick and across\n\nWe mainly talked about applying functions to individual columns\nBut we often want to apply functions to multiple columns\nWe can use pick() and across() to do this\nThe scoped variants of dplyr verbs like select_if() have been superseded (but you will see them everywhere!)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#pick-in-masked-environments",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#pick-in-masked-environments",
    "title": "MET581 Lecture 04",
    "section": "pick() in masked environments",
    "text": "pick() in masked environments\n\nin functions like mutate(), summarise(), and group_by() we can refer to columns directly by their names instead of needing quotation marks - why is this?\nthey “mask” the overall data frame, meaning they provide direct access to column names without needing to explicitly reference the full data frame.\nyou will see this referred to as a “data masking environment” in the docs\npick() is like select(), but can refer to columns directly in a masked environment, e.g.\n\n\ngapminder |&gt; \n  mutate(rank = dense_rank(pick(lifeExp, gdpPercap)))",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#across-for-applying-functions",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#across-for-applying-functions",
    "title": "MET581 Lecture 04",
    "section": "across for applying functions",
    "text": "across for applying functions\n\nYou will cover functional programming in detail with purrr in later lectures\nFunctional programming refers to functions which can take other functions as arguments for iteration\nacross can be used in this way to apply functions to multiple columns\nsee the R4DS book, ch. 26 for more",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#across-for-applying-functions-1",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#across-for-applying-functions-1",
    "title": "MET581 Lecture 04",
    "section": "across for applying functions",
    "text": "across for applying functions\n\nfor example, we can apply a function to every column that’s an integer\nwith the more recent across syntax, this looks like:\n\n\ngapminder |&gt;\n  mutate(across(where(is.numeric), round))\n\n\nthis is equivalent to the now superseded “scoped variant” syntax:\n\n\ngapminder |&gt;\n  mutate_if(is.numeric, round)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#across-for-applying-functions-2",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#across-for-applying-functions-2",
    "title": "MET581 Lecture 04",
    "section": "across for applying functions",
    "text": "across for applying functions\n\none of the more frustrating things is manually writing out calls to summarise\nwith across, the code fo doing something manual, like:\n\n\ngapminder |&gt;\n  summarise(\n    mean_lifeExp = mean(lifeExp),\n    mean_pop = mean(pop),\n    mean_gdpPercap = mean(gdpPercap)\n  )\n\n\n\n\n\nmean_lifeExp\nmean_pop\nmean_gdpPercap\n\n\n\n\n59.4744393662\n29601212.3245\n7215.32708121\n\n\n\n\n\n\n\ncan now be simplified to:\n\n\ngapminder |&gt;\n  summarise(across(c(lifeExp, pop, gdpPercap), mean))\n\n\n\n\n\nlifeExp\npop\ngdpPercap\n\n\n\n\n59.4744393662\n29601212.3245\n7215.32708121",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#how-to-plan-a-query",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#how-to-plan-a-query",
    "title": "MET581 Lecture 04",
    "section": "How to plan a query",
    "text": "How to plan a query\nFor smaller queries:\n\nsketch out the the “bones” of the query with dplyr verbs\nstart with from the end and work backwards\n\nFor bigger queries:\n\nmanually or electronically sketch out the data flow\nthink about the order of operations (ETL)\nbreak the query up into manageable chunks if it’s long\ntest queries on a small batch of data e.g. read n_max=10 rows for testing",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#the-plan",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#the-plan",
    "title": "MET581 Lecture 04",
    "section": "The Plan",
    "text": "The Plan\n\nintroduce wide and long formats\nbegin converting between wide and long data\njoin data frames together with dplyr\nintroduce manipulating data with strings in stringr",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#wide-and-long-data",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#wide-and-long-data",
    "title": "MET581 Lecture 04",
    "section": "Wide and Long Data",
    "text": "Wide and Long Data",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whats-the-problem",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whats-the-problem",
    "title": "MET581 Lecture 04",
    "section": "What’s the problem?",
    "text": "What’s the problem?\n\nwe want data to be tidy\nwe often need to convert to wide or long for different applications\n\nWe usually have one of two problems\n\na variable is spread over several columns\nan observation is spread over several rows",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#tidyrpivot_longer",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#tidyrpivot_longer",
    "title": "MET581 Lecture 04",
    "section": "tidyr::pivot_longer()",
    "text": "tidyr::pivot_longer()\nSolves the ‘variables as columns’ problem\n\ntable4a |&gt; \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"cases\")\n\n\n\n\n\ncountry\nyear\ncases\n\n\n\n\nAfghanistan\n1999\n745\n\n\nAfghanistan\n2000\n2666\n\n\nBrazil\n1999\n37737\n\n\nBrazil\n2000\n80488\n\n\nChina\n1999\n212258\n\n\nChina\n2000\n213766",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#tidyrpivot_longer-1",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#tidyrpivot_longer-1",
    "title": "MET581 Lecture 04",
    "section": "tidyr::pivot_longer()",
    "text": "tidyr::pivot_longer()\nselect columns as per dplyr::select()\n\ntable4a |&gt; \n  pivot_longer(-country, names_to = \"year\", values_to = \"cases\")\n\n\n\n\n\ncountry\nyear\ncases\n\n\n\n\nAfghanistan\n1999\n745\n\n\nAfghanistan\n2000\n2666\n\n\nBrazil\n1999\n37737\n\n\nBrazil\n2000\n80488\n\n\nChina\n1999\n212258\n\n\nChina\n2000\n213766",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#tidyrpivot_wider",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#tidyrpivot_wider",
    "title": "MET581 Lecture 04",
    "section": "tidyr::pivot_wider()",
    "text": "tidyr::pivot_wider()\nSolves the ‘observations over rows’ problem\n\ntable2 |&gt;\n    pivot_wider(names_from = type, values_from = count)\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\nAfghanistan\n2000\n2666\n20595360\n\n\nBrazil\n1999\n37737\n172006362\n\n\nBrazil\n2000\n80488\n174504898\n\n\nChina\n1999\n212258\n1272915272\n\n\nChina\n2000\n213766\n1280428583",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#tidyrpractice",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#tidyrpractice",
    "title": "MET581 Lecture 04",
    "section": "tidyr::practice()",
    "text": "tidyr::practice()\nUsing fish_encounters\n\nchange the variable ‘station’ to be column names, and populate with values from ‘seen’\n\nUsing starwars - load with data(\"starwars\")\n\npivot all columns ending with ‘color’ to long format as new columns ‘attribute’ and ‘colour’\n\nUsing flights - load with library(nycflights13)\n\npivot all columns ending with ‘time’ to long format as new columns ‘time_type’ and ‘time_value’ then select only columns beginning with ‘time’",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#tidyrpractice_more",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#tidyrpractice_more",
    "title": "MET581 Lecture 04",
    "section": "tidyr::practice_more()",
    "text": "tidyr::practice_more()\n\nreplace tidyr::some_function() with the correct call to convert the height and mass columns into ‘characteristic’ and ‘measurement’ columns for plotting below\n\n\nstarwars |&gt; \n  tidyr::some_function() |&gt;\n  ggplot(aes(characteristic, measurement)) +\n    geom_jitter()\n\n\nreplace tidyr::some_function() with the correct call to convert the temp, dewp and humid columns into ‘condition’ and ‘measurement’ columns for plotting below\n\n\nweather |&gt; \n  head(1000) |&gt;\n  tidyr::some_function() |&gt;\n  ggplot(aes(measurement, condition)) +\n    geom_jitter(alpha=0.6)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#relational-data",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#relational-data",
    "title": "MET581 Lecture 04",
    "section": "Relational data",
    "text": "Relational data\n\nwhen our data is spread over several tables\nwe need to know the relations between pairs of tables\nto do this, we need to think about keys",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#keys",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#keys",
    "title": "MET581 Lecture 04",
    "section": "Keys",
    "text": "Keys\nA key is a variable (or set of variables) that uniquely identifies an observation. It is the backbone of each dataset or set of datasets.\nYou generally have two types of key:\n\nPrimary key: identifies observations in its own data frame (eg: planes$tailnum)\nForeign key: identifies observations in another data frame (eg: flights$tailnum)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#keys-1",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#keys-1",
    "title": "MET581 Lecture 04",
    "section": "Keys",
    "text": "Keys\nIt is generally good idea to test whether or not you do have a unique primary key for the data frames you are working with, and may help you eliminate duplications in your data:\n\nplanes |&gt; \n  count(tailnum) |&gt; \n  filter(n &gt; 1)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#joins-1",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#joins-1",
    "title": "MET581 Lecture 04",
    "section": "Joins",
    "text": "Joins\n\ndatasets must share at least one key for joining\nmay be one or more columns, but must uniquely identify each row\nif it doesn’t, and there are multiple matches, all combination of the matches will occur\nhere are a variety of different joins: inner, left, right and full\n\nAll follow the same format:\n\njoin(x, y, by)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#joins-2",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#joins-2",
    "title": "MET581 Lecture 04",
    "section": "Joins",
    "text": "Joins",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#inner-join",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#inner-join",
    "title": "MET581 Lecture 04",
    "section": "Inner Join",
    "text": "Inner Join\ninner_join(x, y, by = “key”)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#left-join",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#left-join",
    "title": "MET581 Lecture 04",
    "section": "Left Join",
    "text": "Left Join\nleft_join(x, y, by = “key”)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#joins---practice",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#joins---practice",
    "title": "MET581 Lecture 04",
    "section": "Joins - Practice",
    "text": "Joins - Practice",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#joins---practice-1",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#joins---practice-1",
    "title": "MET581 Lecture 04",
    "section": "Joins - Practice",
    "text": "Joins - Practice\nUsing library(nycflights13)\n\nUse a left_join to join the flights and planes datasets together\nCombine the airline information from the “airlines” dataset with the flights dataset using left_join, filter for flights from 2013 and select only the columns to do with arrivals\n\nUsing band_members and band_instruments which are loaded with dplyr\n\nJoin the band_members and band_instruments datasets keep all columns and only those people in both",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#right-join",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#right-join",
    "title": "MET581 Lecture 04",
    "section": "Right Join",
    "text": "Right Join\nright_join(x, y, by = “key”)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#full-join",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#full-join",
    "title": "MET581 Lecture 04",
    "section": "Full Join",
    "text": "Full Join\nfull_join(x, y, by = “key”)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#joins---more-practice",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#joins---more-practice",
    "title": "MET581 Lecture 04",
    "section": "Joins - More Practice",
    "text": "Joins - More Practice\nUsing library(nycflights13)\n\nAdd data from the weather dataset to flights with a left_join\n\nUsing band_members and band_instruments which are loaded with dplyr\n\nJoin the band_members and band_instruments datasets; keep only the people in the right-hand dataset (band_instruments)\nJoin the band_members and band_instruments datasets; keep everything",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#final-tips-on-joins",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#final-tips-on-joins",
    "title": "MET581 Lecture 04",
    "section": "Final Tips on Joins",
    "text": "Final Tips on Joins\n\ntake the time to learn the different types of joins and choose carefully each time\nanti-joins can be useful to find rows that don’t match between datasets, e.g. to exclude rows with IDs that aren’t in an expected ID list\nthere is now a relationships argument in dplyr::join() - use this to give the expected relationships between data frames (it will stop you making many mistakes)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#but-what-is-a-string",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#but-what-is-a-string",
    "title": "MET581 Lecture 04",
    "section": "But what is a string?",
    "text": "But what is a string?\n\nStrings are a sequence of characters which has to be represented in memory in binary\nThis was first widely done using ASCII (American Standard Code for Information Interchange)\nBut, ASCII only allows for 128 characters, so not nearly enough for all languages\nNow we represent strings using Unicode (which didn’t appear in it’s current form till the 90s!), which allows for a lot (&gt;1m) characters\nUTF-8 is the most common encoding for Unicode - uses a variable number of bytes (8-bit) units to represent characters\nR uses UTF-8 encoding by default (though will use the label “unknown” unless non-ASCII characters appear), and stringr fully supports Unicode",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#stringr",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#stringr",
    "title": "MET581 Lecture 04",
    "section": "Stringr",
    "text": "Stringr\n\nremoves inconsistencies found in base R\nbuilt on top of the stringi package\nstarts all functions with “str_”\nmore advanced use requires regular expressions (regex)",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#regex",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#regex",
    "title": "MET581 Lecture 04",
    "section": "Regex",
    "text": "Regex\nAs quoted by R for Data Science 1st edition:\n\n“When you first look at a regexp, you’ll think a cat walked across your keyboard, but as your understanding improves they will soon start to make sense.”\n\nIf you’ve read about regex before, you will also have come across the quotation:\n\n“Some people, when confronted with a problem, think”I know, I’ll use regular expressions.” Now they have two problems.”",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review",
    "title": "MET581 Lecture 04",
    "section": "Whistle-stop regex review",
    "text": "Whistle-stop regex review\n\nAllow you to match patterns in strings\nMost basic matches an actual chunk of text, e.g. ‘hag’ in ‘hagrid’\nWe can match multiple types of characters with \\s, \\d, \\w, [abc] and [^abc]\nBecause we’re in R, we have to use \\\\ instead of \\, e.g. \\\\w or \\\\d\nWe can match any character with .\nWe can expand these with ?, +, * or {n,m}\nWe can anchor them to the start ^ or the end $\ne.g. ^\\\\w+_\\\\d{4}$ would match “hagrid_2020”, but not “hagrid_120”",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-1",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-1",
    "title": "MET581 Lecture 04",
    "section": "Whistle-stop regex review",
    "text": "Whistle-stop regex review\n\nAllow you to match patterns in strings\nMost basic matches an actual chunk of text\n\n\nmy_string &lt;- c('Hagrid', 'Hermione', 'Harry.Potter', 'Ronald_Weasley', '24xHouse Elves')\nstringr::str_detect(my_string, 'Hag')\n\n[1]  TRUE FALSE FALSE FALSE FALSE",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-2",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-2",
    "title": "MET581 Lecture 04",
    "section": "Whistle-stop regex review",
    "text": "Whistle-stop regex review\n\nWe can match multiple types of characters with \\s, \\d, \\w, [abc] and [^abc]\n\n\nmy_string\n\n[1] \"Hagrid\"         \"Hermione\"       \"Harry.Potter\"   \"Ronald_Weasley\"\n[5] \"24xHouse Elves\"\n\nstringr::str_detect(my_string, '\\\\w')\n\n[1] TRUE TRUE TRUE TRUE TRUE\n\n\n\nstringr::str_detect(my_string, '\\\\d')\n\n[1] FALSE FALSE FALSE FALSE  TRUE\n\n\n\nstringr::str_detect(my_string, '\\\\s')\n\n[1] FALSE FALSE FALSE FALSE  TRUE",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-3",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-3",
    "title": "MET581 Lecture 04",
    "section": "Whistle-stop regex review",
    "text": "Whistle-stop regex review\n\nWe can match any character with .\n\n\nmy_string\n\n[1] \"Hagrid\"         \"Hermione\"       \"Harry.Potter\"   \"Ronald_Weasley\"\n[5] \"24xHouse Elves\"\n\nstringr::str_detect(my_string, '.')\n\n[1] TRUE TRUE TRUE TRUE TRUE",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-4",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-4",
    "title": "MET581 Lecture 04",
    "section": "Whistle-stop regex review",
    "text": "Whistle-stop regex review\n\nWe can expand these with ?, +, * or {n,m}\n\n\nmy_string\n\n[1] \"Hagrid\"         \"Hermione\"       \"Harry.Potter\"   \"Ronald_Weasley\"\n[5] \"24xHouse Elves\"\n\nstringr::str_detect(my_string, '\\\\w+')\n\n[1] TRUE TRUE TRUE TRUE TRUE\n\n\n\nstringr::str_detect(my_string, '\\\\d{2}[xyz]\\\\w+\\\\s?\\\\w+')\n\n[1] FALSE FALSE FALSE FALSE  TRUE\n\nstringr::str_detect(my_string, '\\\\d{2}[^xyz]\\\\w+\\\\s?\\\\w+')\n\n[1] FALSE FALSE FALSE FALSE FALSE",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-5",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-5",
    "title": "MET581 Lecture 04",
    "section": "Whistle-stop regex review",
    "text": "Whistle-stop regex review\n\nWe can anchor them to the start ^ or the end $\n\n\nmy_string\n\n[1] \"Hagrid\"         \"Hermione\"       \"Harry.Potter\"   \"Ronald_Weasley\"\n[5] \"24xHouse Elves\"\n\nstringr::str_detect(my_string, '^H\\\\w+$')\n\n[1]  TRUE  TRUE FALSE FALSE FALSE\n\n\n\nstringr::str_detect(my_string, '^Hag$')\n\n[1] FALSE FALSE FALSE FALSE FALSE",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-6",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#whistle-stop-regex-review-6",
    "title": "MET581 Lecture 04",
    "section": "Whistle-stop regex review",
    "text": "Whistle-stop regex review\n\nAllow you to match patterns in strings\nMost basic matches an actual chunk of text, e.g. ‘hag’ in ‘hagrid’\nWe can match multiple types of characters with \\s, \\d, \\w, [abc] and [^abc]\nBecause we’re in R, we have to use \\\\ instead of \\, e.g. \\\\w or \\\\d\nWe can match any character with .\nWe can expand these with ?, +, * or {n,m}\nWe can anchor them to the start ^ or the end $\ne.g. ^\\\\w+_\\\\d{4}$ would match “hagrid_2020”, but not “hagrid_120”",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#basic-stringr-operations",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#basic-stringr-operations",
    "title": "MET581 Lecture 04",
    "section": "Basic stringr operations",
    "text": "Basic stringr operations\ncheck string lengths and counts\n\n# counts the number of characters in each string\nstringr::str_length(my_string)\n\n[1]  6  8 12 14 14\n\n# counts the number of matches in a string\nstringr::str_count(my_string, 'Ha')\n\n[1] 1 0 1 0 0",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#basic-stringr-operations-1",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#basic-stringr-operations-1",
    "title": "MET581 Lecture 04",
    "section": "Basic stringr operations",
    "text": "Basic stringr operations\nconcatenate (combine) strings\n\n# explicitly naming each column\nstringr::str_c('this', 'that', sep=', ')\n\n[1] \"this, that\"",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#manipulations-with-stringr",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#manipulations-with-stringr",
    "title": "MET581 Lecture 04",
    "section": "Manipulations with stringr",
    "text": "Manipulations with stringr\nextract or replace strings\n\n# extract substrings\nstringr::str_sub(my_string, 1, 3)\n\n[1] \"Hag\" \"Her\" \"Har\" \"Ron\" \"24x\"\n\n\n\n# replace matches\nstringr::str_replace(my_string, '[\\\\._x]', ' ')\n\n[1] \"Hagrid\"         \"Hermione\"       \"Harry Potter\"   \"Ronald Weasley\"\n[5] \"24 House Elves\"",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#stringr---practice",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#stringr---practice",
    "title": "MET581 Lecture 04",
    "section": "Stringr - Practice",
    "text": "Stringr - Practice\n\nconcatenate the strings “day” to” and “day”, separated by a hyphen\n\nUsing starwars\n\nselect the hair color column and replace ‘,’ with a ‘/’ (hint: you can pipe a column into pull() to convert it to a vector for stringr to handle)\n\nUsing flights\n\nselect columns ending with ‘delay’ and remove the underscore from all column names",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#manipulations-with-stringr-1",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#manipulations-with-stringr-1",
    "title": "MET581 Lecture 04",
    "section": "Manipulations with stringr",
    "text": "Manipulations with stringr\nfind or view strings\n\n# return a boolean for matches (alternative to grepl)\nstringr::str_detect(my_string, 'Hagrid')\n\n[1]  TRUE FALSE FALSE FALSE FALSE\n\n\n\n# highlight matches\nstringr::str_view(my_string, '^\\\\w')\n\n[1] │ &lt;H&gt;agrid\n[2] │ &lt;H&gt;ermione\n[3] │ &lt;H&gt;arry.Potter\n[4] │ &lt;R&gt;onald_Weasley\n[5] │ &lt;2&gt;4xHouse Elves",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#manipulations-with-stringr-2",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#manipulations-with-stringr-2",
    "title": "MET581 Lecture 04",
    "section": "Manipulations with stringr",
    "text": "Manipulations with stringr\nsort and separate strings\n\n# sorting strings\nsentences |&gt;\n  head(1) |&gt; \n  stringr::str_split(\" \")\n\n[[1]]\n[1] \"The\"     \"birch\"   \"canoe\"   \"slid\"    \"on\"      \"the\"     \"smooth\" \n[8] \"planks.\"\n\n\n\n# sorting strings\nstringr::str_sort(words[1:10], locale = 'en')\n\n [1] \"a\"        \"able\"     \"about\"    \"absolute\" \"accept\"   \"account\" \n [7] \"achieve\"  \"across\"   \"act\"      \"active\"",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#stringr---practice-1",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#stringr---practice-1",
    "title": "MET581 Lecture 04",
    "section": "Stringr - Practice",
    "text": "Stringr - Practice\n\nsplit the string “Harry, did you put your name in the Goblet of Fire?” into its components\nuse the boundary(\"word\") function instead of ” ” and compare results\n\nUsing the fifth line of the sentences dataset\n\nsplit by word boundary, convert to lowercase and sort (hint: use unlist())",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#cleaning-up-with-stringr",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#cleaning-up-with-stringr",
    "title": "MET581 Lecture 04",
    "section": "Cleaning up with stringr",
    "text": "Cleaning up with stringr\n\nstringr::str_to_upper(words[1:10])\n\n [1] \"A\"        \"ABLE\"     \"ABOUT\"    \"ABSOLUTE\" \"ACCEPT\"   \"ACCOUNT\" \n [7] \"ACHIEVE\"  \"ACROSS\"   \"ACT\"      \"ACTIVE\"  \n\nstringr::str_to_lower(words[1:10])\n\n [1] \"a\"        \"able\"     \"about\"    \"absolute\" \"accept\"   \"account\" \n [7] \"achieve\"  \"across\"   \"act\"      \"active\"  \n\nstringr::str_to_sentence(words[1:10])\n\n [1] \"A\"        \"Able\"     \"About\"    \"Absolute\" \"Accept\"   \"Account\" \n [7] \"Achieve\"  \"Across\"   \"Act\"      \"Active\"  \n\nstringr::str_to_title(words[1:10])\n\n [1] \"A\"        \"Able\"     \"About\"    \"Absolute\" \"Accept\"   \"Account\" \n [7] \"Achieve\"  \"Across\"   \"Act\"      \"Active\"",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#cleaning-up-with-stringr-1",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#cleaning-up-with-stringr-1",
    "title": "MET581 Lecture 04",
    "section": "Cleaning up with stringr",
    "text": "Cleaning up with stringr\n\nsentences |&gt;\n  head(1) |&gt;\n  stringr::str_to_sentence()\n\n[1] \"The birch canoe slid on the smooth planks.\"\n\nsentences |&gt;\n  head(1) |&gt;\n  stringr::str_to_title()\n\n[1] \"The Birch Canoe Slid On The Smooth Planks.\"",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#stringr---more-practice",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#stringr---more-practice",
    "title": "MET581 Lecture 04",
    "section": "Stringr - More Practice",
    "text": "Stringr - More Practice\nUsing starwars\n\nconvert the hair_color column values to be Sentence Case\nchange all columns names to be title case\n\nUsing gapminder\n\nremove any Camel Case from column names (i.e. all to lower case)\nconvert the continent column values to be all upper case",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#homework",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-slides.html#homework",
    "title": "MET581 Lecture 04",
    "section": "Homework",
    "text": "Homework\n\nQuarto file\n\nSuggested Reading\n\nR for Data Science 2e, chapters 6, 15, 16, 20\nThe docs for dplyr and vignette at browseVignettes(package = \"dplyr\")\nAlso check out the docs for tidyr and stringr\nThis blog post by Joel Spolsky on Unicode and character sets",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Slides"
    ]
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework.html",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework.html",
    "title": "MET581 Lecture 04 Homework",
    "section": "",
    "text": "This document contains all questions for lessson 4. Please create a Quarto document containing all text, code and output used to answer the questions.\n\nExplain how escapes work in R with respect to regular expressions\nList and describe the tidyverse commands used to join two datasets together. What two key arguments can you use to prevent mistakes in your joins?\nLoad the nycflights13 package and join the datasets flights and airlines together, selecting only the columns: year, month, day, hour, origin, tailnum and carrier from flights. Can you do the same but using the mutate() function instead?\nIn the starwars dataset and in one command, add two new columns:\n\n\none column that converts the name column to lower case\none column that converts the eye_colour to uppercase\n\n\nDownload the gene annotation file from the NCBI found here\n\nunzip the file and load in NCBI37.3.gene.loc into R\n\n5a. add the column headers: Entrez_Gene_ID, CHR, BP_START, BP_END, STRAND, GENE_NAME\n5b. How many Genes are on the positive strand?\n5c. How many Genes begin and end with a letter?",
    "crumbs": [
      "Home",
      "Wrangling Data 2",
      "Homework"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#overview",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#overview",
    "title": "MET581 Lecture 03",
    "section": "Overview",
    "text": "Overview",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#review",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#review",
    "title": "MET581 Lecture 03",
    "section": "Review",
    "text": "Review\n\nIntroduction to R packages and data types\nRMarkdown, Tibbles, and Readr\nHomework",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#dplyr-and-magrittr",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#dplyr-and-magrittr",
    "title": "MET581 Lecture 03",
    "section": "dplyr and magrittr",
    "text": "dplyr and magrittr\n\nOverview of dplyr verbs\nUsing |&gt; or %&gt;% for data manipulation\nExamples with Tibbles and Real-world Data",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-plan",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-plan",
    "title": "MET581 Lecture 03",
    "section": "The Plan",
    "text": "The Plan\n\nIntroduce tidy data\nGet familiar with the 6 main verbs of dplyr\nUnderstand what pipes do\nBe able to manipulate and summarise data\nKnow when not to use magrittr and dplyr",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-hadleyverse",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-hadleyverse",
    "title": "MET581 Lecture 03",
    "section": "The Hadleyverse",
    "text": "The Hadleyverse",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-tidyverse",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-tidyverse",
    "title": "MET581 Lecture 03",
    "section": "The Tidyverse",
    "text": "The Tidyverse",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#tidy-data",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#tidy-data",
    "title": "MET581 Lecture 03",
    "section": "Tidy Data",
    "text": "Tidy Data\n\nEach observation must have its own row\nEach variable must have its own column\nEach value must have its own cell",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#tidy-data-1",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#tidy-data-1",
    "title": "MET581 Lecture 03",
    "section": "Tidy Data",
    "text": "Tidy Data\nWe should also keep to one type of observational unit per table",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#dplyr",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#dplyr",
    "title": "MET581 Lecture 03",
    "section": "dplyr",
    "text": "dplyr\nThe 6 main verbs in dplyr:\n\nselect() → select variables by name\nfilter() → return rows with matching conditions\narrange() → arrange rows by variables\nmutate() → add new variables\ngroup_by() → return grouping of variables\nsummarise() → reduces multiple values down to a single value",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#dplyr-1",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#dplyr-1",
    "title": "MET581 Lecture 03",
    "section": "dplyr",
    "text": "dplyr\nALL verbs follow the same format:\n\nverb(dataset, options)",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#gapminder",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#gapminder",
    "title": "MET581 Lecture 03",
    "section": "Gapminder",
    "text": "Gapminder",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#load-gapminder-and-dplyr",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#load-gapminder-and-dplyr",
    "title": "MET581 Lecture 03",
    "section": "Load gapminder and dplyr",
    "text": "Load gapminder and dplyr\n\nlibrary(gapminder)\nlibrary(dplyr)\n\nAlso install/load:\n\nstringr\nnycflights13\ndevtools\nskimr",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select",
    "title": "MET581 Lecture 03",
    "section": "Select",
    "text": "Select\nSelect variables by name\n\n# explicitly naming each column\nselect(gapminder, country, year, lifeExp)",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select-1",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select-1",
    "title": "MET581 Lecture 03",
    "section": "Select",
    "text": "Select\nSelect variables by name\n\n# define a range to select from\nselect(gapminder, country:year) |&gt; head(4) # select all columns from country to year\n\n\n\n\n\n\n\ncountry\ncontinent\nyear\n\n\n\n\nAfghanistan\nAsia\n1952\n\n\nAfghanistan\nAsia\n1957\n\n\nAfghanistan\nAsia\n1962\n\n\nAfghanistan\nAsia\n1967",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select-2",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select-2",
    "title": "MET581 Lecture 03",
    "section": "Select",
    "text": "Select\nSelect variables by name\n\n# say which columns NOT to select\nselect(gapminder, -country) |&gt; head(4) # select all columns BUT country\n\n\n\n\n\n\n\ncontinent\nyear\nlifeExp\npop\ngdpPercap\n\n\n\n\nAsia\n1952\n28.801\n8425333\n779.4453145\n\n\nAsia\n1957\n30.332\n9240934\n820.8530296\n\n\nAsia\n1962\n31.997\n10267083\n853.1007100\n\n\nAsia\n1967\n34.020\n11537966\n836.1971382",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select-3",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select-3",
    "title": "MET581 Lecture 03",
    "section": "Select",
    "text": "Select\nThere are lots of helper functions that work with select, e.g.:\n\nstarts_with(“Hap”) -&gt; ALL columns whose name starts with “Hap”\nends_with(“ppy”) -&gt; ALL columns whose name ends with “ppy”\ncontains(“app”) -&gt; ALL columns whose name contains “app”\n**matches(“^(SNP|CHR)_”)** -&gt; ALL columns who name match a regular expression\nnum_range(“x”, 1980:1983) -&gt; ALL columns named x1980, x1981, x1982, and x1983\none_of(char_vector) -&gt; ALL columns who name appears in character vector (char_vector)\n\n\n# e.g.\nlibrary('nycflights13')\nselect(flights, starts_with(\"dep\")) |&gt; head(4) # match columns by starting string",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select-3-output",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select-3-output",
    "title": "MET581 Lecture 03",
    "section": "Select",
    "text": "Select\n\n\n\n\n\ndep_time\ndep_delay\n\n\n\n\n517\n2\n\n\n533\n4\n\n\n542\n2\n\n\n544\n-1\n\n\n\n\n\nselect(flights, matches('sched_(dep|arr)_time')) |&gt; head(4) # match columns by regex\n\n\n\n\n\nsched_dep_time\nsched_arr_time\n\n\n\n\n515\n819\n\n\n529\n830\n\n\n540\n850\n\n\n545\n1022",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select---practice",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select---practice",
    "title": "MET581 Lecture 03",
    "section": "Select - Practice!",
    "text": "Select - Practice!\nUsing gapminder\n\nSelect the column range from country to population, but exclude continent\n\nUsing starwars - load with data(\"starwars\")\n\nSelect name, height and all columns which end in the word ‘color’\n\nUsing flights - load with library(nycflights13)\n\nSelect all columns in the vector (‘year’, ‘month’, ‘day’, ‘carrier’, ‘flight’, ‘dest’)",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select---extra-practice",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#select---extra-practice",
    "title": "MET581 Lecture 03",
    "section": "Select - Extra Practice!",
    "text": "Select - Extra Practice!\nUsing gapminder\n\nSelect country, year and population columns from gapminder\n\nUsing starwars\n\nSelect only the columns stored as characters (tip: use select_if())\n\nUsing flights\n\nSelect all columns ending in ‘time’, but exclude those starting with ‘sched’",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter",
    "title": "MET581 Lecture 03",
    "section": "Filter",
    "text": "Filter\nreturn rows with matching conditions\n\n# using a single filter\nfilter(gapminder, year == 1997L)",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter-1",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter-1",
    "title": "MET581 Lecture 03",
    "section": "Filter",
    "text": "Filter\nreturn rows with matching conditions\n\n##| output: false\n# combining multiple filters in a single statement\ncountry_names &lt;- c(\n  'Afghanistan',\n  'Angola',\n  'Belgium',\n  'China',\n  'Mauritania',\n  'Mauritius',\n  'Mongolia',\n  'Korea, Rep.',\n  'Sri Lanka',\n  'Saudi Arabia',\n  'Vietnam',\n  'Yemen, Rep.'\n)\nfilter(\n  gapminder,\n  year == 1997L,\n  continent != \"asia\",\n  pop &gt;= 1000000L,\n  country %in% country_names\n) |&gt;\n  head()",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter-1-output",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter-1-output",
    "title": "MET581 Lecture 03",
    "section": "Filter",
    "text": "Filter\n\n\n\n\n\ncountry\ncontinent\nyear\nlifeExp\npop\ngdpPercap\n\n\n\n\nAfghanistan\nAsia\n1997\n41.763\n22227415\n635.341351\n\n\nAngola\nAfrica\n1997\n40.963\n9875024\n2277.140884\n\n\nBelgium\nEurope\n1997\n77.530\n10199787\n27561.196630\n\n\nChina\nAsia\n1997\n70.426\n1230075000\n2289.234136\n\n\nKorea, Rep.\nAsia\n1997\n74.647\n46173816\n15993.527960\n\n\nMauritania\nAfrica\n1997\n60.430\n2444741\n1483.136136",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter-2",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter-2",
    "title": "MET581 Lecture 03",
    "section": "Filter",
    "text": "Filter\ncombining filters\n\n# multiple filters with and\nfilter(gapminder, year == 1997L & gdpPercap &gt; 1000) |&gt; head(4)\n\n\n\n\n\n\n\ncountry\ncontinent\nyear\nlifeExp\npop\ngdpPercap\n\n\n\n\nAlbania\nEurope\n1997\n72.950\n3428038\n3193.054604\n\n\nAlgeria\nAfrica\n1997\n69.152\n29072015\n4797.295051\n\n\nAngola\nAfrica\n1997\n40.963\n9875024\n2277.140884\n\n\nArgentina\nAmericas\n1997\n73.275\n36203463\n10967.281950",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter-3",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter-3",
    "title": "MET581 Lecture 03",
    "section": "Filter",
    "text": "Filter\ncombining filters\n\n# multiple filters with or\nfilter(gapminder, year == 1997L | year == 1967L) |&gt; head(4)\n\n\n\n\n\n\n\ncountry\ncontinent\nyear\nlifeExp\npop\ngdpPercap\n\n\n\n\nAfghanistan\nAsia\n1967\n34.020\n11537966\n836.1971382\n\n\nAfghanistan\nAsia\n1997\n41.763\n22227415\n635.3413510\n\n\nAlbania\nEurope\n1967\n66.220\n1984060\n2760.1969310\n\n\nAlbania\nEurope\n1997\n72.950\n3428038\n3193.0546040",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter---practice",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter---practice",
    "title": "MET581 Lecture 03",
    "section": "Filter - Practice!",
    "text": "Filter - Practice!\nUsing gapminder\n\nKeep only rows where continent is Americas or Europe\nKeep only rows where country is Canada or Australia and the year is before 1974\n\nUsing starwars\n\nKeep only the rows where name contains ‘light’ or eye_color contains ‘blue’ using filter() and grepl()",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter---extra-practice",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#filter---extra-practice",
    "title": "MET581 Lecture 03",
    "section": "Filter - Extra Practice!",
    "text": "Filter - Extra Practice!\nUsing gapminder\n\nKeep only the rows with life expectancy less than 35\n\nUsing starwars\n\nRemove rows with brown hair colour\nKeep females with brown or blue eyes",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#arrange",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#arrange",
    "title": "MET581 Lecture 03",
    "section": "Arrange",
    "text": "Arrange\narrange rows by variables",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#arrange-1",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#arrange-1",
    "title": "MET581 Lecture 03",
    "section": "Arrange",
    "text": "Arrange\narrange rows by variables\n\n# arranging by multiple columns\narrange(gapminder, desc(lifeExp), pop) |&gt; head(4)\n\n\n\n\n\n\n\ncountry\ncontinent\nyear\nlifeExp\npop\ngdpPercap\n\n\n\n\nJapan\nAsia\n2007\n82.603\n127467972\n31656.06806\n\n\nHong Kong, China\nAsia\n2007\n82.208\n6980412\n39724.97867\n\n\nJapan\nAsia\n2002\n82.000\n127065841\n28604.59190\n\n\nIceland\nEurope\n2007\n81.757\n301931\n36180.78919\n\n\n\n\n\n\nnote: order is important when using multiple variables!",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#arrange---practice",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#arrange---practice",
    "title": "MET581 Lecture 03",
    "section": "Arrange - Practice!",
    "text": "Arrange - Practice!\nUsing gapminder\n\narrange by country then continent\narrange by country then descending year",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#mutate",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#mutate",
    "title": "MET581 Lecture 03",
    "section": "Mutate",
    "text": "Mutate\nadd new variables\n\n# single variables\nmutate(gapminder, gdp_billion = gdpPercap * pop / 10^9)",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#mutate---practice",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#mutate---practice",
    "title": "MET581 Lecture 03",
    "section": "Mutate - Practice!",
    "text": "Mutate - Practice!\nUsing starwars\n\nAdd a new column called ‘BMI’, created using height * mass\n\nUsing flights\n\nDichotomise height into the strings ‘tall’ and ‘short’ and assign as factor to ‘height_dichot’ (tip: use ifelse())",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#mutate---extra-practice",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#mutate---extra-practice",
    "title": "MET581 Lecture 03",
    "section": "Mutate - Extra Practice!",
    "text": "Mutate - Extra Practice!\nUsing starwars\n\nMake the values in hair_color, skin_color, eye_color and gender Title Case (tip: use str_to_title() from stringr)\n\nUsing flights\n\nAssume ‘EWR’ is the code for unknown airport. Recode it to NA in columns ‘origin’ and ‘dest’ using na_if()",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#combining-operations",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#combining-operations",
    "title": "MET581 Lecture 03",
    "section": "Combining Operations",
    "text": "Combining Operations\nLet’s combine lots of operations together to get the data we want!\nIt’s as simple as\n\ndf_no_pop &lt;- select(gapminder, -pop)\ndf_no_pop_just_oceania_1980 &lt;- filter(\n  df_no_pop,\n  continent == 'Oceania',\n  year &gt; 1980L\n)\ndf_no_pop_just_oceania_1980_sorted_by_gdp &lt;- arrange(\n  df_no_pop_just_oceania_1980,\n  desc(gdpPercap)\n)\n\n…right???!",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-pipe",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-pipe",
    "title": "MET581 Lecture 03",
    "section": "The Pipe |>",
    "text": "The Pipe |&gt;\nWRONG!! (ish)\nInstead of this:\n\ndf_no_pop &lt;- select(gapminder, -pop)\ndf_just_oceania_1980 &lt;- filter(df_no_pop, continent == 'Oceania', year &gt; 1980L)\ndf_sorted_by_gdp &lt;- arrange(df_just_oceania_1980, desc(gdpPercap))\n\nDo this:\n\ngapminder |&gt;\n  select(-pop) |&gt;\n  filter(continent == 'Oceania', year &gt; 1980L) |&gt;\n  arrange(desc(gdpPercap))",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-pipe-1",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-pipe-1",
    "title": "MET581 Lecture 03",
    "section": "The Pipe |>",
    "text": "The Pipe |&gt;\nPipes:\n\npass the information forward to the next verb\nare a really useful way of expressing a series of operations\nallow us to quickly see what is being done\nmean we focus on the verbs, not the nouns",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-pipe-native-pipes",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-pipe-native-pipes",
    "title": "MET581 Lecture 03",
    "section": "The Pipe |> Native Pipes",
    "text": "The Pipe |&gt; Native Pipes\n\nused to be in the magrittr package, then dplyr\nare now part of base R! (as of version 4.1.0)\nwe can use them with |&gt; (no need to load tidyverse)\nevery time you see |&gt; here, you could use %&gt;% instead (but load dplyr first)\nyou will still see %&gt;% in a lot of code in the wild, so it’s good to know both\nyou will need to use %&gt;% yourself if you’re forced to use an older version of R",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#pipe-practice",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#pipe-practice",
    "title": "MET581 Lecture 03",
    "section": "Pipe |> Practice()",
    "text": "Pipe |&gt; Practice()\nUsing starwars\n\nFilter for all rows that don’t contain NAs and select columns that are characters, then create a new boolean column called ‘hair_eye_mismatch’, which is TRUE for anyone with exclusively brown hair and blue eyes\n\ntip: use is.character and ifelse() to create the new column following the format:\n\nstarwars |&gt;\n  na.omit() |&gt;\n  select_if(is.character) |&gt;\n  mutate()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\nhair_color\nskin_color\neye_color\nsex\ngender\nhomeworld\nspecies\n\n\n\n\nLuke Skywalker\nblond\nfair\nblue\nmale\nmasculine\nTatooine\nHuman\n\n\nDarth Vader\nnone\nwhite\nyellow\nmale\nmasculine\nTatooine\nHuman\n\n\nLeia Organa\nbrown\nlight\nbrown\nfemale\nfeminine\nAlderaan\nHuman\n\n\nOwen Lars\nbrown, grey\nlight\nblue\nmale\nmasculine\nTatooine\nHuman\n\n\nBeru Whitesun Lars\nbrown\nlight\nblue\nfemale\nfeminine\nTatooine\nHuman\n\n\nBiggs Darklighter\nblack\nlight\nbrown\nmale\nmasculine\nTatooine\nHuman\n\n\nObi-Wan Kenobi\nauburn, white\nfair\nblue-gray\nmale\nmasculine\nStewjon\nHuman\n\n\nAnakin Skywalker\nblond\nfair\nblue\nmale\nmasculine\nTatooine\nHuman\n\n\nChewbacca\nbrown\nunknown\nblue\nmale\nmasculine\nKashyyyk\nWookiee\n\n\nHan Solo\nbrown\nfair\nbrown\nmale\nmasculine\nCorellia\nHuman\n\n\nWedge Antilles\nbrown\nfair\nhazel\nmale\nmasculine\nCorellia\nHuman\n\n\nPalpatine\ngrey\npale\nyellow\nmale\nmasculine\nNaboo\nHuman\n\n\nBoba Fett\nblack\nfair\nbrown\nmale\nmasculine\nKamino\nHuman\n\n\nBossk\nnone\ngreen\nred\nmale\nmasculine\nTrandosha\nTrandoshan\n\n\nLando Calrissian\nblack\ndark\nbrown\nmale\nmasculine\nSocorro\nHuman\n\n\nLobot\nnone\nlight\nblue\nmale\nmasculine\nBespin\nHuman\n\n\nAckbar\nnone\nbrown mottle\norange\nmale\nmasculine\nMon Cala\nMon Calamari\n\n\nWicket Systri Warrick\nbrown\nbrown\nbrown\nmale\nmasculine\nEndor\nEwok\n\n\nPadmé Amidala\nbrown\nlight\nbrown\nfemale\nfeminine\nNaboo\nHuman\n\n\nJar Jar Binks\nnone\norange\norange\nmale\nmasculine\nNaboo\nGungan\n\n\nDarth Maul\nnone\nred\nyellow\nmale\nmasculine\nDathomir\nZabrak\n\n\nAyla Secura\nnone\nblue\nhazel\nfemale\nfeminine\nRyloth\nTwi’lek\n\n\nMace Windu\nnone\ndark\nbrown\nmale\nmasculine\nHaruun Kal\nHuman\n\n\nKi-Adi-Mundi\nwhite\npale\nyellow\nmale\nmasculine\nCerea\nCerean\n\n\nPlo Koon\nnone\norange\nblack\nmale\nmasculine\nDorin\nKel Dor\n\n\nLuminara Unduli\nblack\nyellow\nblue\nfemale\nfeminine\nMirial\nMirialan\n\n\nBarriss Offee\nblack\nyellow\nblue\nfemale\nfeminine\nMirial\nMirialan\n\n\nDooku\nwhite\nfair\nbrown\nmale\nmasculine\nSerenno\nHuman\n\n\nJango Fett\nblack\ntan\nbrown\nmale\nmasculine\nConcord Dawn\nHuman",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#pipe-practice_extra",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#pipe-practice_extra",
    "title": "MET581 Lecture 03",
    "section": "Pipe |> Practice_Extra()",
    "text": "Pipe |&gt; Practice_Extra()\nUsing flights\n\nShow the carrier and flight number for flights with arrival delays greater than 10 and distances over 1000, sorted by descending distance.",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#group_by",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#group_by",
    "title": "MET581 Lecture 03",
    "section": "Group_by",
    "text": "Group_by\nUseful only in conjunction with other methods\n\n# grouping by single variables\ngapminder |&gt;\n  group_by(continent) |&gt;\n  head(4)\n\n\n\n\n\n\n\ncountry\ncontinent\nyear\nlifeExp\npop\ngdpPercap\n\n\n\n\nAfghanistan\nAsia\n1952\n28.801\n8425333\n779.4453145\n\n\nAfghanistan\nAsia\n1957\n30.332\n9240934\n820.8530296\n\n\nAfghanistan\nAsia\n1962\n31.997\n10267083\n853.1007100\n\n\nAfghanistan\nAsia\n1967\n34.020\n11537966\n836.1971382",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#group_by-1",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#group_by-1",
    "title": "MET581 Lecture 03",
    "section": "Group_by",
    "text": "Group_by\nUseful only in conjunction with other methods\n\n# grouping by multiple variables\ngapminder |&gt;\n  group_by(country, continent) |&gt;\n  head(4)",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise",
    "title": "MET581 Lecture 03",
    "section": "Summarise",
    "text": "Summarise\nreduces multiple values down to a single value\n\n# get mean of life expectancy\nsummarise(gapminder, mean_lifexp = mean(lifeExp))\n\n\n\n\n\nmean_lifexp\n\n\n\n\n59.4744393662\n\n\n\n\n\n\n\n# get mean of life expectancy and mean of GDP\nsummarise(gapminder, mean_lifexp = mean(lifeExp), mean_gdp = mean(gdpPercap))\n\n\n\n\n\nmean_lifexp\nmean_gdp\n\n\n\n\n59.4744393662\n7215.32708121",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise-1",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise-1",
    "title": "MET581 Lecture 03",
    "section": "Summarise",
    "text": "Summarise\nCombining group_by() and summarise() gives us so much more power!\n\ngapminder |&gt;\n  select(-pop) |&gt;\n  filter(continent == 'Oceania', year &gt; 1980L) |&gt;\n  arrange(desc(gdpPercap)) |&gt;\n  group_by(country) |&gt;\n  summarise(\n    n_years = n(),\n    Mean_Life_Exp = mean(lifeExp),\n    SD_Life_Exp = sd(lifeExp),\n    Max_GDP = max(gdpPercap)\n  )\n\n\n\n\n\n\n\ncountry\nn_years\nMean_Life_Exp\nSD_Life_Exp\nMax_GDP\n\n\n\n\nAustralia\n6\n78.1758333333\n2.45882576989\n34435.36744\n\n\nNew Zealand\n6\n76.8923333333\n2.55215843291\n25185.00911",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise-2",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise-2",
    "title": "MET581 Lecture 03",
    "section": "Summarise",
    "text": "Summarise\nWe can use lots of built-in functions when using summarise:",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise-3",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise-3",
    "title": "MET581 Lecture 03",
    "section": "Summarise",
    "text": "Summarise\nNote: Don’t forget to include na.rm = TRUE if NAs are present\n\n# e.g.\ndata(\"airquality\")\nairquality |&gt;\n  as_tibble() |&gt;\n  summarise(mean_ozone = mean(Ozone, na.rm = TRUE))\n\n\n\n\n\nmean_ozone\n\n\n\n\n42.1293103448",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise---practice",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise---practice",
    "title": "MET581 Lecture 03",
    "section": "Summarise - Practice!",
    "text": "Summarise - Practice!\nUsing gapminder\n\nGet the median and standard deviation for gdpPercap\n\nUsing airquality\n\nConvert to tibble, remove Month and Day, keep Temperatures above 60, then summarise Solar.R with number, mean, median and standard deviation",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise---extra-practice",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#summarise---extra-practice",
    "title": "MET581 Lecture 03",
    "section": "Summarise - Extra Practice!",
    "text": "Summarise - Extra Practice!\nUsing airquality\n\nSummarise the mean values for integer columns only using summarise_if() and is.integer()\n\nUsing starwars\n\nWhat is the mean height and weight of all Droids? Include a count of how many droids there are\nWe want to compare Humans from different planets. Show the number of people and their mean height and mass, broken down by homeworld then gender. Make sure you show all rows when printing by piping the last line into print(n = x), where x is a suitably high number of rows",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#prettier-summaries-with-skimr",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#prettier-summaries-with-skimr",
    "title": "MET581 Lecture 03",
    "section": "Prettier summaries with skimr",
    "text": "Prettier summaries with skimr\n\nlibrary(skimr)\ngapminder |&gt;\n  skim()",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#other-really-useful-verbs-and-tools",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#other-really-useful-verbs-and-tools",
    "title": "MET581 Lecture 03",
    "section": "Other really useful verbs and tools",
    "text": "Other really useful verbs and tools\n\ndplyr::glimpse() instead of str()\nuse everything() to re-order columns\nuse n_distinct() instead of length(unique())\ndplyr::rename(new_name = old_name) for renaming columns\ndplyr::select_() and other variants\ndplyr::near() and dplyr::between()\ncoalesce(), recode() and case_when() from dplyr\ntibble::rownames_to_column()",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#things-to-be-aware-of",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#things-to-be-aware-of",
    "title": "MET581 Lecture 03",
    "section": "Things to be aware of",
    "text": "Things to be aware of\n\nPackages can have functions with the same name - sometimes it helps to be specific e.g. dplyr::select()\nWe can now used the conflicted package to be more explicit about this!\nFiltering using grepl() is better done using stringr’s str_detect() (introduced tomorrow)\nstringr (tomorrow) combined with dplyr (more tomorrow) and the native pipe (or maggritr pipe if needed) will cover a lot of your everyday needs",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#should-we-always-use-dplyr",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#should-we-always-use-dplyr",
    "title": "MET581 Lecture 03",
    "section": "Should we always use dplyr?",
    "text": "Should we always use dplyr?\nWhat if:\n\nyou have a single operation? or 20?\nthe flow of operations isn’t linear?\nyou need to inspect an intermediate step?\nspeed is more important to you than readability?",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#homework",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#homework",
    "title": "MET581 Lecture 03",
    "section": "Homework",
    "text": "Homework\n\nQuarto file\nRegex practice before tomorrow, like this site\n\nSuggested Reading\n\nR for Data Science 2e, chapter 4\nThe docs for dplyr and the vignette at browseVignettes(package = \"dplyr\")",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-tidyverse-life",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Slides.html#the-tidyverse-life",
    "title": "MET581 Lecture 03",
    "section": "The Tidyverse Life",
    "text": "The Tidyverse Life\n\nHadley’s Tidy Data paper\nCheat Sheets from Posit\nThe Tidyverse blog\n@hadleywickham, @posit_pbc, @tidyverse",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Slides"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework.html",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework.html",
    "title": "MET581 Lecture 03 Homework",
    "section": "",
    "text": "This document contains all questions for the lecture ‘Wrangling Data 1’. Please create a Quarto document containing all text, code and output used to answer the questions.",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Homework"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework.html#tidy-data",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework.html#tidy-data",
    "title": "MET581 Lecture 03 Homework",
    "section": "1 Tidy Data",
    "text": "1 Tidy Data\n\nWhat 3 main rules do we need to follow for data to be in tidy format?\nLoad readr and use it to read in the dataset at “http://stat405.had.co.nz/data/pew.txt”. You should have a tibble with 18 rows and 11 columns showing data on the relationship between religion and income in the US. Is the data in tidy format? Explain why.\nLook at the paper by Hadley Wickham describing tidy data. Section 3 outlines how to turn messy datasets into tidy ones. Briefly state the 5 most common problems that make a dataset messy and the solutions Hadley proposes.",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Homework"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework.html#dplyr",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework.html#dplyr",
    "title": "MET581 Lecture 03 Homework",
    "section": "2 dplyr",
    "text": "2 dplyr\nThese exercises require use of the dplyr verbs we have learned so far. Some questions will require small variations on these that you need to look up; you may find it especially useful to check the documentation on scoped variants of the standard verbs, or the recent equivalents in pick and across (we will review both options in the next session). All tasks that require use of more than one verb should be done using the pipe. Show the output from each question in a new cell, where a single paragraph of pipes is used to answer each question.\nIf you’re struggling with a question that requires a lot of steps, try to sketch out the bones of the code before filling in the details. For instance, if you’re asked to shown the mean of GDP in 1990, you might first write out the basic order of things, like so:\n\ngapminder |&gt;\n  filter() |&gt;\n  summarise()\n\nread in the dataset at ‘http://stat405.had.co.nz/data/weather.txt’ using readr\n\nconvert all column names to title case, except ‘id’, which should be all capitals\nchoose columns ID, Year, Month and d1 to d10. Use num_range to select the columns d1:d10\n\nread in the dataset at ‘https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv’ using read_csv(). This data contains weights and sleep times for mammals. You should have 11 columns and 83 rows\n\nselect the name and genus columns, and all columns ending with ‘wt’. Remove all rows with missing values,then print the first 20 rows from the final dataframe.\nshow the columns name, order, sleep_total and awake for all animals in the order ‘Artiodactyla’, sorted by descending sleep time.\nafter removing those missing conservation status, show the mean for all columns beginning with ‘sleep’, grouped by order. Include a count of the number of animals in each grouping.\ndoubles should never be compared using ==. Instead, use dplyr::near() to keep rows with ‘sleep_total’ equal to 9.4 and select columns containing the string ‘or’ anywhere in their names\nuse dplyr::coalesce to replace all missing values in the column ‘conservation’ with the string ‘unknown’. Then use dplyr’s between function to filter for rows with sleep_rem between 1 and 2.5 and show the total number of animals and number of distinct genera, using summarise(), n() and n_distinct(), after grouping by conservation status. Name the new summary columns ‘animals’ and ‘genera’.\n\nLoad the starwars dataset\n\nfilter hair_color to keep those rows containing brown (including combinations like ‘brown, grey’) or eye_color that is brown only, then select the column range from ‘name’ to ‘eye_color’, and the columns ‘gender’, ‘homeworld’ and ‘species.’ Next, create a new boolean column called ‘male_brunette’, which is TRUE only for males with exclusively brown hair. Sort by descending height and re-order the columns, using select() and everything(), to put ‘male_brunette’ directly after the ‘name’ column. Finally, replace underscores in the column names with spaces, change all instances of ‘color’ to ‘colour’, and make all column names title case using str_to_title(). Print the top 5 rows only.\nhow many rows are missing information for each column? Break it down by species by using group_by() and summarise_all()",
    "crumbs": [
      "Home",
      "Wrangling Data 1",
      "Homework"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#todays-aims",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#todays-aims",
    "title": "Explore R",
    "section": "Todays Aims",
    "text": "Todays Aims\n\nBasics of Quarto\nUsing Quarto to create pdf’s\nThe R package tibble\nThe R package readr",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#learning-objectives",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#learning-objectives",
    "title": "Explore R",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nGet familiar and comfortable with Quarto and creating pdf’s\nUnderstand the differences between Rmarkdown and Quarto\nUnderstand how to use tibble to make tables of data\nUnderstand how to use readr to read in different formats of data",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#homework",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#homework",
    "title": "Explore R",
    "section": "Homework",
    "text": "Homework\n\nFor the first homework you may have just used R scripts\nFor future homework you’ll learn how to make pdf’s or html files from R code, which look like the pdf file for the homework",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers",
    "title": "Explore R",
    "section": "Homework answers",
    "text": "Homework answers\n\nQuestion 1\n\n\nsqrt(6 * 2)\n\n[1] 3.46410161514\n\n4 + 3 - 2\n\n[1] 5\n\n1046 * 934\n\n[1] 976964\n\n\n\nQuestion 2\n\n\nlibrary(MASS)\nnrow(women)\n\n[1] 15\n\ncolnames(women)\n\n[1] \"height\" \"weight\"",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers---continued",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers---continued",
    "title": "Explore R",
    "section": "Homework answers - continued",
    "text": "Homework answers - continued\n\nwomen$ages &lt;- sample(18:90, nrow(women), replace = TRUE)\nhead(women)\n\n  height weight ages\n1     58    115   53\n2     59    117   30\n3     60    120   45\n4     61    123   31\n5     62    126   83\n6     63    129   23\n\n\n\nsum(women$height)\n\n[1] 975\n\nsum(women$weight)\n\n[1] 2051\n\nsum(women$ages)\n\n[1] 687\n\n# A more elegant way to apply a function to all columns!\nsapply(women, mean)\n\n       height        weight          ages \n 65.000000000 136.733333333  45.800000000",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers---continued-1",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers---continued-1",
    "title": "Explore R",
    "section": "Homework answers - continued",
    "text": "Homework answers - continued\n\nQuestion 3\n\n\ncohort &lt;- read.table(\n  \"http://tbb.bio.uu.nl/BDA/fig4.tsv\",\n  sep = \"\\t\",\n  header = TRUE,\n  stringsAsFactors = FALSE\n)\n\nfemales &lt;- cohort[cohort$Gender == \"F\", ]\nhead(females)\n\n       Name First_Name  Last_Name Age Weight Gender Married\n1 Patient01    Adriana     Mattos  35   64.5      F    TRUE\n5 Patient05      Janet Thomlinson  31   87.5      F   FALSE\n6 Patient06 Frederique        Vos  73   69.4      F    TRUE\n\n\n\nwrite.csv(x = females, file = \"fig4-females.csv\")",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers---continued-2",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers---continued-2",
    "title": "Explore R",
    "section": "Homework answers - continued",
    "text": "Homework answers - continued\n\nQuestion 4\n\n\na &lt;- c(1, 2, 5.3, 6, -2, 4) # numeric vector\nb &lt;- c(\"one\", \"two\", \"three\") # character vector\nc &lt;- c(TRUE, TRUE, TRUE, FALSE, TRUE, FALSE) #logical vector\na\n\n[1]  1.0  2.0  5.3  6.0 -2.0  4.0\n\nb\n\n[1] \"one\"   \"two\"   \"three\"\n\nc\n\n[1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE\n\nc[c(1, 3)]\n\n[1] TRUE TRUE",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers---continued-3",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers---continued-3",
    "title": "Explore R",
    "section": "Homework answers - continued",
    "text": "Homework answers - continued\n\n# generates 4 x 4 numeric matrix\ny &lt;- matrix(1:20, nrow = 4, ncol = 4)\nrnames &lt;- c(\"R1\", \"R2\", \"R3\", \"R4\")\ncnames &lt;- c(\"C1\", \"C2\", \"C3\", \"C4\")\nmymatrix &lt;- matrix(\n  y,\n  nrow = 4,\n  ncol = 4,\n  byrow = TRUE,\n  dimnames = list(rnames, cnames)\n)\nmymatrix\n\n   C1 C2 C3 C4\nR1  1  2  3  4\nR2  5  6  7  8\nR3  9 10 11 12\nR4 13 14 15 16\n\n\n\n“A dimnames attribute for the matrix: NULL or a list of length 2 giving the row and column names respectively. An empty list is treated as NULL, and a list of length one as row names. The list can be named, and the list names will be used as names for the dimensions.”",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers---continued-4",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#homework-answers---continued-4",
    "title": "Explore R",
    "section": "Homework answers - continued",
    "text": "Homework answers - continued\n\nd &lt;- c(1:4)\ne &lt;- c(\"red\", \"white\", \"red\", NA)\nf &lt;- c(TRUE, TRUE, TRUE, FALSE)\nmydata &lt;- data.frame(d, e, f)\nnames(mydata) &lt;- c(\"id\", \"color\", \"passed\")\nmydata\n\n  id color passed\n1  1   red   TRUE\n2  2 white   TRUE\n3  3   red   TRUE\n4  4  &lt;NA&gt;  FALSE",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#quarto",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#quarto",
    "title": "Explore R",
    "section": "Quarto",
    "text": "Quarto\nToday we’re going to talk about Quarto, which we can use to make pdf and html files (and much more!) that integrate plain language, code and output (images etc.). This is excellent because it’s a dynamic document (and so more reproducible), and hugely flexible - various languages and engines, and outputs are supported.",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#section",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#section",
    "title": "Explore R",
    "section": "",
    "text": "But before Quarto, there was Rmarkdown…",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#some-background-on-rmarkdown",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#some-background-on-rmarkdown",
    "title": "Explore R",
    "section": "Some background on Rmarkdown",
    "text": "Some background on Rmarkdown\n\n\nToday we will be working on a .qmd (Quarto) file, but first, we need to talk about .rmd files.\nThis (an .rmd file) is an Rmarkdown file. You should remember a little about markdown from your Unix lectures. You will be completing your homework in this file, so let’s have a look at it now.\nRMarkdown is a way to make documents which include R code. You can use this to write html documents, pdf’s and PowerPoints to show answers to coding problems, or the code themselves.\nCan you think of any reasons for using this?",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#some-background-on-quarto",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#some-background-on-quarto",
    "title": "Explore R",
    "section": "Some background on Quarto",
    "text": "Some background on Quarto\n\nAnnounced in 2022 and becoming more widely adopted only last year, based on pandoc\nActually a separate software that we run within RStudio\nThe successor to Rmarkdown in many ways (made by the same devs), using .qmd files, made to support more languages (Python, Julia, etc.) and be more consistent in formatting\nCan be used to make documents in Rstudio, or Jupyter notebooks or elsewhere (i.e. it’s both multi-language and multi-engine)\n\n\n\n\n\n\n\n\nCombines R Markdown, bookdown, distill, xaringian, and others “into a single consistent system”",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#some-background-on-quarto-1",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#some-background-on-quarto-1",
    "title": "Explore R",
    "section": "Some background on Quarto",
    "text": "Some background on Quarto",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#a-note-on-quarto",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#a-note-on-quarto",
    "title": "Explore R",
    "section": "A note on Quarto",
    "text": "A note on Quarto\n\nFundamental usage for reports is the same as creating in Rmarkdown\nIt’s also what’s used to make many of the R books you may read online (including R for Data Science 2nd edition!)\nRecommended that you use Quarto by default, because:\n\nYou will be easily be able to swap-in other languages besides R\nYou will more easily be able to use other Quarto features like those for making blogs and journal articles if you’re already familiar\nIt’s highly compatible - you can render most Rmarkdown or jupyter notebooks in Quarto easily, so you can still make normal Rmarkdown documents with your knowledge if needed.\nYou’re up to date with the latest in reproducible research\nNewest features will likely be added to Quarto over Rmarkdown",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#making-your-first-.qmd-file",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#making-your-first-.qmd-file",
    "title": "Explore R",
    "section": "Making your first .qmd file",
    "text": "Making your first .qmd file\n\n\n\nUse the menu bar to create a new Quarto document, we will focus on html today\nNotice that the file contains three types of content:\n\nA YAML header surrounded by - - -\nR code chunks surrounded by ```\nText mixed with simple markdown formatting\n\n\nWhat do each of the bits of your new file do?\n\nLet’s work through these now and create a knitted document!\nCreate your own with code/data you have, or download an example file from quarto from here",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-the-yaml-header",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-the-yaml-header",
    "title": "Explore R",
    "section": "Elements of Quarto | The YAML header",
    "text": "Elements of Quarto | The YAML header\n\nQuarto documents start with a YAML header that sets metadata and configurations for the document.\nYAML is a data serialisation language which aims to be useful for computers (often config files) and humans (it’s relatively easy to read)\nTypical YAML options:\n\ntitle: Title of the document\nauthor: Author’s name\ndate: Document date\nformat: Specifies the output format (html, pdf, etc.)\ntheme: Defines a theme for visual style\n\n\nThere are a lot of options we won’t cover today and they differ by document type!",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-code-chunks",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-code-chunks",
    "title": "Explore R",
    "section": "Elements of Quarto | Code chunks",
    "text": "Elements of Quarto | Code chunks\nWhen you open the file in the RStudio IDE, it becomes a notebook interface for R. You can run each code chunk by clicking the green arrow icon. RStudio executes the code and display the results in line with your file.\nThere are three ways to insert R code into the file:\n\nThe keyboard shortcut Ctrl + Alt + I (OS X: Cmd + Option + I)\nThe +option in the menu bar\nOr by typing the chunk delimiters ``` {r} ```",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-code-chunks-1",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-code-chunks-1",
    "title": "Explore R",
    "section": "Elements of Quarto | Code chunks",
    "text": "Elements of Quarto | Code chunks\nIn Quarto, chunk output can be customized with options prefixed by #| inside the chunk header. Here are some common options:\n\n\n\n#| include: false\n\nExcludes code and results from the rendered document but runs the code.\n\n#| echo: false\n\nExcludes code but displays results. Useful for embedding figures.\n\n\n\n\n#| message: false\n\nSuppresses messages generated by code.\n\n#| warning: false\n\nSuppresses warnings generated by code.\n\n#| fig-cap: “This is a caption”\n\nAdds a caption to figures.\n\n\n\nIn html documents, adding code-tools and using code-folding are usually preferred over include/echo",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-inline-code",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-inline-code",
    "title": "Explore R",
    "section": "Elements of Quarto | Inline code",
    "text": "Elements of Quarto | Inline code\nCode results can be inserted directly into the text of a .qmd file by enclosing the code using single ` like so:\n\nThe mean of the data was {r} mean(mtcars$gear)\n\nWhich renders as:\nThe mean of the data was 3.6875",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-multiple-languages",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-multiple-languages",
    "title": "Explore R",
    "section": "Elements of Quarto | Multiple languages",
    "text": "Elements of Quarto | Multiple languages\nQuarto allows the use of multiple languages in code chunks. Specify the language using {} after the chunk delimiter, like python, julia, or r.",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-text-options",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#elements-of-quarto-text-options",
    "title": "Explore R",
    "section": "Elements of Quarto | Text Options",
    "text": "Elements of Quarto | Text Options\n\nDo you remember your markdown formatting?\nThe main body is just normal markdown, so all the same stuff works\nExamples on the website here",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#creating-documents-previewing-and-rendering",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#creating-documents-previewing-and-rendering",
    "title": "Explore R",
    "section": "Creating documents | Previewing and Rendering",
    "text": "Creating documents | Previewing and Rendering\n\nIn RStudio, you can preview and render Quarto documents easily\n\nRender by clicking the ‘Render’ button\nPreview by toggling the visual button\n\n\n\n\nQuarto provides a command-line interface as well, which allows rendering with: quarto render myfile.qmd\nYou can specify output formats in the YAML header or when rendering",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#creating-documents-quarto-output-formats",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#creating-documents-quarto-output-formats",
    "title": "Explore R",
    "section": "Creating documents | Quarto output formats",
    "text": "Creating documents | Quarto output formats\n\nQuarto supports various output formats:\n\nhtml: Web format with dynamic features\npdf: Portable document format for printing\ndocx: Microsoft Word format\nrevealjs: HTML presentations (for slides, this is what these slide are made with!)\nbeamer: PDF presentations (for slides)\n\nSpecify these in the YAML or use them with the quarto render command, more details here",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#creating-documents-practice",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#creating-documents-practice",
    "title": "Explore R",
    "section": "Creating documents | Practice",
    "text": "Creating documents | Practice\n\nHere is a version of the document with other elements added\nSee if you can make an ordered list with sub items that contain at least one example of bold, italic, superscript and strikethrough text, as well as a 2x2 table with headers",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#now-make-an-.rmd-file",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#now-make-an-.rmd-file",
    "title": "Explore R",
    "section": "Now make an .rmd file",
    "text": "Now make an .rmd file\n\n\n\nCompare it to a .rmd document\nWhat do you notice that’s different?",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#quarto-.qmd-and-rmarkdown-.rmd-differences-you-need-to-know",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#quarto-.qmd-and-rmarkdown-.rmd-differences-you-need-to-know",
    "title": "Explore R",
    "section": "Quarto (.qmd) and Rmarkdown (.rmd): Differences you need to know",
    "text": "Quarto (.qmd) and Rmarkdown (.rmd): Differences you need to know\n\nIt’s pretty much mainly the syntax of the YAML options (html VS html_document), code chunk option formats (although Quarto is compatible with the rmd format), and the language support\nRmarkdown is wedded to R, even if you use other languages like Python, it’s still actually being run through R (via the reticulate package in the case of Python)\nQuarto is language and engine agnostic, and thus more more versatile",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#final-quarto-links",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#final-quarto-links",
    "title": "Explore R",
    "section": "Final Quarto links",
    "text": "Final Quarto links\n\nThe Quarto site, is very good: https://quarto.org/\nCheatsheet here\n\nFor PDFs:\n\nYou’ll need latex installed to create pdfs\n\nSee options here (TinyTex is probably best bet)\nThe pdf YAML reference is here\n\nYou can output to multiple formats and use the quarto package directly\n\nSee tutorial on authoring here",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#break",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#break",
    "title": "Explore R",
    "section": "Break",
    "text": "Break",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#tibbles",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#tibbles",
    "title": "Explore R",
    "section": "Tibbles!",
    "text": "Tibbles!\n\n\n“Tibbles” are a new modern data frame. It keeps many important features of the original data frame. It removes many of the outdated features. They are another amazing feature added to R by Hadley Wickham. We will use them in the tidyverse to replace the older dataframe that we just learned about.",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#tibbles---continued",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#tibbles---continued",
    "title": "Explore R",
    "section": "Tibbles! - continued",
    "text": "Tibbles! - continued\n\n\nCompared to Data Frames:\n\nA tibble never changes the input type.\nA tibble can have columns that are lists.\nA tibble can have non-standard variable names.\n\ncan start with a number or contain spaces.\nTo use this refer to these in a backtick.\n\nIt only recycles vectors of length 1.\nIt never creates row names.\nEnhanced print() behaviour",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#tibbles---continued-1",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#tibbles---continued-1",
    "title": "Explore R",
    "section": "Tibbles! - continued",
    "text": "Tibbles! - continued\n\n\n\nThe syntax to make a tibble is nearly identical to data frames\n\n\n\nlibrary(tibble)\ntest &lt;- tibble(x = 1:3, y = list(1:5, 1:10, 1:20))\ntest\n\n# A tibble: 3 × 2\n      x y         \n  &lt;int&gt; &lt;list&gt;    \n1     1 &lt;int [5]&gt; \n2     2 &lt;int [10]&gt;\n3     3 &lt;int [20]&gt;\n\n\n\n\n\n\nWhereas if we try this as a dataframe\n\n\n\ntest &lt;- as.data.frame(c(x = 1:3, y = list(1:5, 1:10, 1:20)))\nhead(test)\n\n  x1 x2 x3 y1 y2 y3\n1  1  2  3  1  1  1\n2  1  2  3  2  2  2\n3  1  2  3  3  3  3\n4  1  2  3  4  4  4\n5  1  2  3  5  5  5\n6  1  2  3  1  6  6",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#tibbles---continued-2",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#tibbles---continued-2",
    "title": "Explore R",
    "section": "Tibbles! - continued",
    "text": "Tibbles! - continued\nWe can easily coerce dataframes to tibbles with as_tibble()\nTry the following, what differences do you notice:\n\ndata(iris)\nas_tibble(iris)\n\n\n\nTibbles on print the first 10 rows and all the columns that fit on the screen\nYou will not accidentally print too much!\nEach column displays its data type",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#tribble",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#tribble",
    "title": "Explore R",
    "section": "Tribble",
    "text": "Tribble\n\nSometimes you might need to make a small table in R\ntribble() allows you make a tibble and fill it row wise\nThe ~ is used to define column headers\n\n\ntribble(~x, ~y, ~z, \"a\", 2, 3.6, \"b\", 1, 8.5)\n\n# A tibble: 2 × 3\n  x         y     z\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 a         2   3.6\n2 b         1   8.5",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#tibble-exercises",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#tibble-exercises",
    "title": "Explore R",
    "section": "Tibble exercises",
    "text": "Tibble exercises\n\nHow can you tell if an object is a tibble?\nCompare and contrast the following operations on a data.frame and equivalent tibble. What is different?\n\n\ndf &lt;- data.frame(abc = 1, xyz = \"a\")\ndf$x\ndf[, \"xyz\"]\n\n\nIf you have the name of a column stored in an object, e.g. var &lt;- \"mpg\", how can you extract the column from a tibble?",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#readr",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#readr",
    "title": "Explore R",
    "section": "Readr",
    "text": "Readr\n\nThere are many ways to import data into R, from inputting the data yourself to reading it in using the traditional R tools we used in lesson one.\nThe tidyverse way is to use a package called readr, there are several functions within this package you can use to read in different types of data.",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#readr-functions",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#readr-functions",
    "title": "Explore R",
    "section": "Readr functions",
    "text": "Readr functions\n\nread_csv() reads comma delimited files\nread_csv2() reads semicolon separated files (common in countries where , is used as the decimal place)\nread_tsv() reads tab delimited files\nread_delim() reads in files with any delimiter.\nread_fwf() reads fixed width files. You can specify fields either by their widths with fwf_widths() or their position with fwf_positions().\nread_table() reads a common variation of fixed width files where columns are separated by white space.\nread_log() reads Apache style log files.",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#readr-exercises",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#readr-exercises",
    "title": "Explore R",
    "section": "Readr exercises",
    "text": "Readr exercises\n\nUse the base R function read.table() to import the pheno.txt file. Then repeat this with read_tsv() from Readr, what is the difference?\n\nYou may notice that read_csv automatically assumes your first row is your column headers, you may wish to alter this behaviour is your file comes with a header of information on the top row.\n\nOpen the “pheno.txt” in a text editor (can use notepad on Windows), and add a header to the file\nWhat happens when you open this using read_csv?",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#readr-exercises-continued",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#readr-exercises-continued",
    "title": "Explore R",
    "section": "Readr exercises continued",
    "text": "Readr exercises continued\nLet’s try again, but skipping this header.\n\nYou can use skip = n to skip the first n lines; or use comment = \"#\" to drop all lines that start with “#”\nYou may not have column names, in that case you can use col_names = FALSE to tell read_csv() not to treat the first row as headings, and instead label them sequentially from X1 to Xn",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#readr-vs-base-r",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#readr-vs-base-r",
    "title": "Explore R",
    "section": "Readr VS base R",
    "text": "Readr VS base R\nWhy use the readr functions?\n\nThey are typically much faster (~10x) than their base equivalents. Long running jobs have a progress bar, so you can see what’s happening. If you’re looking for raw speed, try fread() from the data.table package. It doesn’t fit quite so well into the tidyverse, but it can be quite a bit faster.\nThey produce tibbles, they don’t convert character vectors to factors, use row names, or munge the column names. These are common sources of frustration with the base R functions.\nThey are more reproducible. Base R functions inherit some behaviour from your operating system and environment variables, so code that works on your computer might not work on someone else’s.",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581_lecture_02-Explore-R.html#additional-resources",
    "href": "02_explore_r/MET581_lecture_02-Explore-R.html#additional-resources",
    "title": "Explore R",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nExtra reading from R for Data Science:\n\nChapter 8: Data import\nChapter 29: Quarto\nChapter 30: Quarto formats\n\nAdvanced reading:\n\nChapter 21-25 (importing data)\n\nThese slides and the workshop can be found on the website here:",
    "crumbs": [
      "Home",
      "Explore R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581-Lecture-02-Explore-R-Homework-Answers.html",
    "href": "02_explore_r/MET581-Lecture-02-Explore-R-Homework-Answers.html",
    "title": "MET581-Lecture-02-Explore-R-homework-answers",
    "section": "",
    "text": "Quarto is a document format that allows you to create and render documents in multiple formats including HTML, PDF, and MS Word. For more details on using Quarto, see the Quarto website. When you render this document, it will generate output that includes both the content and the results of any embedded R code chunks. You can embed an R code chunk like this:\n\nsummary(cars)\n\nThis will display a summary of the cars dataset like shown below:\n\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nFor your homework, you will answer the questions below using Quarto. Make sure to include both the code and results in your knitted PDF or html file.\n\n\n\n\nUse Quarto to write a paragraph explaining the tidyverse concept. Your paragraph should include:\nCreate a tibble with columns labeled: name, age, height, gender. Your tibble should contain at least 13 rows of data.\n\n\nlibrary(tibble)\nlibrary(dplyr)\n\ntib &lt;- tibble(\n  \"name\" = c(\n    \"Luke\",\n    \"Julia\",\n    \"Matt\",\n    \"Simon\",\n    \"Laura\",\n    \"Paul\",\n    \"Frank\",\n    \"Chris\",\n    \"Pam\",\n    \"Sue\",\n    \"Sim\",\n    \"Tom\",\n    \"Ben\"\n  ),\n  \"age\" = c(22, 21, 18, 19, 20, 16, 17, 26, 23, 25, 28, 18, 19),\n  \"height\" = c(182, 180, 178, 183, 180, 179, 176, 175, 180, 181, 182, 170, 175),\n  \"gender\" = c(\"M\", \"F\", \"M\", \"M\", \"F\", \"M\", \"M\", \"M\", \"F\", \"F\", \"M\", \"M\", \"M\")\n)\n\ntib\n\n# A tibble: 13 × 4\n   name    age height gender\n   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; \n 1 Luke     22    182 M     \n 2 Julia    21    180 F     \n 3 Matt     18    178 M     \n 4 Simon    19    183 M     \n 5 Laura    20    180 F     \n 6 Paul     16    179 M     \n 7 Frank    17    176 M     \n 8 Chris    26    175 M     \n 9 Pam      23    180 F     \n10 Sue      25    181 F     \n11 Sim      28    182 M     \n12 Tom      18    170 M     \n13 Ben      19    175 M     \n\n\n\n2a: Use tibble code to select the data for row 4.\n\n\nslice(tib, 4)\n\n# A tibble: 1 × 4\n  name    age height gender\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; \n1 Simon    19    183 M     \n\n\nOr\n\ntib[4, ]\n\n# A tibble: 1 × 4\n  name    age height gender\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; \n1 Simon    19    183 M     \n\n\n\n2b: Retrieve the height of a person based on their name.\n\n\ntib[tib$name == \"Luke\", ]$height\n\n[1] 182\n\n\nOr\n\nfilter(tib, name == \"Luke\")$height\n\n[1] 182\n\n\n\n2c: Calculate the ratio of men to women.\n\n\nnrow(tib[tib$gender == \"M\", ]) / nrow(tib[tib$gender == \"F\", ])\n\n[1] 2.25\n\n\n\n2d: Calculate the average age and the standard deviation.\n\n\nmean(tib[['age']])\n\n[1] 20.9230769231\n\nsd(tib[['age']])\n\n[1] 3.68468764985\n\n\n\nTurn the dataset iris into a tibble.\n\n\niris_tib &lt;- as_tibble(iris)\niris_tib\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n\n\nWhy might tibbles be preferable to traditional R data frames for data scientists?\nList some of the most important options provided by the readr package.\nImport the pheno_unclean.txt file using readr.\n\n\nlibrary(readr)\n# This version has been manually cleaned\npheno &lt;- read_tsv(here::here(\"data/pheno.txt\"))\n\nRows: 32 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): ID\ndbl (3): Age, Gender, Phenotype\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\npheno\n\n# A tibble: 32 × 4\n   ID      Age Gender Phenotype\n   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n 1 AD102    78      0         0\n 2 AD103    65      0         0\n 3 AD104    86      0         0\n 4 AD105    58      0         0\n 5 AD106    60      0         0\n 6 AD107    59      0         0\n 7 AD108    95      0         0\n 8 AD109    89      0         0\n 9 AD110    52      0         0\n10 AD111    60      0         1\n# ℹ 22 more rows\n\n\n\nIdentify any errors in the pheno_unclean.txt file using R code.\n\n\npheno[pheno$Phenotype &gt; 1, ]\n\n# A tibble: 1 × 4\n  ID      Age Gender Phenotype\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n1 AD123    78      1         5\n\n\nOr\n\nfilter(pheno, Phenotype &gt; 1)\n\n# A tibble: 1 × 4\n  ID      Age Gender Phenotype\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n1 AD123    78      1         5"
  },
  {
    "objectID": "02_explore_r/MET581-Lecture-02-Explore-R-Homework-Answers.html#overview",
    "href": "02_explore_r/MET581-Lecture-02-Explore-R-Homework-Answers.html#overview",
    "title": "MET581-Lecture-02-Explore-R-homework-answers",
    "section": "",
    "text": "Quarto is a document format that allows you to create and render documents in multiple formats including HTML, PDF, and MS Word. For more details on using Quarto, see the Quarto website. When you render this document, it will generate output that includes both the content and the results of any embedded R code chunks. You can embed an R code chunk like this:\n\nsummary(cars)\n\nThis will display a summary of the cars dataset like shown below:\n\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nFor your homework, you will answer the questions below using Quarto. Make sure to include both the code and results in your knitted PDF or html file."
  },
  {
    "objectID": "02_explore_r/MET581-Lecture-02-Explore-R-Homework-Answers.html#questions",
    "href": "02_explore_r/MET581-Lecture-02-Explore-R-Homework-Answers.html#questions",
    "title": "MET581-Lecture-02-Explore-R-homework-answers",
    "section": "",
    "text": "Use Quarto to write a paragraph explaining the tidyverse concept. Your paragraph should include:\nCreate a tibble with columns labeled: name, age, height, gender. Your tibble should contain at least 13 rows of data.\n\n\nlibrary(tibble)\nlibrary(dplyr)\n\ntib &lt;- tibble(\n  \"name\" = c(\n    \"Luke\",\n    \"Julia\",\n    \"Matt\",\n    \"Simon\",\n    \"Laura\",\n    \"Paul\",\n    \"Frank\",\n    \"Chris\",\n    \"Pam\",\n    \"Sue\",\n    \"Sim\",\n    \"Tom\",\n    \"Ben\"\n  ),\n  \"age\" = c(22, 21, 18, 19, 20, 16, 17, 26, 23, 25, 28, 18, 19),\n  \"height\" = c(182, 180, 178, 183, 180, 179, 176, 175, 180, 181, 182, 170, 175),\n  \"gender\" = c(\"M\", \"F\", \"M\", \"M\", \"F\", \"M\", \"M\", \"M\", \"F\", \"F\", \"M\", \"M\", \"M\")\n)\n\ntib\n\n# A tibble: 13 × 4\n   name    age height gender\n   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; \n 1 Luke     22    182 M     \n 2 Julia    21    180 F     \n 3 Matt     18    178 M     \n 4 Simon    19    183 M     \n 5 Laura    20    180 F     \n 6 Paul     16    179 M     \n 7 Frank    17    176 M     \n 8 Chris    26    175 M     \n 9 Pam      23    180 F     \n10 Sue      25    181 F     \n11 Sim      28    182 M     \n12 Tom      18    170 M     \n13 Ben      19    175 M     \n\n\n\n2a: Use tibble code to select the data for row 4.\n\n\nslice(tib, 4)\n\n# A tibble: 1 × 4\n  name    age height gender\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; \n1 Simon    19    183 M     \n\n\nOr\n\ntib[4, ]\n\n# A tibble: 1 × 4\n  name    age height gender\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; \n1 Simon    19    183 M     \n\n\n\n2b: Retrieve the height of a person based on their name.\n\n\ntib[tib$name == \"Luke\", ]$height\n\n[1] 182\n\n\nOr\n\nfilter(tib, name == \"Luke\")$height\n\n[1] 182\n\n\n\n2c: Calculate the ratio of men to women.\n\n\nnrow(tib[tib$gender == \"M\", ]) / nrow(tib[tib$gender == \"F\", ])\n\n[1] 2.25\n\n\n\n2d: Calculate the average age and the standard deviation.\n\n\nmean(tib[['age']])\n\n[1] 20.9230769231\n\nsd(tib[['age']])\n\n[1] 3.68468764985\n\n\n\nTurn the dataset iris into a tibble.\n\n\niris_tib &lt;- as_tibble(iris)\niris_tib\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n\n\nWhy might tibbles be preferable to traditional R data frames for data scientists?\nList some of the most important options provided by the readr package.\nImport the pheno_unclean.txt file using readr.\n\n\nlibrary(readr)\n# This version has been manually cleaned\npheno &lt;- read_tsv(here::here(\"data/pheno.txt\"))\n\nRows: 32 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): ID\ndbl (3): Age, Gender, Phenotype\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\npheno\n\n# A tibble: 32 × 4\n   ID      Age Gender Phenotype\n   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n 1 AD102    78      0         0\n 2 AD103    65      0         0\n 3 AD104    86      0         0\n 4 AD105    58      0         0\n 5 AD106    60      0         0\n 6 AD107    59      0         0\n 7 AD108    95      0         0\n 8 AD109    89      0         0\n 9 AD110    52      0         0\n10 AD111    60      0         1\n# ℹ 22 more rows\n\n\n\nIdentify any errors in the pheno_unclean.txt file using R code.\n\n\npheno[pheno$Phenotype &gt; 1, ]\n\n# A tibble: 1 × 4\n  ID      Age Gender Phenotype\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n1 AD123    78      1         5\n\n\nOr\n\nfilter(pheno, Phenotype &gt; 1)\n\n# A tibble: 1 × 4\n  ID      Age Gender Phenotype\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n1 AD123    78      1         5"
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#todays-aims",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#todays-aims",
    "title": "Introduction to R",
    "section": "Todays Aims",
    "text": "Todays Aims\n\nBasics of R\nImporting and Exporting Data\nWorking with R packages\nBasic data alterations\n\n\nConsider adding more detailed learning outcomes, such as specific R skills or tasks they should master.",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#learning-objectives",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#learning-objectives",
    "title": "Introduction to R",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nGet familiar with RStudio\nUnderstand R syntax\nLearn basic calculations\nExplore data types and structures\nLearn data import/export in base R\nFind help and install packages\n\n\nMight need to highlight “tidyverse” and packages related to data wrangling, as they’re commonly used in modern R workflows.",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#recommended-textbook",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#recommended-textbook",
    "title": "Introduction to R",
    "section": "Recommended Textbook",
    "text": "Recommended Textbook\nThis course will follow R for Data Science (2nd Edition):\n\n\n\nLink to R4DS book\nMajor updates: Swap to Quarto from R markdown\nEmphasizes data visualization and ggplot2\nExcludes modeling (see Tidy Models book for that)",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#install-r-and-rstudio",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#install-r-and-rstudio",
    "title": "Introduction to R",
    "section": "Install R and RStudio",
    "text": "Install R and RStudio\n\nR: Current version (4.5.1 “Great Square Root”)\n\nDownload for Windows\nMacOS (use ARM64 for M1 Macs)\nUbuntu Linux: sudo apt install r-base\n\nRStudio: interactive development environment (IDE) for R\n\nWrite code, analyze data, create plots\nDownload RStudio\n\n\nYou are welcome to use Jupyter Notebooks/lab as well, but note that the course will assume Rstudio and it’s best to familiarise yourself with this first.",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#jupyter-vs-rstudio",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#jupyter-vs-rstudio",
    "title": "Introduction to R",
    "section": "Jupyter vs RStudio",
    "text": "Jupyter vs RStudio\n\n\n\nR Console\nSimplest way to interact with R\nNo additional features\n\n\n\n\nRStudio\nMain IDE we will use\nIncludes console, scripts and much more\n\n\n\n\nJupyterLab\nCan use any of Julia, Python or R\nHappy for you to use/try but not the focus of this course\n\n\n\n\n\nRStudio: Main IDE for this course\n\nIntegrated console, scripts, visualizations\nPreferred for its features and workflow for R",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#basic-math-in-r",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#basic-math-in-r",
    "title": "Introduction to R",
    "section": "Basic Math in R",
    "text": "Basic Math in R\n\n2 + 2\n\n[1] 4\n\n5 - 3 + 2 * 4^2\n\n[1] 34\n\n11465 * 2358971436\n\n[1] 27045607513740\n\n\noptions(scipen = 999)\n11465 * 2358971436\n\nWhat is the difference between these last two runs?\nWhat do you think options(scipen = 999) is doing to the code?",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#optionsscipen",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#optionsscipen",
    "title": "Introduction to R",
    "section": "options(Scipen)",
    "text": "options(Scipen)\n‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation. Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#common-math-operators-in-r",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#common-math-operators-in-r",
    "title": "Introduction to R",
    "section": "Common Math Operators in R",
    "text": "Common Math Operators in R\n\n\n\nAction\nSymbol\n\n\n\n\nAddition\n+\n\n\nSubtraction\n-\n\n\nMultiplication\n*\n\n\nDivision\n/\n\n\nExponentiation\n^\n\n\nModulo\n%%\n\n\n\n\nYou can info on math expressions here",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#common-math-operators-in-r-continued",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#common-math-operators-in-r-continued",
    "title": "Introduction to R",
    "section": "Common Math Operators in R continued",
    "text": "Common Math Operators in R continued\n\n\n\nAction\nSymbol\n\n\n\n\nTrig\nsin(), cos(), tan(), acos(), asin(), atan()\n\n\nNatural log\nlog(), log10(), log2()\n\n\nAbsolute value\nabs()\n\n\nSquare root\nsqrt()\n\n\nRounding\nceiling(), floor(), round()",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#maths-test",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#maths-test",
    "title": "Introduction to R",
    "section": "Maths test!",
    "text": "Maths test!\nSolve these problems in your R console:\n\nWhat is 2 to the power of 16?\nWhat is the square root of 92?\nIf I have 7 apples and 16 kids - how much of an apple do they each get?\n\n\n\n2^16\n\n[1] 65536\n\nsqrt(92)\n\n[1] 9.59166304663\n\n7 / 16\n\n[1] 0.4375",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#the-prompt",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#the-prompt",
    "title": "Introduction to R",
    "section": "The Prompt",
    "text": "The Prompt\nThe prompt is represented by this symbol &gt;.\nThis means that R is waiting for your input.\nThis is how you know that nothing is currently running.\nIf your code isn’t correctly formatted, R will “hang”, and you will see this symbol instead +.\nYou will need to kill the line to try again, and you can do this using ESC.\nIf this prompt is missing you know that R is running your code, depending upon the complexity of the input code this might take some time.\nTry running this code in R, what happens?\n5 - 3 + 2 * 4 ^\nWhat do you think is wrong?",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#commenting-in-r",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#commenting-in-r",
    "title": "Introduction to R",
    "section": "Commenting in R",
    "text": "Commenting in R\n\nR ignores everything after a #\nYou should be carefully and thoroughly commenting every bit of your code so that other people (including future you) understand what it does\nIt can also come after some code:\n\n\n\"Hello_World\" # a word/character\n\n[1] \"Hello_World\"\n\n\n\n4 hashtags will also tell RStudio to allow code folding at that line, very handy for long scripts!",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#getting-help-in-r",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#getting-help-in-r",
    "title": "Introduction to R",
    "section": "Getting help in R",
    "text": "Getting help in R\nR is great at offering extra help.\nIf you know the function name you can type ?function_name or help(function_name).\nIf you aren’t quite sure of the function name try ??function_name!\nTry this out and see what you get.\n?mean\n??mean\nhelp(mean)",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#searching-online-and-llms",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#searching-online-and-llms",
    "title": "Introduction to R",
    "section": "Searching online and LLMs",
    "text": "Searching online and LLMs\n\nBack in the not so distance past, Stackoverflow was the place to find help with codey matters…\nNow most people will use Large Language Models (LLMs)\n\nA word of caution!\nThey can be handy tools, but try to be very intensional about how you use them whilst learning!\nYou’ll be using R throughout this course, so it’s important you actually built confidence using R, not just pass the assessments\nIf you use them, make sure you understand the output they give you (try asking it to explain parts you don’t understand and comment any code it writes well)",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#variables",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#variables",
    "title": "Introduction to R",
    "section": "Variables",
    "text": "Variables\n\nWe want to be able to save numbers, vectors, objects, data frames etc. so that we can call on them again later\nVariable names cannot contain special characters (except _ & .), and they cannot start with a number.\n\n&lt;- is used to assign values to a variable\ni.e. less than followed by a dash, I like to think of it as you are putting something into your variable name",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#variable-assignment",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#variable-assignment",
    "title": "Introduction to R",
    "section": "Variable Assignment",
    "text": "Variable Assignment\n\nx &lt;- 5\ny &lt;- x + 2\nprint(y)\n\n[1] 7\n\n\n\nAvoid using = for assignment to avoid potential scoping issues.",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#code-formatting-matters",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#code-formatting-matters",
    "title": "Introduction to R",
    "section": "Code formatting matters!",
    "text": "Code formatting matters!\n\nYour code should be readable!\nUse snake_case for variable names not CamelCase\n\n\n# Good\nday_one &lt;- 1\nday_1 &lt;- 2\n\n# Bad\nDayOne &lt;- 1\ndayone &lt;- 2\n\n\nUse spacing\n\nx&lt;--4+5/6*4  \nx &lt;- -4 + 5 / 6 * 4\n\nSee the tidyverse style guide for more info, and the styler package for automatic formatting",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#data-types",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#data-types",
    "title": "Introduction to R",
    "section": "Data Types",
    "text": "Data Types\n\n\n\nThere are lots of data types in R\nSome function will only work with some data types, and some will give different types of outputs depending on the input data type, so be careful!\n\n\n\n\n\nType\nExample\n\n\n\n\nCharacter\n‘words’\n\n\nNumeric\n1, 23.25\n\n\nInteger\n2L\n\n\nLogical\nTRUE, FALSE\n\n\nComplex\n1 + 4i\n\n\n\n\nx &lt;- 3\n# \"higher level\" type\nclass(x)\n\n[1] \"numeric\"\n\n# \"lower level\" type\ntypeof(x)\n\n[1] \"double\"",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#vectors-in-r",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#vectors-in-r",
    "title": "Introduction to R",
    "section": "Vectors in R",
    "text": "Vectors in R\nVectors are multiple objects of the same class in one object.\nWe use the ‘c()’ function to join them all together.\nMake your own Vector like the one below.\n\napple &lt;- c('red', 'green', 'yellow')\nprint(apple)\n\n[1] \"red\"    \"green\"  \"yellow\"\n\n# Check the type\nprint(typeof(apple))\n\n[1] \"character\"",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#have-a-go",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#have-a-go",
    "title": "Introduction to R",
    "section": "Have a go!",
    "text": "Have a go!\nTry the following:\n\nMake two vectors of equal length, containing only numbers, save them to new variables\nAdd the two vectors together using their variable names, what happened?\nWhat happens if you type name_of_your_vector[2]?",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#indexing-vectors",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#indexing-vectors",
    "title": "Introduction to R",
    "section": "Indexing Vectors",
    "text": "Indexing Vectors\n\n# If we want a specific element\nvec &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\nvec[2]\n\n[1] \"b\"\n\n# If we want a range of elements\nvec[3:6]\n\n[1] \"c\" \"d\" \"e\" \"f\"\n\n# If we want multiple specific elements\nvec[c(2, 5)]\n\n[1] \"b\" \"e\"",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#vectors-only-contain-one-type-of-data",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#vectors-only-contain-one-type-of-data",
    "title": "Introduction to R",
    "section": "Vectors only contain one type of data",
    "text": "Vectors only contain one type of data\n\nVectors can only contain a single type or data, so you can’t have both characters and numerics together in one vector\nWhat do you think happens if you try?\n\n\n# What will the type of confused be?\nconfused &lt;- c(1, 2, \"3\")\n\n\n\nprint(confused)\n\n[1] \"1\" \"2\" \"3\"\n\ntypeof(confused)\n\n[1] \"character\"\n\n\n\nThere is an order of type conversion that R uses, with character being the broadest type\nIt’s common for columns you expect to be numeric to end up being characters due to a rouge value, be careful!",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#operators",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#operators",
    "title": "Introduction to R",
    "section": "Operators",
    "text": "Operators\n\n\n\nRelational operators\n\n\n\n\nOperator\nDescription\n\n\n\n\n&lt;\nLess than\n\n\n&gt;\nGreater than\n\n\n&lt;=\nLess than or equal to\n\n\n&gt;=\nGreater than or equal to\n\n\n==\nEqual to\n\n\n!=\nNot equal to\n\n\n\n\n\nLogical operators\n\n\n\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n!\nNOT - flips TRUE/FALSE\n\n\n&\nAND - TRUE if both condittions for each element\n\n\n&&\nAND - Same as above but for first element\n\n\n|\nOR - TRUE if at least one condition is TRUE for all elements\n\n\n||\nOR - Same as above but for first element",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#operator-examples",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#operator-examples",
    "title": "Introduction to R",
    "section": "Operator examples",
    "text": "Operator examples\n\nnum1 &lt;- c(TRUE, FALSE, 0, 23)\nnum2 &lt;- c(FALSE, FALSE, TRUE, TRUE)\n\n# Performs AND operation on each element in both num1, num2\nnum1 & num2\n\n[1] FALSE FALSE FALSE  TRUE\n\n\n\n\n# Performs OR operation on each element in both num1, num2\nnum1 | num2\n\n[1]  TRUE FALSE  TRUE  TRUE\n\n\n\n\n\n# This will convert all the num1 TRUE values to FALSE, and FALSE values to TRUE\n!num1\n\n[1] FALSE  TRUE  TRUE FALSE\n\n\n\n\n\n# From num2 Vector - This will convert all the TRUE values to FALSE, and FALSE to TRUE\n!num2\n\n[1]  TRUE  TRUE FALSE FALSE",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#logicals-are-secretly-numerics",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#logicals-are-secretly-numerics",
    "title": "Introduction to R",
    "section": "Logicals are secretly numerics",
    "text": "Logicals are secretly numerics\n\nTry adding two logicals, what happens?\n\n\n# What is the value of secret?\nsecret &lt;- TRUE + TRUE - FALSE\n\n\n\nprint(secret)\n\n[1] 2\n\n\n\nFALSE is actually considered to be 0 and TRUE is 1\n\nNote that TRUE is technically any non-0 value, but normally this doesn’t matter\n\n\n\nmadness &lt;- c(TRUE, FALSE, 0, 23, -5)\ntypeof(madness)\n\n[1] \"double\"\n\nprint(madness)\n\n[1]  1  0  0 23 -5\n\nas.logical(madness)\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#why-this-is-useful",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#why-this-is-useful",
    "title": "Introduction to R",
    "section": "Why this is useful",
    "text": "Why this is useful\nThis is handy because it lets us do math with logicals!\n\n# Get a random sequence of 10 values between 1 and 100\nnumbers &lt;- sample(1:100, size = 10)\nprint(numbers)\n\n [1] 94 98 85 14 82 10 12 53 18 67\n\n# How many values are below 50?\nnumbers &lt; 50\n\n [1] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE\n\n\n\n\nWe can just add up the logicals\n\n\nsum(numbers &lt; 50)\n\n[1] 4",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#lists",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#lists",
    "title": "Introduction to R",
    "section": "Lists",
    "text": "Lists\nA list is an R-object which can contain many different types of elements inside it like vectors, functions and even another list inside it.\n\nlist1 &lt;- list(c(2, 5, 3), 21.3, sin, list(1:5, c(\"a\", \"b\")))\nprint(list1)\n\n[[1]]\n[1] 2 5 3\n\n[[2]]\n[1] 21.3\n\n[[3]]\nfunction (x)  .Primitive(\"sin\")\n\n[[4]]\n[[4]][[1]]\n[1] 1 2 3 4 5\n\n[[4]][[2]]\n[1] \"a\" \"b\"",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#matrices",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#matrices",
    "title": "Introduction to R",
    "section": "Matrices",
    "text": "Matrices\nA matrix is a two-dimensional rectangular data set. It can be created using a vector input to the matrix function.\n\nM &lt;- matrix(c('a', 'b', 'c', 'd', 'e', 'f'), nrow = 2, ncol = 3, byrow = TRUE)\nprint(M)\n\n     [,1] [,2] [,3]\n[1,] \"a\"  \"b\"  \"c\" \n[2,] \"d\"  \"e\"  \"f\" \n\n\n\nChange byrow = FALSE to see what happens.",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#data-frames",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#data-frames",
    "title": "Introduction to R",
    "section": "Data Frames",
    "text": "Data Frames\n\nData frames are tabular objects with columns of different types.\n\nNow you’ve learnt a little more about getting help in R. Can you find out how to make a data frame?",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#data-frames-continued",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#data-frames-continued",
    "title": "Introduction to R",
    "section": "Data frames continued",
    "text": "Data frames continued\n\ndf &lt;- data.frame(\"letters\" = c(\"a\", \"b\", \"c\"), \"numbers\" = c(1, 2, 3))\nprint(df)\n\n  letters numbers\n1       a       1\n2       b       2\n3       c       3\n\n\n\n\nUse $ to reference entire columns.\n\n\ndf$numbers\n\n[1] 1 2 3\n\n# This is handy for applying functions to columns\nsum(df$numbers)\n\n[1] 6\n\n# Can also make new columns\ndf$symbols &lt;- c(\"-\", \"*\", \"^\")",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#subsetting-data",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#subsetting-data",
    "title": "Introduction to R",
    "section": "Subsetting Data",
    "text": "Subsetting Data\n\nYou can index with ‘[]’\n\n\n# The first value is the row and the second is the column\n# So the following is the thirds row, first column\ndf[3, 1]\n\n[1] \"c\"\n\n\n\n\nUse indexing and logical conditions to subset data:\n\n\nsubset &lt;- df[df$numbers == 2, ]\nprint(subset)\n\n  letters numbers symbols\n2       b       2       *",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#r-functions",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#r-functions",
    "title": "Introduction to R",
    "section": "R Functions",
    "text": "R Functions\n\nYou will learn how to properly write and use functions later\nThese are ways of saving time writing code you plan to use over and over again\nR has many built-in functions but there are millions more other people have written as well.\n\n\nsum_of_squares &lt;- function(x, y) {\n  x^2 + y^2\n}\n\nsum_of_squares(3, 7)\n\n[1] 58",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#installing-packages",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#installing-packages",
    "title": "Introduction to R",
    "section": "Installing Packages",
    "text": "Installing Packages\n\nR is open source and easily expandable. Therefore a lot of people have contributed packages to R over the years. These are functions people have written to perform a wide variety of tasks.\nYou can find a very long list of packages here.\nThere is a biology specific set of packages for R called BioConductor, and a data science one called the tidyverse (and this we will be coming back to).\nYou can also write your own package and submit it to the R community. We will come back to looking at packages and the writing of packages later in the course, but if you are interested there is a book about it! You can find it online here.\nHilary Parker’s posts on personal R packages and how to create one",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#installing-packages-continued",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#installing-packages-continued",
    "title": "Introduction to R",
    "section": "Installing Packages continued",
    "text": "Installing Packages continued\nThere are a couple of ways to install packages into R, but the easiest way is just to install them through the console and load them in like this:\n\nInstall the package.\n\nThis downloads the required code from the web repository (by default this should be “https://cran.rstudio.com/”). Packages may require other packages to work, therefore more than one package may downloaded.\n\n\n\ninstall.packages('packagename')\n\n\nLoad the package into R.\n\nOnce the packages is downloaded, it then needs to be loaded into the R environment for use. Downloading the package does not make the commands available, it must be loaded into R first.\n\n\n\nlibrary(packagename)",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#try-installing-a-package",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#try-installing-a-package",
    "title": "Introduction to R",
    "section": "Try installing a package!",
    "text": "Try installing a package!\n\nTry and install the tidyverse and load it\n\n\n\nInstall packages from CRAN:\n\ninstall.packages('tidyverse')\n\nLoad a package:\n\nlibrary(tidyverse)",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#working-directories",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#working-directories",
    "title": "Introduction to R",
    "section": "Working Directories",
    "text": "Working Directories\n\nFiles you save have to go somewhere on your computer\nR needs to know where is should save stuff\nThis can be done in two main ways:\n\nAbsolute paths (full system path)\nRelative paths (path relative to other directories/files)\n\nExamples:\n\nC:/Users/matt/Dropbox/Teaching/Lesson 1 - Into to R/ - typical absolute path on Windows\n03_data/my_data.csv - relative path from project root",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#working-directories---continued",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#working-directories---continued",
    "title": "Introduction to R",
    "section": "Working Directories - continued",
    "text": "Working Directories - continued\n\nUse getwd() and setwd() to manage your working directory.\n\nsetwd(\"C:/path/to/directory\")\n\nStrongly suggest avoiding changing working directory in scripts, try to keep to relative file paths, as the absolute path is unique to your environment\n\nIf you do have absolute paths, the code won’t run on another computer and the code will break!\n\n\n\n\nCheck out the here package to help manage relative file paths\n\nIt helps figure out the project root based on the presence of a .Rproj file and/or a .git directory\n\n\n\nhere::here()\n\n[1] \"/Users/mateusbernardo-harrington/UK Dementia Research Institute Dropbox/Gabriel Bernardo Harrington/backup/teaching/bioinformatic_masters_r_lectures\"",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#importing-data",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#importing-data",
    "title": "Introduction to R",
    "section": "Importing Data",
    "text": "Importing Data\n\nData can be in many formats (comma separated file (.csv), Excel (.xlsx), tab delimited (.tsv or .txt))\nThe function you use to read in data will depend on the format of the file\n\n# base R csv - note using here for relative paths!\ndata &lt;- read.csv(here::here(\"03_data/data.csv\"))\n# tab and space delimited\ndata &lt;- read.table(\"data.tsv\", sep = \"\\t\")\ndata &lt;- read.table(\"data.txt\", sep = \" \")\n\n# Excel\nlibrary(readxl) # don't forget to install the package if needed!\ndata &lt;- read_excel(\"data.xlsx\", sheet = 1)",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#importing-data---continued",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#importing-data---continued",
    "title": "Introduction to R",
    "section": "Importing Data - continued",
    "text": "Importing Data - continued\n\nOther considerations:\n\nDoes the data have column headers\nAre there leading lines to be skipped?\nIs there a non-standard identifier for missing data (NA, -9, -, etc.)\nWhat character is used as a decimal point?\n\nHow can we check the arguments we could add to these functions?\nNote that there are other packages for reading in data that can be more performant, and have different default behaviour (e.g. readr or data.table)\nThis can be particularly important to consider when reading in larger files",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#exporting-data",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#exporting-data",
    "title": "Introduction to R",
    "section": "Exporting Data",
    "text": "Exporting Data\n\nYou’ll likely want to save the data you’ve been working with at some point\nSimilarly to importing data, you’ll use different functions depending on the format you want to save to\n\ndf &lt;- mtcars # build in dataframe in R\n\n# Save to csv\nwrite.csv(\n  df,\n  here::here(\"03_data/mydata.csv\"),\n  row.names = FALSE,\n  quote = FALSE\n)\n\n# Save to tsv\nwrite.table(df, here::here(\"03_data/mydata.tsv\"), sep = \"\\t\")\n\nUse row.names = FALSE and quote = FALSE for better formatting.",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "01_intro_to_r/MET581_lecture_01_slides.html#additional-resources",
    "href": "01_intro_to_r/MET581_lecture_01_slides.html#additional-resources",
    "title": "Introduction to R",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nPosit Cheatsheets\n\nCheatsheets for various packages and RStudio itself (by developers of RStudio)\n\nFree online book R for Data Science\nThese slides and the workshop can be found on the website here:",
    "crumbs": [
      "Home",
      "Introduction in R",
      "Slides"
    ]
  },
  {
    "objectID": "02_explore_r/MET581-Lecture-02-Explore-R-Homework.html",
    "href": "02_explore_r/MET581-Lecture-02-Explore-R-Homework.html",
    "title": "MET581-Lecture-02-Expore-R-homework",
    "section": "",
    "text": "Quarto is a document format that allows you to create and render documents in multiple formats including HTML, PDF, and MS Word. For more details on using Quarto, see the Quarto website. When you render this document, it will generate output that includes both the content and the results of any embedded R code chunks. You can embed an R code chunk like this:\n\nsummary(cars)\n\nThis will display a summary of the cars dataset like shown below:\n\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nFor your homework, you will answer the questions below using Quarto. Make sure to include both the code and results in your knitted PDF or html file.\n\n\n\n\nUse Quarto to write a paragraph explaining the tidyverse concept. Your paragraph should include:\n\n\nExample code\nInline code\nBlockquotes\nLists\nBold or italic text\n\n\nCreate a tibble with columns labeled: name, age, height, gender. Your tibble should contain at least 13 rows of data.\n\n2a: Use tibble code to select the data for row 4.\n2b: Retrieve the height of a person based on their name.\n2c: Calculate the ratio of men to women.\n2d: Calculate the average age and the standard deviation.\n\nTurn the dataset iris into a tibble.\nWhy might tibbles be preferable to traditional R data frames for data scientists?\nList some of the most important options provided by the readr package.\nImport the pheno_unclean.txt file (find it here using readr.\nIdentify any errors in the pheno_unclean.txt file using R code.",
    "crumbs": [
      "Home",
      "Explore R",
      "Homework"
    ]
  },
  {
    "objectID": "02_explore_r/MET581-Lecture-02-Explore-R-Homework.html#overview",
    "href": "02_explore_r/MET581-Lecture-02-Explore-R-Homework.html#overview",
    "title": "MET581-Lecture-02-Expore-R-homework",
    "section": "",
    "text": "Quarto is a document format that allows you to create and render documents in multiple formats including HTML, PDF, and MS Word. For more details on using Quarto, see the Quarto website. When you render this document, it will generate output that includes both the content and the results of any embedded R code chunks. You can embed an R code chunk like this:\n\nsummary(cars)\n\nThis will display a summary of the cars dataset like shown below:\n\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nFor your homework, you will answer the questions below using Quarto. Make sure to include both the code and results in your knitted PDF or html file.",
    "crumbs": [
      "Home",
      "Explore R",
      "Homework"
    ]
  },
  {
    "objectID": "02_explore_r/MET581-Lecture-02-Explore-R-Homework.html#questions",
    "href": "02_explore_r/MET581-Lecture-02-Explore-R-Homework.html#questions",
    "title": "MET581-Lecture-02-Expore-R-homework",
    "section": "",
    "text": "Use Quarto to write a paragraph explaining the tidyverse concept. Your paragraph should include:\n\n\nExample code\nInline code\nBlockquotes\nLists\nBold or italic text\n\n\nCreate a tibble with columns labeled: name, age, height, gender. Your tibble should contain at least 13 rows of data.\n\n2a: Use tibble code to select the data for row 4.\n2b: Retrieve the height of a person based on their name.\n2c: Calculate the ratio of men to women.\n2d: Calculate the average age and the standard deviation.\n\nTurn the dataset iris into a tibble.\nWhy might tibbles be preferable to traditional R data frames for data scientists?\nList some of the most important options provided by the readr package.\nImport the pheno_unclean.txt file (find it here using readr.\nIdentify any errors in the pheno_unclean.txt file using R code.",
    "crumbs": [
      "Home",
      "Explore R",
      "Homework"
    ]
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework-Answers.html",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework-Answers.html",
    "title": "MET581 Lecture 03 Homework Answers",
    "section": "",
    "text": "This document contains all questions for the lecture ‘Wrangling Data 1’. Please create a Quarto document containing all text, code and output used to answer the questions."
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework-Answers.html#tidy-data",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework-Answers.html#tidy-data",
    "title": "MET581 Lecture 03 Homework Answers",
    "section": "1 Tidy Data",
    "text": "1 Tidy Data\n\nWhat 3 main rules do we need to follow for data to be in tidy format?\n\nThe 3 main rules for tidy data are:\n- Each observation must have its own row\n- Each variable must have its own column\n- Each value must have its own cell\n\nLoad readr and use it to read in the dataset at “http://stat405.had.co.nz/data/pew.txt”. You should have a tibble with 18 rows and 11 columns showing data on the relationship between religion and income in the US. Is the data in tidy format? Explain why.\n\nNo, it’s not in tidy format.\n- This is because it has values as column names. For example, \"&lt;$10k\" is a value but has\n  been listed as a column header.\n- A tidy dataset would instead have three columns called religion, income and frequency\n\nLook at the paper by Hadley Wickham describing tidy data. Section 3 outlines how to turn messy datasets into tidy ones. Briefly state the 5 most common problems that make a dataset messy and the solutions Hadley proposes.\n\nThe 5 most common problems, followed by their solutions are:\n- Column headers are values, not variable names - solution is to *melt* the dataframe\n- Multiple variables are stored in one column - solution is to *separate* data into new columns\n- Variables are stored in both rows and columns - solutions is to *cast* data after melting\n- Multiple types of observational units are stored in the same table - solution is to move\n  observational units to separate datasets\n- A single observational unit is stored in multiple tables - add columns for file names\n  and *merge* datasets"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework-Answers.html#dplyr",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Homework-Answers.html#dplyr",
    "title": "MET581 Lecture 03 Homework Answers",
    "section": "2 dplyr",
    "text": "2 dplyr\nThese exercises require use of the dplyr verbs we have learned so far. Some questions will require small variations on these that you need to look up; you may find it especially useful to check the documentation on scoped variants of the standard verbs, or the recent equivalents in pick and across (we will review both options in the next session). All tasks that require use of more than one verb should be done using the pipe. Show the output from each question in a new cell, where a single paragraph of pipes is used to answer each question.\nIf you’re struggling with a question that requires a lot of steps, try to sketch out the bones of the code before filling in the details. For instance, if you’re asked to shown the mean of GDP in 1990, you might first write out the basic order of things, like so:\n\ngapminder |&gt;\n  filter() |&gt;\n  summarise()\n\nread in the dataset at ‘http://stat405.had.co.nz/data/weather.txt’ using readr\n\nweather &lt;- read_tsv('http://stat405.had.co.nz/data/weather.txt')\n\n\nconvert all column names to title case, except ‘id’, which should be all capitals\n\n\nweather |&gt;\n  rename_all(str_to_title) |&gt;\n  rename(ID = Id)\n\n# could also have selected everything but 'id' for the first rename\n# this isn't necessary though\nweather |&gt;\n  rename_at(vars(-id), funs(str_to_title)) |&gt;\n  rename(ID = id)\n\n\n# as above, but using rename_with\nweather |&gt;\n  rename_with(str_to_title, everything()) |&gt;\n  rename(ID = Id)\n\n\nchoose columns ID, Year, Month and d1 to d10. Use num_range to select the columns d1:d10\n\n\nweather |&gt;\n  select(id, year, month, num_range('d', 1:10))\n\nread in the dataset at ‘https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv’ using read_csv(). This data contains weights and sleep times for mammals. You should have 11 columns and 83 rows\n\nsleep &lt;- read_csv('https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv')\n\n\nselect the name and genus columns, and all columns ending with ‘wt’. Remove all rows with missing values,then print the first 20 rows from the final dataframe.\n\n\nsleep |&gt;\n  select(name, genus, ends_with('wt')) |&gt;\n  na.omit() |&gt;\n  print(n = 20)\n\n\nshow the columns name, order, sleep_total and awake for all animals in the order ‘Artiodactyla’, sorted by descending sleep time.\n\n\nsleep |&gt;\n  filter(order == 'Artiodactyla') |&gt;\n  select(name, order, sleep_total, awake) |&gt;\n  arrange(desc(sleep_total))\n\n\nafter removing those missing conservation status, show the mean for all columns beginning with ‘sleep’, grouped by order. Include a count of the number of animals in each grouping.\n\n\n# this is one of the most concise answers, but students may not have got it\nsleep |&gt;\n  filter(!is.na(conservation)) |&gt;\n  group_by(order) |&gt;\n  summarise_at(vars(starts_with('sleep')), funs(n(), mean(., na.rm=TRUE)))\n\n# people may have separated out the selecting and the summarising\n# if they did use it, they need the 'na.rm = TRUE' bit.\nsleep |&gt;\n  filter(!is.na(conservation)) |&gt;\n  group_by(order) |&gt;\n  select(order, starts_with('sleep')) |&gt;\n  summarise_all(funs(n(), mean(., na.rm = TRUE)))\n\n\n# something like this is also acceptable, but a bit more work\nsleep |&gt;\n  filter(!is.na(conservation)) |&gt;\n  group_by(order) |&gt;\n  summarise(N_Animals = n(),\n            Mean_Sleep = mean(sleep_total, na.rm = TRUE),\n            Mean_REM = mean(sleep_rem, na.rm = TRUE),\n            Mean_Cycle = mean(sleep_cycle, na.rm = TRUE))\n\n\n# or use across\nsleep |&gt;\n  filter(!is.na(conservation)) |&gt;\n  group_by(order) |&gt;\n  summarise(across(starts_with('sleep'), list(count = ~n(), mean = ~mean(., na.rm = TRUE))))\n\n\ndoubles should never be compared using ==. Instead, use dplyr::near() to keep rows with ‘sleep_total’ equal to 9.4 and select columns containing the string ‘or’ anywhere in their names\n\n\n# make sure they have used near() and not '=='\n# make sure used contains() and not starts_with() or ends_with()\nsleep |&gt;\n  filter(dplyr::near(sleep_total, 9.4)) |&gt;\n  select(contains('or'))\n\n\nuse dplyr::coalesce to replace all missing values in the column ‘conservation’ with the string ‘unknown’. Then use dplyr’s between function to filter for rows with sleep_rem between 1 and 2.5 and show the total number of animals and number of distinct genera, using summarise(), n() and n_distinct(), after grouping by conservation status. Name the new summary columns ‘animals’ and ‘genera’.\n\n\n# need to use between() and coalesce()\nsleep |&gt;\n  mutate(conservation = coalesce(conservation, 'unknown')) |&gt;\n  filter(dplyr::between(sleep_rem, 1, 2.5)) |&gt;\n  group_by(conservation) |&gt;\n  summarise(animals = n(),\n            genera = n_distinct(genus))\n\nLoad the starwars dataset\n\ndata(\"starwars\")\n\n\nfilter hair_color to keep those rows containing brown (including combinations like ‘brown, grey’) or eye_color that is brown only, then select the column range from ‘name’ to ‘eye_color’, and the columns ‘gender’, ‘homeworld’ and ‘species.’ Next, create a new boolean column called ‘male_brunette’, which is TRUE only for males with exclusively brown hair. Sort by descending height and re-order the columns, using select() and everything(), to put ‘male_brunette’ directly after the ‘name’ column. Finally, replace underscores in the column names with spaces, change all instances of ‘color’ to ‘colour’, and make all column names title case using str_to_title(). Print the top 5 rows only.\n\n\n# make sure the filter uses grepl (or str_detect) for hair colour, but '==' for eye colour\n# need to have used an or (|) for the filter, not an and (& or ,)\n# select could also have been done by excluding the missing columns with '-'\nstarwars |&gt;\n  filter(grepl('brown', hair_color) | eye_color == 'brown') |&gt;\n  select(name:eye_color, gender, homeworld, species) |&gt;\n  mutate(male_brunette = ifelse(gender == 'male' & hair_color == 'brown', TRUE, FALSE)) |&gt;\n  arrange(desc(height)) |&gt;\n  select(name, male_brunette, everything()) |&gt;\n  rename_all(str_replace, '_', ' ') |&gt;\n  rename_all(str_replace, 'color', 'colour') |&gt;\n  rename_all(str_to_title) |&gt;\n  print(n = 5)\n\n\n# by dropping the scoped variant (rename_all) and using the new rename_with\nstarwars |&gt;\n  filter(grepl('brown', hair_color) | eye_color == 'brown') |&gt;\n  select(name:eye_color, gender, homeworld, species) |&gt;\n  mutate(male_brunette = ifelse(gender == 'male' & hair_color == 'brown', TRUE, FALSE)) |&gt;\n  arrange(desc(height)) |&gt;\n  select(name, male_brunette, everything()) |&gt;\n  rename_with(~ str_replace(., '_', ' ')) |&gt;\n  rename_with(~ str_replace(., 'color', 'colour')) |&gt;\n  rename_with(str_to_title) |&gt;\n  print(n = 5)\n\n\nhow many rows are missing information for each column? Break it down by species by using group_by() and summarise_all()\n\n\n# older syntax (still acceptable and common, but deprecated)\nstarwars |&gt;\n  group_by(species) |&gt;\n  summarise_all(funs(sum(is.na(.))))\n\n\n# using across\nstarwars |&gt;\n  group_by(species) |&gt;\n  summarise(across(everything(), ~ sum(is.na(.))))"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html",
    "title": "MET581 Lecture 03",
    "section": "",
    "text": "There are 3 basic principles for tidy data:\n\nEach observation must have its own row\nEach variable must have its own column\nEach value must have its own cell\n\nWe should also keep to one type of observational unit per table"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#setup",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#setup",
    "title": "MET581 Lecture 03",
    "section": "3.1 Setup",
    "text": "3.1 Setup\nMake sure you have all of the following installed and loaded to follow along:\n\ngapminder\ndplyr\nstringr\nnycflights13\n\nIn addition, you may want to install the following to explore in your own time:\n\ndevtools (for installing packages from github)\nskimr (for fast and useful summaries of data)"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#dplyrselect",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#dplyrselect",
    "title": "MET581 Lecture 03",
    "section": "3.2 dplyr::select()",
    "text": "3.2 dplyr::select()\nThere are lots of helper functions that work with select, e.g.:\n\nstarts_with(“Hap”) -&gt; ALL columns whose name starts with “Hap”\nends_with(“ppy”) -&gt; ALL columns whose name ends with “ppy”\ncontains(“app”) -&gt; ALL columns whose name contains “app”\nmatches(“(SNP|CHR)”) -&gt; ALL columns who name match a regular expression\nnum_range(“x”, 1980:1983) -&gt; ALL columns named x1980, x1981, x1982, and x1983\none_of(char_vector) -&gt; ALL columns who name appears in character vector (char_vector)\n\n\n3.2.1 practice answers\nUsing gapminder\n\nSelect the column range from country to population, but exclude continent\n\n\nselect(gapminder, country:pop, -continent)\n\n\n  \n\n\n\nUsing starwars\n\nload with data(\"starwars\")\nSelect name, height and all columns which end in the word ‘color’\n\n\nselect(starwars, height, ends_with('color'))\n\n\n  \n\n\n\nUsing flights\n\nload with library(nycflights13)\nSelect all columns in the vector (‘year’, ‘month’, ‘day’, ‘carrier’, ‘flight’, ‘dest’)\n\n\ncols_to_select &lt;- c('year', 'month', 'day', 'carrier', 'flight', 'dest')\nselect(flights, one_of(cols_to_select))\n\n\n  \n\n\n\nNote that we could have just used select(flights, cols_to_select), without including one_of(). However, if there was a column name in the vector cols_to_select that wasn’t present in our dataset, we would get an error, whereas the code above would still work correctly but give a warning. Stick to using one_of() where possible.\n\n\n3.2.2 extra practice answers\nUsing gapminder\n\nSelect country, year, and population columns from gapminder\n\n\n# either of the following options are an acceptable answer\nselect(gapminder, country, year, pop)\n\n\n  \n\n\nselect(gapminder, -continent, -lifeExp, -gdpPercap)\n\n\n  \n\n\n\nUsing starwars\n\nSelect only the columns stored as characters (tip: use select_if())\n\n\n# notice that you use is.character instead of is.character() i.e. the brackets are omitted\n# also notice that we are using is.character, which tests to see if each column is of the\n# type character. Using as.character() would fail, becuase this is used for converting to\n# character, not testing for it\nselect_if(starwars, is.character)\n\n\n  \n\n\n\nUsing flights\n\nSelect all columns ending in ‘time’, but exclude those starting with ‘sched’\n\n\n# the important thing to note here is that we can combine more complex operations\n# in a single select statement\nselect(flights, ends_with('time'), -starts_with('sched'))"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#dplyrfilter",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#dplyrfilter",
    "title": "MET581 Lecture 03",
    "section": "3.3 dplyr::filter()",
    "text": "3.3 dplyr::filter()\nMultiple arguments to filter can be combined using commas. This is equivalent to using &, which is the AND operator. It requires rows to meet all the conditions you give, and is a stringent filter. By contrast, using |, the OR operator, matches rows that meet one or more of your conditions. This is a much looser filter. You need to be careful that you’re using the operator you want, and don’t forget that a comma means AND, not OR.\n\n3.3.1 practice answers\nUsing gapminder\n\nKeep only rows where continent is Americas or Europe\n\n\n# you can either write out each filter, separated by the OR operator, or combine\n# the two using %in%\n# %in% is commonly used. It allows you to check if something, like a string, is\n# present in a vector\n# do NOT use == with a vector - it will give incorrect results\nfilter(gapminder, continent == \"Americas\" | continent == \"Europe\")\n\n\n  \n\n\nfilter(gapminder, continent %in% c(\"Americas\", \"Europe\"))\n\n\n  \n\n\n\n\nKeep only rows where country is Canada or Australia and the year is before 1974\n\n\nfilter(gapminder, country %in% c('Canada', 'Australia'), year &lt; 1974L)\n\n\n  \n\n\n\nUsing starwars\n\nKeep only the rows where name contains ‘light’ or eye_color contains ‘blue’ using filter() and grepl()\n\n\nfilter(starwars, grepl('light', name) | grepl('blue', eye_color))\n\n\n  \n\n\n\n\n\n3.3.2 extra practice answers\nUsing gapminder\n\nKeep only the rows with life expectancy less than 35\n\n\nfilter(gapminder, lifeExp &lt; 35)\n\n\n  \n\n\n\nUsing starwars\n\nRemove rows with brown hair colour\n\n\n# the second option will exclude those with 'brown, blonde',\n# whereas the first option will not\n# removes everyone with exclusively brown hair\nfilter(starwars, hair_color != 'brown')\n\n\n  \n\n\n# removes everyone containing the word 'brown' in their hair colour\nfilter(starwars, !grepl('brown', hair_color))\n\n\n  \n\n\n\n\nKeep females with brown or blue eyes\n\n\n# matching females with exclusively blue or exclusively brown eyes\nfilter(starwars, gender == 'female', eye_color %in% c('blue', 'brown'))\n\nWarning in `[&lt;-.data.frame`(`*tmp*`, is_list, value = list(`12` = \"&lt;&gt;\", :\nreplacement element 1 has 1 row to replace 0 rows\n\n\nWarning in `[&lt;-.data.frame`(`*tmp*`, is_list, value = list(`12` = \"&lt;&gt;\", :\nreplacement element 2 has 1 row to replace 0 rows\n\n\nWarning in `[&lt;-.data.frame`(`*tmp*`, is_list, value = list(`12` = \"&lt;&gt;\", :\nreplacement element 3 has 1 row to replace 0 rows\n\n\n\n  \n\n\n# matching females with eyes that contain brown or blue\n# e.g. 'brown, green' is matched too\nfilter(starwars, gender == 'female', grepl('brown|blue', eye_color))\n\nWarning in `[&lt;-.data.frame`(`*tmp*`, is_list, value = list(`12` = \"&lt;&gt;\", :\nreplacement element 1 has 1 row to replace 0 rows\n\n\nWarning in `[&lt;-.data.frame`(`*tmp*`, is_list, value = list(`12` = \"&lt;&gt;\", :\nreplacement element 2 has 1 row to replace 0 rows\n\n\nWarning in `[&lt;-.data.frame`(`*tmp*`, is_list, value = list(`12` = \"&lt;&gt;\", :\nreplacement element 3 has 1 row to replace 0 rows"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#dplyrarrange",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#dplyrarrange",
    "title": "MET581 Lecture 03",
    "section": "3.4 dplyr::arrange()",
    "text": "3.4 dplyr::arrange()\n\n3.4.1 practice answers\nUsing gapminder\n\narrange by country then continent\n\n\narrange(gapminder, country, continent)\n\n\n  \n\n\n\n\narrange by country then descending year\n\n\narrange(gapminder, country, desc(year))"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#dplyrmutate",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#dplyrmutate",
    "title": "MET581 Lecture 03",
    "section": "3.5 dplyr::mutate()",
    "text": "3.5 dplyr::mutate()\n\n3.5.1 practice answers\nUsing starwars\n\nAdd a new column called ‘BMI’, created using height * mass\n\n\nmutate(starwars, BMI = height * mass)\n\n\n  \n\n\n\n\nDichotomise height into the strings ‘tall’ and ‘short’ and assign as factor to ‘height_dichot’ (tip: use ifelse())\n\n\n# an arbitrary cutoff for height was chosen in order to\n# create the two categories\nmutate(\n  starwars,\n  height_dichot = as.factor(ifelse(height &lt; 160, 'Short', 'Tall'))\n)\n\n\n  \n\n\n\n\n\n3.5.2 extra practice answers\nUsing starwars\n\nMake the values in hair_color, skin_color, eye_color and gender Title Case (tip: use str_to_title() from stringr)\n\n\n# Title Case Is Where Each Word Is Capitalised, As Done In This Sentence\n# it's not useful for analysis, but can make our data look a bit neater\n# when we present it to others\n# here we are modifying the values in a column to be title case,\n# which is what mutate does\n# to instead modify the column names to be title case, use the rename()\n# function from dplyr\n# the long version is:\nmutate(\n  starwars,\n  hair_color = str_to_title(hair_color),\n  eye_color = str_to_title(eye_color),\n  skin_color = str_to_title(skin_color),\n  gender = str_to_title(gender)\n)\n\n\n  \n\n\n# a cleaner version is:\nstarwars |&gt;\n  mutate_at(\n    vars(one_of(c('hair_color', 'skin_color', 'eye_color', 'gender'))),\n    funs(str_to_title)\n  )\n\n\n  \n\n\n\nUsing flights\n\nAssume ‘EWR’ is the code for unknown airport. Recode it to NA in columns ‘origin’ and ‘dest’ using na_if()\n\n\nmutate(flights, origin = na_if(origin, 'EWR'), dest = na_if(dest, 'EWR'))"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#pipes",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#pipes",
    "title": "MET581 Lecture 03",
    "section": "3.6 Pipes",
    "text": "3.6 Pipes\nPipes:\n\npass the information forward to the next verb\nare a really useful way of expressing a series of operations\nallow us to quickly see what is being done\nmean we focus on the verbs, not the nouns\n\nNative Pipes\n\nused to be in the magrittr package, then dplyr\nare now part of base R! (as of version 4.1.0)\nwe can use them with |&gt; (no need to load tidyverse)\nevery time you see |&gt; here, you could use %&gt;% instead (but load dplyr first)\nyou will still see %&gt;% in a lot of code in the wild, so it’s good to know both\nyou will need to use %&gt;% yourself if you’re forced to use an older version of R\n\n\n3.6.1 practice answers\nUsing starwars\n\nFilter for all rows that don’t contain NAs and select columns that are characters, then create a new boolean column called ‘hair_eye_mismatch’, which is TRUE for anyone with exclusively brown hair and blue eyes\n\n\nstarwars |&gt;\n  na.omit() |&gt;\n  select_if(is.character) |&gt;\n  mutate(\n    hair_eye_mismatch = ifelse(\n      hair_color == 'brown' & eye_color == 'blue',\n      TRUE,\n      FALSE\n    )\n  )\n\n\n  \n\n\n\n\n\n3.6.2 extra practice answers\nUsing flights - Show the carrier and flight number for flights with arrival delays greater than 10 and distances over 1000, sorted by descending distance\n\nflights |&gt;\n  filter(arr_delay &gt; 10, distance &gt; 1000) |&gt;\n  arrange(desc(distance)) |&gt;\n  select(carrier, flight)"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#dplyrgroup_by-and-dplyrsummarise",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#dplyrgroup_by-and-dplyrsummarise",
    "title": "MET581 Lecture 03",
    "section": "3.7 dplyr::group_by() and dplyr::summarise()",
    "text": "3.7 dplyr::group_by() and dplyr::summarise()\ngroup_by() doesn’t do much on its own, but by combining group_by() and summarise() we get so much more power! We can start to show summary statistics broken down by different groups, like the mean life expectancy per continent, all after applying whatever filters we want.\n\n# e.g.\ngapminder |&gt;\n  select(-pop) |&gt;\n  filter(continent == 'Oceania', year &gt; 1980L) |&gt;\n  arrange(desc(gdpPercap)) |&gt;\n  group_by(country) |&gt;\n  summarise(\n    n_years = n(),\n    Mean_Life_Exp = mean(lifeExp),\n    SD_Life_Exp = sd(lifeExp),\n    Max_GDP = max(gdpPercap)\n  )\n\n\n  \n\n\n\n\n3.7.1 practice\nUsing gapminder\n\nGet the median and standard deviation for gdpPercap\n\n\nsummarise(gapminder, mean_GDP = mean(gdpPercap), sd_GDP = sd(gdpPercap))\n\nUsing airquality - load with data(“airquality”)\n\nConvert to tibble, remove Month and Day, keep Temperatures above 60, then summarise Solar.R with number, mean, median and standard deviation\n\n\n# the airquality dataset is built-in to R, and can be loaded with data('airquality')\ndata(\"airquality\")\nairquality |&gt;\n  as_tibble() |&gt;\n  select(-Month, -Day) |&gt;\n  filter(Temp &gt; 60L) |&gt;\n  summarise(\n    n_obvs = n(),\n    Mean_solar = mean(Solar.R, na.rm = TRUE),\n    Median_solar = median(Solar.R, na.rm = TRUE),\n    SD_solar = sd(Solar.R, na.rm = TRUE)\n  )\n\n\n  \n\n\n\n\n\n3.7.2 extra practice\nUsing airquality\n\nSummarise the mean values for integer columns only using summarise_if() and is.integer\n\n\nairquality |&gt;\n  as_tibble() |&gt;\n  summarise_if(is.integer, mean, na.rm = TRUE)\n\n\n  \n\n\n\nUsing starwars\n\nWhat is the mean height and weight of all Droids? Include a count of how many droids there are\n\n\nstarwars |&gt;\n  filter(species == 'Droid') |&gt;\n  summarise(\n    N_droid = n(),\n    Mean_height = mean(height, na.rm = TRUE),\n    Mean_weight = mean(mass, na.rm = TRUE)\n  )\n\n\n  \n\n\n\n\nWe want to compare Humans from different planets. Show the number of people and their mean height and mass, broken down by homeworld then gender. Make sure you show all rows when printing by piping the last line into print(n = x), where x is a suitably high number of rows\n\n\nstarwars |&gt;\n  filter(species == 'Human') |&gt;\n  group_by(homeworld, gender) |&gt;\n  summarise(\n    N_people = n(),\n    Mean_height = mean(height, na.rm = TRUE),\n    Mean_weight = mean(mass, na.rm = TRUE)\n  ) |&gt;\n  print(n = 21)\n\n`summarise()` has grouped output by 'homeworld'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 20 × 5\n# Groups:   homeworld [15]\n   homeworld    gender    N_people Mean_height Mean_weight\n   &lt;chr&gt;        &lt;chr&gt;        &lt;int&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Alderaan     feminine         1        150         49  \n 2 Alderaan     masculine        2        190.        79  \n 3 Bespin       masculine        1        175         79  \n 4 Chandrila    feminine         1        150        NaN  \n 5 Concord Dawn masculine        1        183         79  \n 6 Corellia     masculine        2        175         78.5\n 7 Coruscant    feminine         1        167        NaN  \n 8 Coruscant    masculine        1        170        NaN  \n 9 Eriadu       masculine        1        180        NaN  \n10 Haruun Kal   masculine        1        188         84  \n11 Kamino       masculine        1        183         78.2\n12 Naboo        feminine         2        175         45  \n13 Naboo        masculine        3        179.        75  \n14 Serenno      masculine        1        193         80  \n15 Socorro      masculine        1        177         79  \n16 Stewjon      masculine        1        182         77  \n17 Tatooine     feminine         2        164         75  \n18 Tatooine     masculine        6        184.       100. \n19 &lt;NA&gt;         feminine         2        NaN        NaN  \n20 &lt;NA&gt;         masculine        4        193         89"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#other-really-useful-verbs-and-tools",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#other-really-useful-verbs-and-tools",
    "title": "MET581 Lecture 03",
    "section": "4.1 Other really useful verbs and tools",
    "text": "4.1 Other really useful verbs and tools\n\ndplyr::glimpse() instead of str()\nuse everything() to re-order columns\n\ne.g. select(starwars, new_column, everything()) can be used to make new_column the first column\n\nuse n_distinct() instead of length(unique())\n\nn_distinct() is commonly used in summarise() to see how many unique categories are in a column after filtering\n\ndplyr::rename(new_name = old_name) for renaming columns\nbe aware that dplyr::select_() and other variants exist for many of the main dplyr verbs\ndplyr::near() and dplyr::between()\n\nintegers can be compared with the equality operator ‘==’, e.g. 2 == 2\nhowever, doubles should never be compared this way because decimals are stored with finite precision\nthis mean means that while 2 == 2 is TRUE, sqrt(2) ^ 2 ==  2 evaluates to FALSE!\ninstead, dplyr::near(sqrt(2) ^ 2, 2) should be used if you have to check for equality using doubles\nwe can combine it with filter, e.g. filter(starwars, near(birth_year, 41.9))\ndplyr::between() can be used to select ranges with filter, e.g. filter(starwars, between(birth_year, 30, 60))\n\ncoalesce(), recode() and case_when() from dplyr\n\ncoalesce() lets you replace NAs, e.g. mutate(starwars, gender = coalesce(gender, 'unknown'))\nrecode() can be used to recode values in a tibble e.g. mutate(starwars, eye_color = recode(eye_color, 'brown' = 'maroon'))\nthis will change all instances of ‘brown’ in the eye_color column to be ‘maroon’ instead\ncase_when() is a good alternative to using nested ifelse() statements\n\ntibble::rownames_to_column() simply takes the row names (if present) and makes them a column\n\ne.g. data(mtcars) has cars as row names, and tibble::rownames_to_column(mtcars, 'cars') makes this into a column instead\n\n%&lt;&gt;%\n\na useful, but potentially dangerous, way of overwriting your original dataframe with your modified one\nit is generally not recommended, as code should be as explicit as possible while still being readable\ninstead, it is usually best to assign your dataset using new_df &lt;- old_df |&gt; select() |&gt; etc()"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#things-to-be-aware-of",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#things-to-be-aware-of",
    "title": "MET581 Lecture 03",
    "section": "4.2 Things to be aware of",
    "text": "4.2 Things to be aware of\n\nPackages can have functions with the same name - sometimes it helps to be specific e.g. dplyr::select()\nWe can now used the conflicted package to be more explicit about this!\nSee the introductory blog post from Hadley here\nFiltering using grepl() is better done using stringr’s str_detect() (introduced tomorrow)\nstringr (tomorrow) combined with dplyr (more tomorrow) and maggritr will cover a lot of your everyday needs"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#should-we-always-use-dplyr",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#should-we-always-use-dplyr",
    "title": "MET581 Lecture 03",
    "section": "4.3 Should we always use dplyr?",
    "text": "4.3 Should we always use dplyr?\nWhat if:\n\nyou have a single operation? or 20?\n\na single operation doesn’t need the pipe as it is just a one-liner\nif you have lots of lines, it may be better to split up your code in the chunks of around ten lines\nthis is because as the number of lines increases, so does the likelihood you will make a mistake!\nsplitting it up at checkpoints allows you to check any important intermediate steps have worked\n\nthe flow of operations isn’t linear?\n\nyou might not always be doing operations sequentially, in which case the pipe is not appropriate\n\nyou need to inspect an intermediate step?\n\nas mentioned above, it is often best to split up code to check intermediate steps, for your own sanity!\n\nspeed is more important to you than readability?\n\ndplyr is fast, expressive and readable, but some other packages are faster\nthe data.table package is faster for reading large datasets and manipulating them, though you might lose some readability\n\n\nBase R should also not be ignored. Some simple operations are shorter/cleaner in base R, like subsetting a single dataframe column by index."
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#homework",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#homework",
    "title": "MET581 Lecture 03",
    "section": "4.4 Homework",
    "text": "4.4 Homework\n\nQuarto file\nRegex practice before tomorrow\n\nSuggested Reading\n\nR for Data Science 2e, chapter 4\nThe docs and vignette at browseVignettes(package = \"dplyr\")"
  },
  {
    "objectID": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#the-tidyverse-life",
    "href": "03_wrangling_data_1/MET581-Lecture-03-Wrangling-Data-1-dplyr-Lecture-Notes.html#the-tidyverse-life",
    "title": "MET581 Lecture 03",
    "section": "4.5 The Tidyverse Life",
    "text": "4.5 The Tidyverse Life\nIf you really want to be proficient with the tidyverse packages, you need to practice. Pick a dataset on something you’re interested in and try to answer questions you have - google dataset search is your friend. That should be your priority. After you’ve practised a lot and you feel comfortable, you might want even more reading and learning. Here are some starters:\n\nHadley’s Tidy Data paper\nPosit (RStudio) Cheat Sheets\n\nIf you really can’t get enough tidyverse in your life:\n\nTidyverse blog\nfollow @hadleywickham, @posit_pbc, @tidyverse and #rstats"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework-Answers.html",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework-Answers.html",
    "title": "MET581 Lecture 04 Homework Answers",
    "section": "",
    "text": "This document contains all questions for lesson 4. Please create a quarto document containing all text, code and output used to answer the questions."
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework-Answers.html#explain-how-escapes-work-in-r.",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework-Answers.html#explain-how-escapes-work-in-r.",
    "title": "MET581 Lecture 04 Homework Answers",
    "section": "1 1. Explain how escapes work in R.",
    "text": "1 1. Explain how escapes work in R.\nAnything along the lines of:\n\nyou need to escape the string and the regex within R function. Students may also have written along the lines of ‘You need to use \\\\ for each escape because of the use of special characters (eg a backslash itself \\)’."
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework-Answers.html#list-and-describe-the-tidyverse-commands-used-to-join-two-datasets-together.",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework-Answers.html#list-and-describe-the-tidyverse-commands-used-to-join-two-datasets-together.",
    "title": "MET581 Lecture 04 Homework Answers",
    "section": "2 2. List and describe the tidyverse commands used to join two datasets together.",
    "text": "2 2. List and describe the tidyverse commands used to join two datasets together.\nleft_join :\n\nAll rows from dataset1\nAll columns from dataset1 and dataset2\nIf a row exists only in dataset1, data is retained.\nIf a row exists only in dataset2, data is not retained.\n\nright_join:\n\nall rows from dataset2\nall columns from dataset1 and dataset2\nIf a row exists only in dataset1, data is not retained.\nIf a row exists only in dataset2, data is retained.\n\ninner_join:\n\nOnly rows that exist in dataset1 and dataset2\n\nfull_join:\n\nAll rows in dataset1 and dataset2\nJoining with missing or duplicate keys\nIf data is missing from one dataset but is in the other, depending on the type of join you are performing, this can result in missing data (NA values).\n\nsemi_join(x, y):\n\nkeeps all observations in x that have a match in y\n\nanti_join(x, y):\n\ndrops all observations in x that have a match in y"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework-Answers.html#load-the-nycflights13-package-and-join-the-datasets-flights-and-airlines-together-selecting-only-the-columns-year-month-day-hour-origin-tailnum-and-carrier-from-flights.-can-you-do-the-same-but-using-the-mutate-function-instead",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework-Answers.html#load-the-nycflights13-package-and-join-the-datasets-flights-and-airlines-together-selecting-only-the-columns-year-month-day-hour-origin-tailnum-and-carrier-from-flights.-can-you-do-the-same-but-using-the-mutate-function-instead",
    "title": "MET581 Lecture 04 Homework Answers",
    "section": "3 3. Load the nycflights13 package and join the datasets flights and airlines together, selecting only the columns: year, month, day, hour, origin, tailnum and carrier from flights. Can you do the same but using the mutate() function instead?",
    "text": "3 3. Load the nycflights13 package and join the datasets flights and airlines together, selecting only the columns: year, month, day, hour, origin, tailnum and carrier from flights. Can you do the same but using the mutate() function instead?\n\n# one example:\nflights2 &lt;- flights %&gt;% \n  select(year:day, hour, origin, tailnum, carrier) %&gt;%\n  left_join(airlines, by = \"carrier\")\n\n# part 2\nflights3 &lt;- flights %&gt;%\n  select(year:day, hour, origin, tailnum, carrier) %&gt;%\n  mutate(name = airlines$name[match(carrier, airlines$carrier)])"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework-Answers.html#in-the-starwars-dataset-and-in-one-command-add-two-new-columns",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Homework-Answers.html#in-the-starwars-dataset-and-in-one-command-add-two-new-columns",
    "title": "MET581 Lecture 04 Homework Answers",
    "section": "4 4. In the starwars dataset and in one command, add two new columns:",
    "text": "4 4. In the starwars dataset and in one command, add two new columns:\n\none column that converts the name column to lower case\none column that converts the eye_colour to uppercase\n\n\n# one example:\nstarwars_mutated &lt;- starwars %&gt;%\n  mutate(name_lower = str_to_lower(name),\n         eye_color_upper = str_to_upper(eye_color))\n\n\nDownload the gene annotation file from the NCBI found here\n\nunzip the file and load in NCBI37.3.gene.loc into R\n\nadd the column headers: Entrez_Gene_ID, CHR, BP_START, BP_END, STRAND, GENE_NAME\nHow many Genes are on the positive strand?\nHow many Genes begin and end with a letter?\n\n\n# using readr to read the file\n# note that we haven't correctly handled chromosomes, which needs to be specified in col_types\ntest &lt;- readr::read_tsv(\n  \"./data/NCBI37.3/NCBI37.3.gene.loc\",\n  col_names = c(\"Entrez_Gene_ID\", \"CHR\", \"BP_START\" ,\"BP_END\", \"STRAND\", \"GENE_NAME\"))\n\n# using data.table to read the file\ntest &lt;- fread(\"./data/NCBI37.3/NCBI37.3.gene.loc\",header= F)\nsetnames(test,c(\"Entrez_Gene_ID\", \"CHR\", \"BP_START\" ,\"BP_END\", \"STRAND\", \"GENE_NAME\" ))\ntest &lt;- as_tibble(test)\n\n# How many Genes are on the positive strand? 9819\nsum(str_count(string = test$STRAND, pattern = \"\\\\+\"))\n\n# or with pipes\ntest %&gt;%\n  pull(STRAND) %&gt;%\n  stringr::str_count(pattern = \"\\\\+\") %&gt;%\n  sum()\n\n# How many genes begin and end with a letter?: 5016\nsum(str_count(string = test$GENE_NAME, pattern = \"^[a-zA-Z].*[a-zA-Z]$\"))\n\n# or with pipes again\ntest %&gt;%\n  pull(GENE_NAME) %&gt;%\n  stringr::str_count(pattern = \"^[a-zA-Z].*[a-zA-Z]$\") %&gt;%\n  sum()"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html",
    "title": "MET581 Lecture 04",
    "section": "",
    "text": "Install all the packages below if you don’t have them already\n\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"tidyr\")\ninstall.packages(\"stringr\")\ninstall.packages(\"magrittr\")\ninstall.packages(\"gapminder\")\ninstall.packages(\"nycflights13\")\n\nThen make sure everything is loaded. The datasets we’ll use today are loaded with the packages, apart from the starwars dataset which will need loading as data('starwars').\n\n\nToday we’re going to cover some more ground on using the tidyverse to get data into the required format. The aims are to work through:\n\nReshaping data with the tidyr package\nData wrangling using the dplyr package\nString manipulation using the stringr package\n\n\n\n\n\nintroduce wide and long formats\nbegin converting between wide and long data\njoin data frames together with dplyr\nintroduce manipulating data with strings in stringr"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#aim-of-the-lecture",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#aim-of-the-lecture",
    "title": "MET581 Lecture 04",
    "section": "",
    "text": "Today we’re going to cover some more ground on using the tidyverse to get data into the required format. The aims are to work through:\n\nReshaping data with the tidyr package\nData wrangling using the dplyr package\nString manipulation using the stringr package"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#learning-objectives",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#learning-objectives",
    "title": "MET581 Lecture 04",
    "section": "",
    "text": "introduce wide and long formats\nbegin converting between wide and long data\njoin data frames together with dplyr\nintroduce manipulating data with strings in stringr"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#basic-organisation",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#basic-organisation",
    "title": "MET581 Lecture 04",
    "section": "2.1 Basic organisation",
    "text": "2.1 Basic organisation\n\nBy now there should be some structure to your work\nThis might be R scripts or literate programming (Quarto files)\nIt’s worth creating a new project for each class, and a new .qmd file for each homework\nTest in the console to build up parts of a query and transfer to the .qmd file"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#scoped-verbs-vs.-pick-and-across",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#scoped-verbs-vs.-pick-and-across",
    "title": "MET581 Lecture 04",
    "section": "2.2 Scoped verbs vs. pick and across",
    "text": "2.2 Scoped verbs vs. pick and across\n\nWe mainly talked about applying functions to individual columns\nBut we often want to apply functions to multiple columns\nWe can use pick() and across() to do this\nThe scoped variants of dplyr verbs like select_if() have been superseded (but you will see them everywhere!)"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#pick-in-masked-environments",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#pick-in-masked-environments",
    "title": "MET581 Lecture 04",
    "section": "2.3 pick() in masked environments",
    "text": "2.3 pick() in masked environments\n\nin functions like mutate(), summarise(), and group_by() we can refer to columns directly by their names instead of needing quotation marks - why is this?\nthey “mask” the overall data frame, meaning they provide direct access to column names without needing to explicitly reference the full data frame.\nyou will see this referred to as a “data masking environment” in the docs\npick() is like select(), but can refer to columns directly in a masked environment, e.g.\n\n\ngapminder |&gt;\n  mutate(rank = dense_rank(pick(lifeExp, gdpPercap)))"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#across-for-applying-functions",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#across-for-applying-functions",
    "title": "MET581 Lecture 04",
    "section": "2.4 across for applying functions",
    "text": "2.4 across for applying functions\n\nYou will cover functional programming in detail with purrr in later lectures\nFunctional programming refers to functions which can take other functions as arguments for iteration\nacross can be used in this way to apply functions to multiple columns\nsee the R4DS book, ch. 26 for more"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#across-for-applying-functions-1",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#across-for-applying-functions-1",
    "title": "MET581 Lecture 04",
    "section": "2.5 across for applying functions",
    "text": "2.5 across for applying functions\n\nfor example, we can apply a function to every column that’s an integer\nwith the more recent across syntax, this looks like:\n\n\ngapminder |&gt;\n  mutate(across(where(is.numeric), round))\n\n\nthis is equivalent to the now superseded “scoped variant” syntax:\n\n\ngapminder |&gt;\n  mutate_if(is.numeric, round)"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#across-for-applying-functions-2",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#across-for-applying-functions-2",
    "title": "MET581 Lecture 04",
    "section": "2.6 across for applying functions",
    "text": "2.6 across for applying functions\n\none of the more frustrating things is manually writing out calls to summarise\nwith across, the code fo doing something manual, like:\n\n\ngapminder |&gt;\n  summarise(\n    mean_lifeExp = mean(lifeExp),\n    mean_pop = mean(pop),\n    mean_gdpPercap = mean(gdpPercap)\n  )\n\n\n  \n\n\n\n\ncan now be simplified to:\n\n\ngapminder |&gt;\n  summarise(across(c(lifeExp, pop, gdpPercap), mean))"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#how-to-plan-a-query",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#how-to-plan-a-query",
    "title": "MET581 Lecture 04",
    "section": "2.7 How to plan a query",
    "text": "2.7 How to plan a query\nFor smaller queries:\n\nsketch out the the “bones” of the query with dplyr verbs\nstart with from the end and work backwards\n\nFor bigger queries:\n\nmanually or electronically sketch out the data flow\nthink about the order of operations (ETL)\nbreak the query up into manageable chunks if it’s long\ntest queries on a small batch of data e.g. read n_max=10 rows for testing"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#wide-to-long",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#wide-to-long",
    "title": "MET581 Lecture 04",
    "section": "3.1 wide to long",
    "text": "3.1 wide to long\nTo solve the ‘variables as columns’ problem, we use tidyr::pivot_longer()\n\ntable4a |&gt;\n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"cases\")\n\n\n  \n\n\n\nThis is particularly useful as we can also make use of dplyr::select() style notation:\n\ntable4a |&gt;\n  pivot_longer(-country, names_to = \"year\", values_to = \"cases\")"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#long-to-wide",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#long-to-wide",
    "title": "MET581 Lecture 04",
    "section": "3.2 long to wide",
    "text": "3.2 long to wide\nBy contrast, tidyr::pivot_wider() solves the ‘observations over rows’ problem:\n\ntable2 |&gt;\n  pivot_wider(names_from = type, values_from = count)"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#tidyrpractice",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#tidyrpractice",
    "title": "MET581 Lecture 04",
    "section": "3.3 tidyr::practice()",
    "text": "3.3 tidyr::practice()\nUsing fish_encounters\n\nchange the variable ‘station’ to be column names, and populate with values from ‘seen’\n\n\nfish_encounters |&gt;\n  tidyr::pivot_wider(names_from = station, values_from = seen)\n\nUsing starwars - load with data(\"starwars\")\n\npivot all columns ending with ‘color’ to long format as new columns ‘attribute’ and ‘colour’\n\n\nstarwars |&gt;\n  tidyr::pivot_longer(\n    dplyr::ends_with('color'),\n    names_to = 'attribute',\n    values_to = 'colour'\n  )\n\nUsing flights - load with library(nycflights13)\n\npivot all columns ending with ‘time’ to long format as new columns ‘time_type’ and ‘time_value’ then select only columns beginning with ‘time’\n\n\nflights |&gt;\n  tidyr::pivot_longer(\n    dplyr::ends_with('time'),\n    names_to = 'time_type',\n    values_to = 'time_value'\n  ) |&gt;\n  dplyr::select(dplyr::starts_with('time'))"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#tidyrpractice_more",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#tidyrpractice_more",
    "title": "MET581 Lecture 04",
    "section": "3.4 tidyr::practice_more()",
    "text": "3.4 tidyr::practice_more()\nUsing starwars\n\nreplace tidyr::function() with the correct call to convert the height and mass columns into ‘characteristic’ and ‘measurement’ columns for plotting below\n\n\nstarwars |&gt;\n  tidyr::pivot_longer(\n    c(height, mass),\n    names_to = 'characteristic',\n    values_to = 'measurement'\n  ) |&gt;\n  ggplot(aes(characteristic, measurement)) +\n  geom_jitter()\n\nUsing weather\n\nreplace tidyr::function() with the correct call to convert the temp, dewp and humid columns into ‘condition’ and ‘measurement’ columns for plotting below\n\n\nweather |&gt;\n  head(1000) |&gt;\n  tidyr::pivot_longer(\n    c(temp, dewp, humid),\n    names_to = 'condition',\n    values_to = 'measurement'\n  ) |&gt;\n  ggplot(aes(measurement, condition)) +\n  geom_jitter(alpha = 0.6)"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#relational-data",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#relational-data",
    "title": "MET581 Lecture 04",
    "section": "4.1 Relational data",
    "text": "4.1 Relational data\nWe’ve been introduced to tidy data already, but what of relational data? When our data is spread over several tables, we have relational data. Often this happens is we’re following tidy principles, i.e. we stored different types of observational units in separate tables. Doing this allows for easy storage and data entry, but at analysis time, we often need all the data together. A good example of this is in the nycflights13 package. This contains many tables which are connected. For example, take the tables below:\n\nflights\n\n\n  \n\n\nplanes\n\n\n  \n\n\n\nWe’ve been good data scientists and stored the information separately, but now we want to do some analysis which involves combining information about planes and flights together.\nWhen we’ve stored data like this, we need to know the relations between pairs of tables. We always think of these relationships as being pairs. Even when there are 3 or more tables which are interconnected, they are defined through their pairwise relationships. In the example above, both are related through the ‘tailnum’ column. In fact, the nycflights13 package has a few tables with differing shared columns:\n\nWe don’t need to remember any of these, but just be aware that such situations do indeed occur in everyday datasets. It may be that the relations between your tables are one-to-one, one-to-many, many-to-one, or many-to-many, depending on whether one or more observations in one table match up with one or more in another. This will become more clear in practice.\nTo work with these relations between tables, we need to think about keys."
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#keys",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#keys",
    "title": "MET581 Lecture 04",
    "section": "4.2 Keys",
    "text": "4.2 Keys\nA key is a variable (or set of variables) that uniquely identifies an observation. It is the backbone of each dataset or set of datasets.\nYou generally have two types of key:\n\nPrimary key: identifiers observations in its own data frame (eg: planes$tailnum)\nForeign key: identifies observations in another data frame (eg: flights$tailnum)\n\nIt is generally good idea to test whether or not you do have a unique primary key for the data frames you are working with, and may help you eliminate duplications in your data:\n\nplanes |&gt;\n  count(tailnum) |&gt;\n  filter(n &gt; 1)\n\nA final point to note on keys is that a table may not have a unique key! If this happens to you, it’s a good idea to make a surrogate key yourself using the row numbers."
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#joining-data",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#joining-data",
    "title": "MET581 Lecture 04",
    "section": "4.3 Joining data",
    "text": "4.3 Joining data\nData sets must share at least one column with the same/similar information that you want to join them together on, called a key.\nThis can be one or multiple columns, but most important is the the key or keys uniquely identify each row.\nIf not, and there are multiple matches, all combination of the matches will occur.\nThere are a variety of different joins."
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#inner-join",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#inner-join",
    "title": "MET581 Lecture 04",
    "section": "4.4 Inner join",
    "text": "4.4 Inner join\nSyntax:\ninner_join(dataset1, dataset2, by = \"key\")\nExample:\n\ninner_join(airlines, flights, by = \"carrier\")\n\n\n  \n\n\n\nReturns:\n\nOnly rows that exist in dataset1 and dataset2"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#left-join",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#left-join",
    "title": "MET581 Lecture 04",
    "section": "4.5 Left join",
    "text": "4.5 Left join\nSyntax:\nleft_join(dataset1, dataset2, by = \"key\")\nleft_join(dataset1, dataset2, by = c(\"key1\", \"key2\"))\nExample:\n\nleft_join(flights, airlines, by = \"carrier\")\n\n\n  \n\n\n\nReturns:\n\nAll rows from dataset1\nAll columns from dataset1 and dataset2\n\n\n\nIf a row exists only in dataset1, data is retained.\nIf a row exists only in dataset2, data is not retained."
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#joins---practice",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#joins---practice",
    "title": "MET581 Lecture 04",
    "section": "4.6 Joins - Practice",
    "text": "4.6 Joins - Practice\n\nUse a left_join to join the flights and planes datasets together\n\n\nflights |&gt;\n  dplyr::left_join(planes, by = \"tailnum\")\n\n\nCombine the airline information from the “airlines” dataset with the flights dataset using left_join, filter for flights from 2013 and select only the columns to do with arrivals\n\n\nflights |&gt;\n  dplyr::left_join(airlines, by = \"carrier\") |&gt;\n  filter(year == 2013L) |&gt;\n  select(dplyr::contains('arr_'))\n\n\nJoin the band_members and band_instruments datasets keep all columns and only those people in both\n\n\nband_members |&gt;\n  dplyr::inner_join(band_instruments, by = 'name')"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#full-join",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#full-join",
    "title": "MET581 Lecture 04",
    "section": "4.7 Full join",
    "text": "4.7 Full join\nSyntax:\nfull_join(dataset1, dataset2, by = \"key\")  \nExample:\n\ndplyr::full_join(flights, airlines, by = \"carrier\")\n\n\n  \n\n\n\nReturns:\n\nAll rows in dataset1 and dataset2\nJoining with missing or duplicate keys\nIf data is missing from one dataset but is in the other, depending on the type of join you are performing, this can result in missing data (NA values)."
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#right-join",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#right-join",
    "title": "MET581 Lecture 04",
    "section": "4.8 Right join",
    "text": "4.8 Right join\nThis is the same as a left join but with the order of datasets switched. In practice, this is very rarely used - you will almost almost use a left, inner or full join.\nSyntax:\nright_join(dataset1, dataset2, by = \"key\")  \nExample:\n\ndplyr::right_join(airlines, flights, by = \"carrier\")\n\n\n  \n\n\n\nThis is equivalent to (but with the columns in a different order):\n\ndplyr::left_join(flights, airlines, by = \"carrier\")\n\n\n  \n\n\n\nReturns: - All rows from dataset2 - All columns from dataset1 and dataset2"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#joins---more-practice",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#joins---more-practice",
    "title": "MET581 Lecture 04",
    "section": "4.9 Joins - More Practice",
    "text": "4.9 Joins - More Practice\n\nAdd data from the weather dataset to flights with a left_join\n\n\nflights |&gt;\n  dplyr::left_join(weather)\n\n\nJoin the band_members and band_instruments datasets; keep only the people in the right-hand dataset (band_instruments)\n\n\nband_members |&gt;\n  dplyr::right_join(band_instruments, by = 'name')\n\n\nJoin the band_members and band_instruments datasets; keep everything\n\n\nband_members |&gt;\n  dplyr::full_join(band_instruments, by = 'name')"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#final-tips-on-joins",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#final-tips-on-joins",
    "title": "MET581 Lecture 04",
    "section": "4.10 Final Tips on Joins",
    "text": "4.10 Final Tips on Joins\n\ntake the time to learn the different types of joins and choose carefully each time\nanti-joins can be useful to find rows that don’t match between datasets, e.g. to exclude rows with IDs that aren’t in an expected ID list\nthere is now a relationships argument in dplyr::join() - use this to give the expected relationships between data frames (it will stop you making many mistakes)"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#but-what-is-a-string",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#but-what-is-a-string",
    "title": "MET581 Lecture 04",
    "section": "5.1 But what is a string?",
    "text": "5.1 But what is a string?\n\nStrings are a sequence of characters which has to be represented in memory in binary\nThis was first widely done using ASCII (American Standard Code for Information Interchange)\nBut, ASCII only allows for 128 characters, so not nearly enough for all languages\nNow we represent strings using Unicode (which didn’t appear in it’s current form till the 90s!), which allows for a lot (&gt;1m) characters\nUTF-8 is the most common encoding for Unicode - uses a variable number of bytes (8-bit) units to represent characters\nR uses UTF-8 encoding by default (though will use the label “unknown” unless non-ASCII characters appear), and stringr fully supports Unicode"
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#strings-and-regex",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#strings-and-regex",
    "title": "MET581 Lecture 04",
    "section": "5.2 Strings and regex",
    "text": "5.2 Strings and regex\n\nString manipulation is one of the biggest time-savers in data-analysis. It can also be also one of the more difficult aspects you will need to learn. This is due to the use of regular expressions (regex or regexp for short) which is a programming language in itself.\n\nAs quoted by R for Data Science:\n\n“When you first look at a regexp, you’ll think a cat walked across your keyboard, but as your understanding improves they will soon start to make sense.”\n\nIf you’ve read about regex before, you will also have come across the quotation:\n\n“Some people, when confronted with a problem, think”I know, I’ll use regular expressions.” Now they have two problems.”\n\nAs with all sweeping statements, these should be taken with a pinch of salt. However, they do touch on the depth of the topic, and how the flexibility of regex can easily become something you reach for when a simpler, more readable function is available. You may also find yourself frequently ending up in the situation below."
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#an-infallible-procedure-for-producing-a-successful-regular-expression",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#an-infallible-procedure-for-producing-a-successful-regular-expression",
    "title": "MET581 Lecture 04",
    "section": "5.3 An infallible procedure for producing a successful regular expression",
    "text": "5.3 An infallible procedure for producing a successful regular expression\n\nPartly for these reasons, we will only briefly look at regex in the actual lecture, with some more detailed notes given below. Proficiency with regular expressions is gained the same way as it is when learning any language though: practice. Instead of repeating many exercises here, we will cover some common use-cases. The get more comfortable using them, you should practice regex in one of the many available online tools, such as Regex1, Regex101 and regexone."
  },
  {
    "objectID": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#stringr",
    "href": "04_wrangling_data_2/MET581-Lecture-04-Wrangling-Data-2-strings-Lecture-Notes.html#stringr",
    "title": "MET581 Lecture 04",
    "section": "5.4 Stringr",
    "text": "5.4 Stringr\nStringr is a set of functions that remove the inconsistencies that are seen with the base R string manipulation functions. They are however, still limited by your ability to use regular expressions.\n\n5.4.1 Regular Expressions\nIf you’re comfortable with regular expressions, or you’ve already gone through some of the recommended online material for practising them, you can skip ahead to the more applied section on using stringr.\n\n5.4.1.1 The York Notes\n\nAllow you to match patterns in strings\nMost basic matches an actual chunk of text, e.g. ‘hag’ in ‘hagrid’\nWe can match multiple types of characters with \\s, \\d, \\w, [abc] and [^abc]\nBecause we’re in R, we have to use \\\\ instead of \\, e.g. \\\\w or \\\\d\nWe can match any character with .\nWe can expand these with ?, +, * or {n,m}\nWe can anchor them to the start ^ or the end $\ne.g. ^\\\\w+_\\\\d{4}$ would match “hagrid_2020”, but not “hagrid_120”\n\n\n\n5.4.1.2 A little more detail\nThis more thorough introduction will use some of the stringr functions that you’ll be introduced to later, namely str_view(). The reason for doing this is that it’s a really useful function that highlights the matched characters. It’s therefore very helpful for teaching, even if it’s a little out of order. All we’ll do with it is str_view(v, pattern), where v is a vector of strings. As with most things, it’s easier if you look at an example, so just jump straight in below.\nWe’ll start by getting a few vectors of strings to hand for matching:\n\nstarwars_films &lt;- starwars |&gt;\n  filter(name == \"Luke Skywalker\") |&gt;\n  select(films) |&gt;\n  pull() |&gt;\n  unlist()\n\nstarwars_unique_species &lt;- starwars[[\"species\"]] |&gt;\n  unique()\n\nAnd then we can try matching plain text:\n\nstr_view(starwars_films, \"of\")\n\nMoving on from the basics of matching plain text, the next step up in complexity is ., which matches any character (except a newline):\n\nstarwars_unique_species &lt;- str_replace_na(starwars_unique_species)\nstr_view(starwars_unique_species, \".a.\")\n\n\nWe can also include anchors\n\n^ to match the start of a string\n$ to match the end of a string\n\n\n\n# start anchor\nstr_view(starwars_unique_species, \"^H\")\n\n# end anchor\nstr_view(starwars_unique_species, \".i.$\")\n\n# specific anchor\nabomination_of_nature &lt;- c(\n  starwars_unique_species,\n  str_c(starwars_unique_species[1], starwars_unique_species[5])\n)\n\nstr_view(abomination_of_nature, \"^Human$\")\n\nBut now we have a problem:\n\nHow do we match a literal period aka .?\n\nThe following is almost entirely independent to R, but be wary of using backslashes when pattern matching in general.\nSee the following, from the R for Data Science textbook:\nBut if “.” matches any character, how do you match the character “.”? You need to use an “escape” to tell the regular expression you want to match it exactly, not use its special behaviour. Like strings, regexps use the backslash, \\, to escape special behaviour. So to match an '.', you need the regexp '\\.'. Unfortunately this creates a problem. We use strings to represent regular expressions, and \\ is also used as an escape symbol in strings. So to create the regular expression \\. we need the string \"\\\\.\"\n\nThe \"\\\\\" is used in the regular expressions in R. The \"\\\" is an escape character saying \"within this string, the following character should be taken as is.\" Thus, if you want to actually look for \"\\\" you need to escape it. However, when doing regular expressions in R, you have to \"double escape\" which is why you see \"\\\\\". In R regular expressions like these, if you wanted to actually include \"\\\" you would have to use \"\\\\\\\\\".\nIf we deliberately introduce a ‘.’ into our vector, we can check the match and see that it now does in fact match correctly!\n\nabomination_of_nature[length(abomination_of_nature)] &lt;- str_c(\n  \".\",\n  starwars_unique_species[1],\n  starwars_unique_species[5]\n)\n\nstr_view(abomination_of_nature, \"\\\\.HumanHutt$\")\n\nYou can double-check whether you’re following the sequence of escapes by running the examples below and seeing the output of the matches is what you might expect.\n\nx &lt;- c(\"\\\\a\", \"\\\\.aas\", \".a\", \"a$\")\nx2 &lt;- \"\\u00b5\"\nx3 &lt;- \"\\\"\"\n\nstr_view(x, \"\\\\\\\\\")\nstr_view(x2, \"\\\\\\\\\")\nstr_view(x3, \"\\\"\")\n\nIf the output above was confusing for you, then remember that printing a string doesn’t show it’s actual representation in R. To do this, use writeLines(). Running the lines below might help explain the previous matches by showing the character vectors as R sees them.\n\nwriteLines(x)\nwriteLines(x2)\nwriteLines(x3)\n\nHowever, this also highlights a general issue with regex: even experienced users can be incorrect about their idea of how a complex regular expression is working. For daily practical use of regular expressions therefore, it’s best to stick with two key principles:\n\nA good rule of thumb is to always start with “\\” in your regex and work through the errors.\nRemember that in programming interpretation is just as important as functionality, because you want other people to understand what you have done. Keep it as simple as possible!\n\nThe second point also means that if you can write a more readable bit of code without using regex, it’s probably a good idea.\n\n5.4.1.2.1 Special characters\nThere are a number of special patterns that match more than one character. You’ve already seen ‘.’, which matches any character apart from a newline. There are a few other useful tools:\n\n\\w: matches alphanumerics.\n\\d: matches any digit.\n\\s: matches any whitespace (e.g. space, tab, newline).\n[abc]: matches a, b, or c.\n[^abc]: matches anything except a, b, or c.\n\\b matches a word boundary.\n\nRemember, to create a regular expression containing \\d or \\s, you’ll need to escape the \\ for the string, so you’ll type \"\\\\d\" or \"\\\\s\"\nThe [] can be useful in creating easier to read code:\n\nstr_view(c(\"abc\", \"a.c\", \"a*c\", \"a c\"), \"a[.]c\")\n\nThis works for most (but not all) regex metacharacters: $ . | ? * + ( ) [ {. Unfortunately, a few characters have special meaning even inside a character class and must be handled with backslash escapes: ] \\ ^ and -\n\n\n5.4.1.2.2 Repetition\nThe next step up in power involves controlling how many times a pattern matches:\n\n?: 0 or 1\n+: 1 or more\n*: 0 or more\n\nThe most useful but potentially dangerous is .*. This allows you to ignore matching a bunch of characters that would take a while to figure out, allowing you to specify a pattern specific to the problem at hand.\nFor example:\n\nstr_view_all(starwars_unique_species, pattern = \".*\\\\'.*\")\n\nBe wary that it is a shortcut and therefore might result in unwanted matches. Generally, the more specific you can make your regex, the less likely you’ll accidentally match something you’re not expecting to, so trying to avoid .* is a good idea.\nYou can also specify the number of matches precisely:\n\n{n}: exactly n\n{n,}: n or more\n{,m}: at most m\n{n,m}: between n and m\n\n\nx &lt;- \"1888 is the longest year in Roman numerals: MDCCCLXXXVIII\"\nstr_view(x, \"C{2,3}\")\n\nBy default these matches are “greedy”: they will match the longest string possible. You can make them “lazy”, matching the shortest string possible by putting a ? after them. This is an advanced feature of regular expressions, but it’s useful to know that it exists:\n\nstr_view(x, 'C{2,3}?')\n\n\nstr_view(x, 'C[LX]+?')\n\n\n\n5.4.1.2.3 Grouping and backreferences?\nBut what if you wanted to extract a part of the string and store/use it somewhere else in the R expression?\nThis is where you use backreferences like \\\\1 and \\\\2 (group number 1 and 2)\n\nstr_view(starwars_unique_species, \"(.)\\\\1\", match = TRUE)\n\nThis is generally useful when you have to make complex but repeatable regular expressions:\n\nsentences |&gt;\n  str_replace(\"([^ ]+) ([^ ]+) ([^ ]+)\", \"\\\\1 \\\\3 \\\\2\") |&gt;\n  head(5)\n\n\n\n\n5.4.1.3 A little more practice\nYes, it’s still the same link: regexone. If you’ve gone through it - fantastic! You’ll be able to use the stringr package much more effectively. If you haven’t - invest the time now so you don’t have to learn them on-the-fly when you’re midway through an analysis. It’s worth the effort.\n\n\n\n5.4.2 Returning to stringr\nNow we can get familiar with the more practical applications of stringr for basic string operations, including cleaning and manipulating them.\n\n5.4.2.1 Basic stringr operations\nIn this final stretch, we’ll go through practical examples of the most-used functions from the stringr package. These basic operations are fairly fundamental things you’ll need to do quite a lot.\ncheck string lengths and counts\n\nmy_string &lt;- c(\n  'Hagrid',\n  'Hermione',\n  'Harry.Potter',\n  'Ronald_Weasley',\n  '24xHouse Elves'\n)\n\n# counts the number of characters in each string\nstringr::str_length(my_string)\n\n[1]  6  8 12 14 14\n\n# counts the number of matches in a string\nstringr::str_count(my_string, 'Ha')\n\n[1] 1 0 1 0 0\n\n\nconcatenate (combine) strings\n\n# explicitly naming each column\nstringr::str_c('this', 'that', sep = ', ')\n\n[1] \"this, that\"\n\n\n\n\n5.4.2.2 Manipulations with stringr\nWe can also do some slightly more complicated operations by extracting or replacing aspects of a string.\nextract or replace strings\n\n# extract substrings\nstringr::str_sub(my_string, 1, 3)\n\n[1] \"Hag\" \"Her\" \"Har\" \"Ron\" \"24x\"\n\n\n\n# replace matches\nstringr::str_replace(my_string, '[\\\\._x]', ' ')\n\n[1] \"Hagrid\"         \"Hermione\"       \"Harry Potter\"   \"Ronald Weasley\"\n[5] \"24 House Elves\"\n\n\n\n\n5.4.2.3 stringr::practice()\n\nconcatenate the strings “day”, “to” and “day”, separated by a hyphen\n\n\nstringr::str_c(\"day\", \"to\", \"day\", sep = '-')\n\nUsing starwars\n\nselect the hair color column and replace ‘,’ with a ‘/’ (hint: you can pipe a column into pull() to convert it to a vector for stringr to handle)\n\n\nstarwars |&gt;\n  pull(hair_color) |&gt;\n  stringr::str_replace(', ', '/')\n\nUsing flights\n\nselect columns ending with ‘delay’ and remove the underscore from all column names\n\n\nflights |&gt;\n  select(ends_with('delay')) |&gt;\n  rename_all(stringr::str_replace, '_', ' ')\n\n\n\n5.4.2.4 More manipulations with stringr\nNext we have some more common operations for finding, viewing, sorting and splitting strings.\nfind or view strings\n\n# return a boolean for matches (alternative to grepl)\nstringr::str_detect(my_string, 'Hagrid')\n\n\n# highlight matches\nstringr::str_view(my_string, '^\\\\w')\n\nsort and separate strings\n\n# sorting strings\nsentences |&gt;\n  head(1) |&gt;\n  stringr::str_split(\" \")\n\n[[1]]\n[1] \"The\"     \"birch\"   \"canoe\"   \"slid\"    \"on\"      \"the\"     \"smooth\" \n[8] \"planks.\"\n\n\n\n# sorting strings\nstringr::str_sort(words[1:10], locale = 'en')\n\n [1] \"a\"        \"able\"     \"about\"    \"absolute\" \"accept\"   \"account\" \n [7] \"achieve\"  \"across\"   \"act\"      \"active\"  \n\n\n\n\n5.4.2.5 stringr::practice()\n\nsplit the string “Harry, did you put your name in the Goblet of Fire?” into its components\n\n\nstringr::str_split(\"Harry, did you put your name in the Goblet of Fire?\", ' ')\n\n\nuse the boundary(\"word\") function instead of ” ” and compare results\n\n\nstringr::str_split(\n  \"Harry, did you put your name in the Goblet of Fire?\",\n  boundary(\"word\")\n)\n\nUsing the first line of the sentences dataset\n\nsplit by word boundary, convert all to lowercase and sort\n\n\nsentences |&gt;\n  head(1) |&gt;\n  stringr::str_split(boundary(\"word\")) |&gt;\n  unlist() |&gt;\n  stringr::str_to_lower() |&gt;\n  stringr::str_sort()\n\n\n\n5.4.2.6 Cleaning up with stringr\nLastly, the simple but ever-useful functions for cleaning up our dataframes\n\nstringr::str_to_upper(words[1:10])\n\n [1] \"A\"        \"ABLE\"     \"ABOUT\"    \"ABSOLUTE\" \"ACCEPT\"   \"ACCOUNT\" \n [7] \"ACHIEVE\"  \"ACROSS\"   \"ACT\"      \"ACTIVE\"  \n\nstringr::str_to_lower(words[1:10])\n\n [1] \"a\"        \"able\"     \"about\"    \"absolute\" \"accept\"   \"account\" \n [7] \"achieve\"  \"across\"   \"act\"      \"active\"  \n\nstringr::str_to_sentence(words[1:10])\n\n [1] \"A\"        \"Able\"     \"About\"    \"Absolute\" \"Accept\"   \"Account\" \n [7] \"Achieve\"  \"Across\"   \"Act\"      \"Active\"  \n\nstringr::str_to_title(words[1:10])\n\n [1] \"A\"        \"Able\"     \"About\"    \"Absolute\" \"Accept\"   \"Account\" \n [7] \"Achieve\"  \"Across\"   \"Act\"      \"Active\"  \n\n\n\nsentences |&gt;\n  head(1) |&gt;\n  stringr::str_to_sentence()\n\n[1] \"The birch canoe slid on the smooth planks.\"\n\nsentences |&gt;\n  head(1) |&gt;\n  stringr::str_to_title()\n\n[1] \"The Birch Canoe Slid On The Smooth Planks.\"\n\n\n\n\n5.4.2.7 stringr::practice()\nUsing starwars\n\nconvert the hair_color column values to be Sentence Case\n\n\nstarwars |&gt;\n  pull(hair_color) |&gt;\n  stringr::str_to_sentence()\n\n\nchange all columns names to be title case\n\n\nstarwars |&gt;\n  rename_all(stringr::str_to_title)\n\nUsing gapminder\n\nremove any Camel Case from column names (i.e. all to lower case)\n\n\ngapminder |&gt;\n  rename_all(stringr::str_to_lower)\n\n\nconvert the continent column values to be all upper case\n\n\ngapminder |&gt;\n  pull(continent) |&gt;\n  stringr::str_to_upper()"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework-Answers.html",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework-Answers.html",
    "title": "MET581 Lecture 05 Homework Answers",
    "section": "",
    "text": "library(forcats)\nlibrary(dplyr)\nlibrary(stringr)\nThis document contains all questions and answers for the lecture ‘Wrangling Data 3’. Please create a Quarto document containing all text, code and output used to answer the questions."
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework-Answers.html#factors",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework-Answers.html#factors",
    "title": "MET581 Lecture 05 Homework Answers",
    "section": "1 Factors",
    "text": "1 Factors\n\nWhen does fct_lump() stop adding levels into “other”?\n\nIt combines as many categories into ‘other’ as it can while keeping ‘other’ as the smallest category. Users can also specify limits using n and prop. fct_lump has largely been superseded by more specific versions such as fct_lump_min, fct_lump_prop etc., but the original fct_lump is still supported and is the most common version you will see.\n\nLoad the gss_cat dataframe and get a summary to see if the amount of tv hours per day affects the political party a person belongs to.\n\n\n# we can get summaries of tv hours by politcal party without needing forcats\n# note you may also use a combination of summarise and across\ngss_cat |&gt;\n  group_by(partyid) |&gt;\n  summarise_at(vars('tvhours'),\n               funs(sum(., na.rm = TRUE), mean(., na.rm = TRUE),\n                    median(., na.rm = TRUE)))\n\n# A tibble: 10 × 4\n   partyid              sum  mean median\n   &lt;fct&gt;              &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1 No answer            203  3.22      2\n 2 Don't know             2  2         2\n 3 Other party          598  2.79      2\n 4 Strong republican   3132  2.72      2\n 5 Not str republican  4176  2.63      2\n 6 Ind,near rep        2746  2.77      2\n 7 Independent         6486  3.08      2\n 8 Ind,near dem        3853  2.80      2\n 9 Not str democrat    5976  3.04      2\n10 Strong democrat     6621  3.52      3\n\n# we could also consider making tvhours categorical, lumping together\n# extreme numbers of hours, and breaking-down the number of parties by hours\ngss_cat |&gt;\n  select(tvhours, partyid) |&gt;\n  na.omit() |&gt;\n  mutate(tvhours = fct_lump(as.factor(tvhours), n=7,\n                            other_level = '7+')) |&gt;\n  group_by(tvhours) |&gt;\n  dplyr::count(partyid)\n\n# A tibble: 72 × 3\n# Groups:   tvhours [8]\n   tvhours partyid                n\n   &lt;fct&gt;   &lt;fct&gt;              &lt;int&gt;\n 1 0       No answer              2\n 2 0       Other party           27\n 3 0       Strong republican     57\n 4 0       Not str republican    89\n 5 0       Ind,near rep          47\n 6 0       Independent          171\n 7 0       Ind,near dem          96\n 8 0       Not str democrat      99\n 9 0       Strong democrat       87\n10 1       No answer             12\n# ℹ 62 more rows\n\n\nNote that whatever the exploratory breakdown, we cannot actually answer a causal question with this data/method, like whether ‘the amount of tv hours per day affects the political party a person belongs to’.\n\nRepeat the previous exercise, but this time merge all the “other party” levels into a single option and reorder the factor by the average tv hours per day.\n\n\n# assuming that all \"other party\" levels means all no democrat/republicans\n# it doesn't matter which parties they combined, as long as students could\n# combine factor levels using fct_collapse() and reorder using fct_reorder()\nother_parties &lt;- c(\"Other party\", \"Independent\", \"Ind,near rep\", \"Ind,near dem\")\nnew_cat &lt;- gss_cat |&gt;\n  mutate(partyid = fct_collapse(partyid,\n                                `Other or Independent` = other_parties)) |&gt;\n  group_by(partyid) |&gt;\n  summarise_at(vars('tvhours'),\n               funs(sum(., na.rm = TRUE), mean(., na.rm = TRUE),\n                    median(., na.rm = TRUE))) |&gt;\n  mutate(partyid = fct_reorder(partyid, mean))\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\nlevels(new_cat$partyid)\n\n[1] \"Don't know\"           \"Not str republican\"   \"Strong republican\"   \n[4] \"Other or Independent\" \"Not str democrat\"     \"No answer\"           \n[7] \"Strong democrat\"     \n\n\nYou have a vector of categorical data that has a natural order to it, and you want to use in a regression model. The vector is c(‘Some’, ‘All’, ‘None’, ‘Half’, ‘Most’, ‘Most’, ‘Most’, ‘All’, ‘Some’, ‘None’). Create a factor from this vector by pasting it into the factor() function and assign to a variable.\n\nYou’re concerned to make sure that ‘None’ is set as the baseline. Check the coding for regression problems with contrasts() and print the output.\n\n\ndata &lt;- factor(c('Some', 'All', 'None', 'Half', 'Most', 'Most', 'Most', 'All', 'Some', 'None'))\ncontrasts(data)\n\n     Half Most None Some\nAll     0    0    0    0\nHalf    1    0    0    0\nMost    0    1    0    0\nNone    0    0    1    0\nSome    0    0    0    1\n\n\n\nWhy are the levels in this order by default?\n\nWhen no levels are passed, levels are created in alphabetical order.\n\nRe-order the levels of this factor to go from ‘None’ to ‘All’ in increasing amount\n\n\n# students may have re-created the factor afresh\ndata &lt;- factor(c('Some', 'All', 'None', 'Half', 'Most', 'Most', 'Most', 'All', 'Some', 'None'),\n               levels = c('None', 'Some', 'Half', 'Most', 'All'))\n\n# using forcats::fct_reorder()\n# the preferred way, as the factor was already created\ndata &lt;- fct_relevel(data, c('None', 'Some', 'Half', 'Most', 'All'))"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework-Answers.html#functions",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Homework-Answers.html#functions",
    "title": "MET581 Lecture 05 Homework Answers",
    "section": "2 Functions",
    "text": "2 Functions\n\nCan you tell which of the arguments of myFunction are mandatory and which are optional?\n\n\nmyFunction &lt;- function(x, y, verbose = FALSE){\n  result &lt;- x ** y\n  if (verbose){\n    print(result)\n  }\n  return(result)\n}\n\nx and y are mandatory, but verbose is optional because a default value has already been assigned in the function definition.\n\nWhat will be the output of the previous function if we type the following command myFunction(2, 3, TRUE)? Try to do it without running the code.\n\nThere will be two outputs of 8. One is printed, because verbose is set to TRUE. The other is the return value of the function, which is automatically printed if we do not assign the output of a function to a variable.\n\nWrite any_na(), a function that takes two vectors of the same length and returns the number of positions that have an NA in, at least, one of the vectors.\n\n\n# multiple options are available for ensuring the function takes arguments that are\n# the same length. Extra points if they used a package like `assertthat`\n\n# code below is what students might write to count all the NAs across both vectors\nany_na &lt;- function(x, y){\n  stopifnot(length(x) == length(y))\n  \n  return(sum(c(is.na(x), is.na(y))))\n}\n\n# however, we want the number of positions, not number of total NAs\n# again. There are many possible solutions. A simple one is to make a quick\n# dataframe, as they have many functions available for NA operations\nany_na &lt;- function(x, y){\n  # returns the number of positions that have an NA in at least one of the vectors\n  stopifnot(length(x) == length(y))\n  \n  return(sum(!complete.cases(data.frame(x, y))))\n}\n\nIf any intermediate variables were created, they should have sensible names. A comment explaining what the function does is also welcome! Because we know nothing about the problem application for this question, something like x and y can be reluctantly accepted as names for input variables.\n\nWrite complementary(), a function that takes a DNA strand of variable length and returns its complementary strand.\n\n\n# one option is using chartr, a function from base R built for character translation\ncomplementary &lt;- function(dna_seq){\n  # returns complimentary strand for variable-length DNA strands\n  return(chartr(\"ATGC\",\"TACG\", dna_seq))\n}\n\n# it wasn't specified what the strand would be in\n# if we supplied the sequence as a vector, vectorised ifelse\n# statement may be handy\ncomplementary &lt;- function(dna_seq){\n  # returns complimentary strand for variable-length DNA strands\n  return(dplyr::case_when(dna_seq == 'A' ~ 'T',\n                          dna_seq == 'T' ~ 'A',\n                          dna_seq == 'C' ~ 'G',\n                          dna_seq == 'G' ~ 'C'))\n}\n\nWhatever was used, variable and argument names should be appropriate. X or y are no longer acceptable, as we know something about the problem for this question.\n\nWrite a function that transcribes and translates a DNA strand into its corresponding protein sequence. You can assume that the length of the input DNA strand is a multiple of 3.\n\n\n# students may have broken the problem into sub functions\n# if this is the case, they should not be nested (they should\n# not be defined within another function's body)\ntranscribe &lt;- function(dna_seq){\n  # converts from dna to rna\n  rna_seq &lt;- str_replace_all(dna_seq, 'T', 'U')\n  \n  return(rna_seq)\n}\n\n# even better than the option below would be putting the RNA codon table\n# into a separate file which is loaded, so we can easily update it\ntranslate &lt;- function(rna_seq){\n  # converts from RNA to protein\n  # define an RNA codon table\n  rna_codons = c(\"F\", \"L\", \"I\", \"V\", \"F\", \"L\", \"I\", \"V\",\n                \"L\", \"L\", \"I\", \"V\", \"L\", \"L\", \"M\", \"V\",\n                \"S\", \"P\", \"T\", \"A\", \"S\", \"P\", \"T\", \"A\",\n                \"S\", \"P\", \"T\", \"A\", \"S\", \"P\", \"T\", \"A\",\n                \"Y\", \"H\", \"N\", \"D\", \"Y\", \"H\", \"N\", \"D\",\n                \"STOP\", \"Q\", \"K\", \"E\", \"STOP\", \"Q\", \"K\", \"E\",\n                \"C\", \"R\", \"S\", \"G\", \"C\", \"R\", \"S\", \"G\",\n                \"STOP\", \"R\", \"R\", \"G\", \"W\", \"R\", \"R\", \"G\")\n  names(rna_codons) &lt;- c(\"UUU\", \"CUU\", \"AUU\", \"GUU\", \"UUC\",\n                         \"CUC\", \"AUC\", \"GUC\", \"UUA\", \"CUA\",\n                         \"AUA\", \"GUA\", \"UUG\", \"CUG\", \"AUG\",\n                         \"GUG\", \"UCU\", \"CCU\", \"ACU\", \"GCU\",\n                         \"UCC\", \"CCC\", \"ACC\", \"GCC\", \"UCA\",\n                         \"CCA\", \"ACA\", \"GCA\", \"UCG\", \"CCG\",\n                         \"ACG\", \"GCG\", \"UAU\", \"CAU\", \"AAU\",\n                         \"GAU\", \"UAC\", \"CAC\", \"AAC\", \"GAC\",\n                         \"UAA\", \"CAA\", \"AAA\", \"GAA\", \"UAG\",\n                         \"CAG\", \"AAG\", \"GAG\", \"UGU\", \"CGU\",\n                         \"AGU\", \"GGU\", \"UGC\", \"CGC\", \"AGC\",\n                         \"GGC\", \"UGA\", \"CGA\", \"AGA\", \"GGA\",\n                         \"UGG\", \"CGG\", \"AGG\", \"GGG\" )\n  \n  # optionally check length is multiple of 3\n  stopifnot((nchar(rna_seq) %% 3) == 0)\n  \n  # lookup one-letter amino acid code for each codon\n  amino_acids &lt;- ''\n  for(i in seq(1, nchar(rna_seq), by=3)){\n    codon &lt;- substr(rna_seq, i, i+2)\n    amino_acids &lt;- paste(amino_acids, as.character(rna_codon[codon]), sep = '')\n  }\n  \n  return(amino_acids)\n}\n\ndna_to_protein &lt;- function(dna_seq) {\n  # convert from dna to protein\n  rna_seq &lt;- transcribe(dna_seq)\n  protein_seq &lt;- translate(rna_seq)\n  return(protein_seq)\n}\n\nAs before, variable names and function names should be appropriate. Comments are probably needed to make parts clear. It makes sense for separate operations to be broken into separate functions like above. This format is much-preferred. If anyone did the whole thing in a single function, some effort should be made to clearly separate-out the different sections."
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html",
    "title": "MET581 Lecture 05",
    "section": "",
    "text": "A factor:\n\nis how we store categorical variables in R\ncontains a fixed and known set of possible values\n\nWe can create them using the factor() function, which takes the format: factor(vector, levels, labels)\n\n# e.g.\nfactor(c(0, 1, 1, 1, 0), labels=c('Female', 'Male'))\n\n[1] Female Male   Male   Male   Female\nLevels: Female Male\n\n\nWe can make factors that have an inherent order\n\nmonthLevels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\ndata &lt;- factor(c(\"Dec\", \"Jun\", \"Apr\"))\ndata\n\nBut sorting them may not give us what we expect\n\nsort(data)\n\n[1] Apr Dec Jun\nLevels: Apr Dec Jun\n\n\n\nfactors always have an internal order, even if you don’t give one\nif you don’t set the levels, they will be alphabetical\nif you want a specific order, you need to give it:\n\n\nmonthLevels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\ndata &lt;- factor(c(\"Dec\", \"Jun\", \"Apr\"), levels = monthLevels)\nsort(data)\n\n[1] Apr Jun Dec\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nStrings that aren’t in your levels are silently set as NA\n\nfactor(c(\"Dec\", \"Jum\", \"Apr\"), levels = monthLevels)\n\n[1] Dec  &lt;NA&gt; Apr \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nFactors also provide an automatic error control, something that is extremely useful when programming and managing large amounts of data. However, we may not want such NAs to go unnoticed!\nBy contrast, readr’s parse_factor() will warn you\n\nreadr::parse_factor(c(\"Dec\", \"Jum\", \"Apr\"), levels = monthLevels)\n\nWarning: 1 parsing failure.\nrow col           expected actual\n  2  -- value in level set    Jum\n\n\n[1] Dec  &lt;NA&gt; Apr \nattr(,\"problems\")\n# A tibble: 1 × 4\n    row   col expected           actual\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;              &lt;chr&gt; \n1     2    NA value in level set Jum   \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nIf you ever need to access the set of valid levels directly, you can do so with levels(). The function nlevels() can also be used to show the number of levels. Factors allow us to set a semantic order rather than the alphabetical one associated with character vectors. This can be quite handy when our categorical data has an inherent idea of order, like the months of the year or the quality level of a diamond cut.\n\n\n\n\ncreate a factor vector called ‘marauders’ that contains the strings ‘moony’, ‘wormtail’, ‘padfoot’ and ‘prongs’ in alphabetical order\n\n\n# nothing special needs to be done as alphabetical is the default ordering for levels\nmarauders &lt;- factor(c('moony', 'wormtail', 'padfoot', 'prongs'))\n\n\ncreate a factor called ‘patronus’ with the strings ‘stag’, ‘dog’, ‘otter’, creating levels from the order they appear in the input vector\n\n\n# we could pass the order we want to levels explicitly\npatronus &lt;- factor(c('stag', 'dog', 'otter'), levels = c('stag', 'dog', 'otter'))\n\n# we could also have used forcats::fct_inorder()\npatronus &lt;- forcats::fct_inorder(c('stag', 'dog', 'otter'))\n\n\nprint only the levels of these factors\n\n\nlevels(marauders)\n\n[1] \"moony\"    \"padfoot\"  \"prongs\"   \"wormtail\"\n\nlevels(patronus)\n\n[1] \"stag\"  \"dog\"   \"otter\"\n\n\nUsing diamonds\n\nuse dplyr::count() to show how many rows there are for each factor level in the ‘cut’ column. Is it any different to using forcats::fct_count()?\n\n\n# using dplyr::count()\ndiamonds |&gt;\n  dplyr::count(cut)\n\n\n  \n\n\n# using forcats::fct_count()\nforcats::fct_count(diamonds$cut)\n\n\n  \n\n\n\nThe only differences here are that dplyr takes a dataframe or tibble, while forcats takes a vector, and some formatting of the output. Both provide useful counts of the levels in our factor. This is often one of the first things we do when encountering a factor!\n\nuse dplyr::arrange(desc()) to sort the cut column in descending order. What were the rows sorted by?\n\n\nhead(dplyr::arrange(diamonds, desc(cut)))\n\n\n  \n\n\n\nOur output from arrange() is sorted by the order of the levels of our factor. This is different to strings in character vectors, which are sorted alphabetically. We therefore need to be careful when sorting to check our output is as expected!\n\n\n\nWhy should I care about factors?\n\nyou’re better than that\nplots - plotting packages may require factors for categorical plots\nmodels - the levels of your factors determines what is set as the baseline when dummy coding for regression models in r. You can check the dummy coding for a factor using the contrasts() function.\nforcats - there are lots of things we might want to do that are specific to categorical data, like grouping small categories together or making a more intuitive ordering of them. Forcats makes these easy!\n\nForcats is an excellent package for dealing with factors because:\n\nIt enables a lot of the common needs we have with factors\nIt works well with ggplot2 (also written by Hadley/the tidyverse team)\nIt generally tries to warn you when something may be wrong\nIt has the word cats in it\nIt’s an anagram of factors\nIt’s for categoricals (factors)\nSomething about cats\n\nIt is, however, strictly for humans.\n\n\n\nNowadays it is a common task to extend our datasets based on new results or changes on the criteria used, or rearrange the levels to improve the readability of our data when plotted. In this matter, it is handy to know that we can change both the order and levels of a defined factor, and how to do it.\nFor some of these examples we are going to use forcats::gss_cat, a dataset created from a long-running US survey conducted by the independent research organization NORC at the University of Chicago.\nforcats::fct_relevel() and forcats::fct_inorder()\nfct_inorder()\n\n# sets the levels to be the\n# order they appear in the vector\nhead(fct_inorder(gss_cat$marital))\n\n[1] Never married Divorced      Widowed       Never married Divorced     \n[6] Married      \nLevels: Never married Divorced Widowed Married Separated No answer\n\n\nfct_relevel()\n\n# moves one or more levels to the start\nhead(fct_relevel(gss_cat$marital, 'Married'))\n\n[1] Never married Divorced      Widowed       Never married Divorced     \n[6] Married      \nLevels: Married No answer Never married Separated Divorced Widowed\n\n\nforcats::fct_recode()\nFor changing the names of existing levels by hand\n\nmyFactor &lt;- factor(c(\"M\", \"F\", \"O\", \"M\", \"P\", \"M\",\n                     \"F\", \"F\", \"F\", \"M\", \"O\", \"P\"))\nmyFactorPub &lt;- fct_recode(myFactor, male = \"M\", female = \"F\",\n                          unknown = \"O\", unknown = \"P\")\nmyFactorPub\n\n [1] male    female  unknown male    unknown male    female  female  female \n[10] male    unknown unknown\nLevels: female male unknown\n\n\nforcats::fct_reorder()\nCompare the output of the two graphs below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nforcats::fct_reorder():\n\nis the most useful function in the forcats package (in my opinion)\nlets you reorder your factor levels by another variable\nallows you to bring structure to plots\nis best use when there is no inherent order to your factors that you might be messing up by reordering\n\nIt can be applied within a ggplot2 call, like below:\n\ngss_cat |&gt;\n    group_by(marital) |&gt;\n    summarise(tvhours = mean(tvhours, na.rm = TRUE)) |&gt;\n    ggplot(aes(tvhours, fct_reorder(marital, tvhours))) + # &lt;&lt;&lt;---\n      geom_point()\n\nIt could also be used before the ggplot2 using mutate, like below. In practice, it’s much more common to reorder factors for plotting ‘on the fly’ by doing it inside the ggplot2 call\n\ngss_cat |&gt;\n    group_by(marital) |&gt;\n    summarise(tvhours = mean(tvhours, na.rm = TRUE)) |&gt;\n    mutate(marital = fct_reorder(marital, tvhours)) |&gt; # &lt;&lt;&lt;---\n    ggplot(aes(tvhours, marital)) +\n      geom_point()\n\n\n\nUsing gss_cat\n\nhow many levels are there in the relig column?\n\n\nnlevels(gss_cat$relig)\n\n[1] 16\n\n\n\nreorder the levels of ‘denom’ in order of appearance\n\n\nlevels(fct_inorder(gss_cat$denom))\n\n [1] \"Southern baptist\"     \"Baptist-dk which\"     \"No denomination\"     \n [4] \"Not applicable\"       \"Lutheran-mo synod\"    \"Other\"               \n [7] \"United methodist\"     \"Episcopal\"            \"Other lutheran\"      \n[10] \"Afr meth ep zion\"     \"Am bapt ch in usa\"    \"Other methodist\"     \n[13] \"Presbyterian c in us\" \"Methodist-dk which\"   \"Nat bapt conv usa\"   \n[16] \"Am lutheran\"          \"Nat bapt conv of am\"  \"Am baptist asso\"     \n[19] \"Evangelical luth\"     \"Afr meth episcopal\"   \"Lutheran-dk which\"   \n[22] \"Luth ch in america\"   \"Presbyterian, merged\" \"No answer\"           \n[25] \"Wi evan luth synod\"   \"Other baptists\"       \"Other presbyterian\"  \n[28] \"United pres ch in us\" \"Presbyterian-dk wh\"   \"Don't know\"          \n\n\n\ntake the code below which plots income by age. Try changing the order of the levels in ‘rincome’ to be sorted by ‘age’. Now try just moving n/a to the start. Which option works best?\n\n\n# using fct_reorder()\ngss_cat |&gt;\n  group_by(rincome) |&gt;\n  summarise(\n    age = mean(age, na.rm = TRUE),\n    tvhours = mean(tvhours, na.rm = TRUE),\n    n = n()) |&gt;\n  ggplot(aes(age, fct_reorder(rincome, age))) +\n    geom_point()\n\n\n\n\n\n\n\n# using fct_relevel()\ngss_cat |&gt;\n  group_by(rincome) |&gt;\n  summarise(\n    age = mean(age, na.rm = TRUE),\n    tvhours = mean(tvhours, na.rm = TRUE),\n    n = n()) |&gt;\n  mutate(rincome = fct_reorder(rincome, age)) |&gt;\n  ggplot(aes(age, rincome)) +\n    geom_point()\n\n\n\n\n\n\n\n# using fct_relevel()\ngss_cat |&gt;\n  group_by(rincome) |&gt;\n  summarise(\n    age = mean(age, na.rm = TRUE),\n    tvhours = mean(tvhours, na.rm = TRUE),\n    n = n()) |&gt;\n  ggplot(aes(age, rincome)) +\n    geom_point()\n\n\n\n\n\n\n\ngss_cat |&gt;\n  mutate(rincome = fct_reorder(rincome, age))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `rincome = fct_reorder(rincome, age)`.\nCaused by warning:\n! `fct_reorder()` removing 76 missing values.\nℹ Use `.na_rm = TRUE` to silence this message.\nℹ Use `.na_rm = FALSE` to preserve NAs.\n\n\n\n  \n\n\n\nWhile both of these look nice, the second one is probably more appropriate. This is because our y axis has some inherent order to it, and changing this makes understanding the plot a bit more difficult. Moving ‘Not applicable’ to the beginning to be with similar categories is helpful, however.\n\n\n\n\nforcats::fct_reorder2()\nCompare the two plots below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nforcats::fct_reorder2()\n\nis probably the second most useful, after forcats::fct_reorder()\nis suprisingly helpful when reading graphs\nreorders by the y values for the highest x\nin practice, this is used to reorder the legend labels by the y values closer to them\nthis makes it easier to match line-colours with legend-colours, giving a clearer graph\n\nYou can see its use below:\n\ngss_cat |&gt;\n  filter(!is.na(age)) |&gt;\n  count(age, marital) |&gt;\n  group_by(age) |&gt;\n  mutate(prop = n / sum(n)) |&gt;\n  ggplot(aes(age, prop, colour = fct_reorder2(marital, age, prop))) + # &lt;&lt;&lt;---\n    geom_line() +\n    labs(colour = \"marital\")\n\nOther useful Forcats functions\n\nfct_rev() reverses the order of the levels\nfct_lump() combines the least common factor levels into ‘other’\nfct_expand() adds new levels to your factors\nfct_relabel() automatically relabels factor levels\nfct_infreq() orders factors from most frequent to least frequent\n\n\n\nUsing gss_cat\n\nchange the names of the levels of partyid from “Not str republican”, “Ind,near dem” and “Ind,near rep” to “Not strong republican”, “Independent, near democrat” and “Independent, near republican”\n\n\nhead(fct_recode(gss_cat$partyid,\n                `Not strong republican` = 'Not str republican',\n                `Independent, near democrat` = 'Ind,near dem',\n                `Independent, near republican` = 'Ind,near rep'))\n\n[1] Independent, near republican Not strong republican       \n[3] Independent                  Independent, near republican\n[5] Not str democrat             Strong democrat             \n10 Levels: No answer Don't know Other party ... Strong democrat\n\n\n\nrun the code chunk below and view the output. Now edit the code so that the bars are sorted from lowest to highest using fct_infreq() and fct_rev()\n\n\n# original\ngss_cat |&gt;\n  ggplot(aes(marital)) +\n    geom_bar()\n\n\n\n\n\n\n\n# using fct_infreq() and fct_rev()\ngss_cat |&gt;\n  ggplot(aes(fct_rev(fct_infreq(marital)))) +\n    geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nUsing gss_cat\n\nchange the code below so that the legend colours match the order of the lines at the right side of the plot\n\n\ndiamonds |&gt;\n  filter(color == 'J', depth &gt; 55, carat &lt;=2.5) |&gt;\n  ggplot(aes(carat, price, col=fct_reorder2(cut, carat, price))) +\n    geom_line(alpha=0.6)\n\n\n\n\n\n\n\n\nChanging plot attributes like the legend title will be covered at a later date.\n\n\n\n\nAt times, it may seem necessary to convert from a factor to numeric, particularly if you are using a plotting function that requires numeric data. However, as.numeric(my_factor) should not be used for these purposes.\nErrors may be obvious:\n\nx &lt;- factor(c(1, 1, 0, 0, 1, 0, 1, 1, 1, 0))\nas.numeric(x)\n\n [1] 2 2 1 1 2 1 2 2 2 1\n\n\nHere, the values we passed are 0 or 1, but R is 1-indexed, meaning all counting starts from 1, not 0. Internally, R represents the coding of this factor as 1/2, even though we passed the values 0/1.\nErrors can also be more subtle:\n\nx &lt;- factor(c(1, 1, 2, 5, 3, 3, 1, 6, 5, 1, 6, 2))\nas.numeric(x)\n\n [1] 1 1 2 4 3 3 1 5 4 1 5 2\n\n\nThe latter situation is common if you have ordered categorical data, for example levels of education in a population, coded as numbers 1 to 6. Unfortunately, when we created our factor, we failed to specificy the levels. As nobody with the category 4 happens to be present, the internal coding of the factor levels above 4 were shifted down one. Our output from as.numeric() is not the vector we passed in.\nWhen coercing factors to other types, note\n\nyou should NEVER convert from factor to numeric unless you know that’s what you want\nas.numeric() returns R’s internal codes for the factors, not their values\ninstead, convert to character first, then to numeric, i.e.:\n\n\nx &lt;- factor(c(1, 1, 2, 5, 3, 3, 1, 6, 5, 1, 6, 2))\nas.numeric(as.character(x))\n\n [1] 1 1 2 5 3 3 1 6 5 1 6 2\n\n\nOur output now represents the values we passed in!"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#making-factors",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#making-factors",
    "title": "MET581 Lecture 05",
    "section": "",
    "text": "A factor:\n\nis how we store categorical variables in R\ncontains a fixed and known set of possible values\n\nWe can create them using the factor() function, which takes the format: factor(vector, levels, labels)\n\n# e.g.\nfactor(c(0, 1, 1, 1, 0), labels=c('Female', 'Male'))\n\n[1] Female Male   Male   Male   Female\nLevels: Female Male\n\n\nWe can make factors that have an inherent order\n\nmonthLevels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\ndata &lt;- factor(c(\"Dec\", \"Jun\", \"Apr\"))\ndata\n\nBut sorting them may not give us what we expect\n\nsort(data)\n\n[1] Apr Dec Jun\nLevels: Apr Dec Jun\n\n\n\nfactors always have an internal order, even if you don’t give one\nif you don’t set the levels, they will be alphabetical\nif you want a specific order, you need to give it:\n\n\nmonthLevels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\ndata &lt;- factor(c(\"Dec\", \"Jun\", \"Apr\"), levels = monthLevels)\nsort(data)\n\n[1] Apr Jun Dec\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nStrings that aren’t in your levels are silently set as NA\n\nfactor(c(\"Dec\", \"Jum\", \"Apr\"), levels = monthLevels)\n\n[1] Dec  &lt;NA&gt; Apr \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nFactors also provide an automatic error control, something that is extremely useful when programming and managing large amounts of data. However, we may not want such NAs to go unnoticed!\nBy contrast, readr’s parse_factor() will warn you\n\nreadr::parse_factor(c(\"Dec\", \"Jum\", \"Apr\"), levels = monthLevels)\n\nWarning: 1 parsing failure.\nrow col           expected actual\n  2  -- value in level set    Jum\n\n\n[1] Dec  &lt;NA&gt; Apr \nattr(,\"problems\")\n# A tibble: 1 × 4\n    row   col expected           actual\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;              &lt;chr&gt; \n1     2    NA value in level set Jum   \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nIf you ever need to access the set of valid levels directly, you can do so with levels(). The function nlevels() can also be used to show the number of levels. Factors allow us to set a semantic order rather than the alphabetical one associated with character vectors. This can be quite handy when our categorical data has an inherent idea of order, like the months of the year or the quality level of a diamond cut."
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#factors---practice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#factors---practice",
    "title": "MET581 Lecture 05",
    "section": "",
    "text": "create a factor vector called ‘marauders’ that contains the strings ‘moony’, ‘wormtail’, ‘padfoot’ and ‘prongs’ in alphabetical order\n\n\n# nothing special needs to be done as alphabetical is the default ordering for levels\nmarauders &lt;- factor(c('moony', 'wormtail', 'padfoot', 'prongs'))\n\n\ncreate a factor called ‘patronus’ with the strings ‘stag’, ‘dog’, ‘otter’, creating levels from the order they appear in the input vector\n\n\n# we could pass the order we want to levels explicitly\npatronus &lt;- factor(c('stag', 'dog', 'otter'), levels = c('stag', 'dog', 'otter'))\n\n# we could also have used forcats::fct_inorder()\npatronus &lt;- forcats::fct_inorder(c('stag', 'dog', 'otter'))\n\n\nprint only the levels of these factors\n\n\nlevels(marauders)\n\n[1] \"moony\"    \"padfoot\"  \"prongs\"   \"wormtail\"\n\nlevels(patronus)\n\n[1] \"stag\"  \"dog\"   \"otter\"\n\n\nUsing diamonds\n\nuse dplyr::count() to show how many rows there are for each factor level in the ‘cut’ column. Is it any different to using forcats::fct_count()?\n\n\n# using dplyr::count()\ndiamonds |&gt;\n  dplyr::count(cut)\n\n\n  \n\n\n# using forcats::fct_count()\nforcats::fct_count(diamonds$cut)\n\n\n  \n\n\n\nThe only differences here are that dplyr takes a dataframe or tibble, while forcats takes a vector, and some formatting of the output. Both provide useful counts of the levels in our factor. This is often one of the first things we do when encountering a factor!\n\nuse dplyr::arrange(desc()) to sort the cut column in descending order. What were the rows sorted by?\n\n\nhead(dplyr::arrange(diamonds, desc(cut)))\n\n\n  \n\n\n\nOur output from arrange() is sorted by the order of the levels of our factor. This is different to strings in character vectors, which are sorted alphabetically. We therefore need to be careful when sorting to check our output is as expected!"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#introduction-to-forcats",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#introduction-to-forcats",
    "title": "MET581 Lecture 05",
    "section": "",
    "text": "Why should I care about factors?\n\nyou’re better than that\nplots - plotting packages may require factors for categorical plots\nmodels - the levels of your factors determines what is set as the baseline when dummy coding for regression models in r. You can check the dummy coding for a factor using the contrasts() function.\nforcats - there are lots of things we might want to do that are specific to categorical data, like grouping small categories together or making a more intuitive ordering of them. Forcats makes these easy!\n\nForcats is an excellent package for dealing with factors because:\n\nIt enables a lot of the common needs we have with factors\nIt works well with ggplot2 (also written by Hadley/the tidyverse team)\nIt generally tries to warn you when something may be wrong\nIt has the word cats in it\nIt’s an anagram of factors\nIt’s for categoricals (factors)\nSomething about cats\n\nIt is, however, strictly for humans."
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#using-forcats",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#using-forcats",
    "title": "MET581 Lecture 05",
    "section": "",
    "text": "Nowadays it is a common task to extend our datasets based on new results or changes on the criteria used, or rearrange the levels to improve the readability of our data when plotted. In this matter, it is handy to know that we can change both the order and levels of a defined factor, and how to do it.\nFor some of these examples we are going to use forcats::gss_cat, a dataset created from a long-running US survey conducted by the independent research organization NORC at the University of Chicago.\nforcats::fct_relevel() and forcats::fct_inorder()\nfct_inorder()\n\n# sets the levels to be the\n# order they appear in the vector\nhead(fct_inorder(gss_cat$marital))\n\n[1] Never married Divorced      Widowed       Never married Divorced     \n[6] Married      \nLevels: Never married Divorced Widowed Married Separated No answer\n\n\nfct_relevel()\n\n# moves one or more levels to the start\nhead(fct_relevel(gss_cat$marital, 'Married'))\n\n[1] Never married Divorced      Widowed       Never married Divorced     \n[6] Married      \nLevels: Married No answer Never married Separated Divorced Widowed\n\n\nforcats::fct_recode()\nFor changing the names of existing levels by hand\n\nmyFactor &lt;- factor(c(\"M\", \"F\", \"O\", \"M\", \"P\", \"M\",\n                     \"F\", \"F\", \"F\", \"M\", \"O\", \"P\"))\nmyFactorPub &lt;- fct_recode(myFactor, male = \"M\", female = \"F\",\n                          unknown = \"O\", unknown = \"P\")\nmyFactorPub\n\n [1] male    female  unknown male    unknown male    female  female  female \n[10] male    unknown unknown\nLevels: female male unknown\n\n\nforcats::fct_reorder()\nCompare the output of the two graphs below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nforcats::fct_reorder():\n\nis the most useful function in the forcats package (in my opinion)\nlets you reorder your factor levels by another variable\nallows you to bring structure to plots\nis best use when there is no inherent order to your factors that you might be messing up by reordering\n\nIt can be applied within a ggplot2 call, like below:\n\ngss_cat |&gt;\n    group_by(marital) |&gt;\n    summarise(tvhours = mean(tvhours, na.rm = TRUE)) |&gt;\n    ggplot(aes(tvhours, fct_reorder(marital, tvhours))) + # &lt;&lt;&lt;---\n      geom_point()\n\nIt could also be used before the ggplot2 using mutate, like below. In practice, it’s much more common to reorder factors for plotting ‘on the fly’ by doing it inside the ggplot2 call\n\ngss_cat |&gt;\n    group_by(marital) |&gt;\n    summarise(tvhours = mean(tvhours, na.rm = TRUE)) |&gt;\n    mutate(marital = fct_reorder(marital, tvhours)) |&gt; # &lt;&lt;&lt;---\n    ggplot(aes(tvhours, marital)) +\n      geom_point()\n\n\n\nUsing gss_cat\n\nhow many levels are there in the relig column?\n\n\nnlevels(gss_cat$relig)\n\n[1] 16\n\n\n\nreorder the levels of ‘denom’ in order of appearance\n\n\nlevels(fct_inorder(gss_cat$denom))\n\n [1] \"Southern baptist\"     \"Baptist-dk which\"     \"No denomination\"     \n [4] \"Not applicable\"       \"Lutheran-mo synod\"    \"Other\"               \n [7] \"United methodist\"     \"Episcopal\"            \"Other lutheran\"      \n[10] \"Afr meth ep zion\"     \"Am bapt ch in usa\"    \"Other methodist\"     \n[13] \"Presbyterian c in us\" \"Methodist-dk which\"   \"Nat bapt conv usa\"   \n[16] \"Am lutheran\"          \"Nat bapt conv of am\"  \"Am baptist asso\"     \n[19] \"Evangelical luth\"     \"Afr meth episcopal\"   \"Lutheran-dk which\"   \n[22] \"Luth ch in america\"   \"Presbyterian, merged\" \"No answer\"           \n[25] \"Wi evan luth synod\"   \"Other baptists\"       \"Other presbyterian\"  \n[28] \"United pres ch in us\" \"Presbyterian-dk wh\"   \"Don't know\"          \n\n\n\ntake the code below which plots income by age. Try changing the order of the levels in ‘rincome’ to be sorted by ‘age’. Now try just moving n/a to the start. Which option works best?\n\n\n# using fct_reorder()\ngss_cat |&gt;\n  group_by(rincome) |&gt;\n  summarise(\n    age = mean(age, na.rm = TRUE),\n    tvhours = mean(tvhours, na.rm = TRUE),\n    n = n()) |&gt;\n  ggplot(aes(age, fct_reorder(rincome, age))) +\n    geom_point()\n\n\n\n\n\n\n\n# using fct_relevel()\ngss_cat |&gt;\n  group_by(rincome) |&gt;\n  summarise(\n    age = mean(age, na.rm = TRUE),\n    tvhours = mean(tvhours, na.rm = TRUE),\n    n = n()) |&gt;\n  mutate(rincome = fct_reorder(rincome, age)) |&gt;\n  ggplot(aes(age, rincome)) +\n    geom_point()\n\n\n\n\n\n\n\n# using fct_relevel()\ngss_cat |&gt;\n  group_by(rincome) |&gt;\n  summarise(\n    age = mean(age, na.rm = TRUE),\n    tvhours = mean(tvhours, na.rm = TRUE),\n    n = n()) |&gt;\n  ggplot(aes(age, rincome)) +\n    geom_point()\n\n\n\n\n\n\n\ngss_cat |&gt;\n  mutate(rincome = fct_reorder(rincome, age))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `rincome = fct_reorder(rincome, age)`.\nCaused by warning:\n! `fct_reorder()` removing 76 missing values.\nℹ Use `.na_rm = TRUE` to silence this message.\nℹ Use `.na_rm = FALSE` to preserve NAs.\n\n\n\n  \n\n\n\nWhile both of these look nice, the second one is probably more appropriate. This is because our y axis has some inherent order to it, and changing this makes understanding the plot a bit more difficult. Moving ‘Not applicable’ to the beginning to be with similar categories is helpful, however."
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#more-forcats-functions",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#more-forcats-functions",
    "title": "MET581 Lecture 05",
    "section": "",
    "text": "forcats::fct_reorder2()\nCompare the two plots below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nforcats::fct_reorder2()\n\nis probably the second most useful, after forcats::fct_reorder()\nis suprisingly helpful when reading graphs\nreorders by the y values for the highest x\nin practice, this is used to reorder the legend labels by the y values closer to them\nthis makes it easier to match line-colours with legend-colours, giving a clearer graph\n\nYou can see its use below:\n\ngss_cat |&gt;\n  filter(!is.na(age)) |&gt;\n  count(age, marital) |&gt;\n  group_by(age) |&gt;\n  mutate(prop = n / sum(n)) |&gt;\n  ggplot(aes(age, prop, colour = fct_reorder2(marital, age, prop))) + # &lt;&lt;&lt;---\n    geom_line() +\n    labs(colour = \"marital\")\n\nOther useful Forcats functions\n\nfct_rev() reverses the order of the levels\nfct_lump() combines the least common factor levels into ‘other’\nfct_expand() adds new levels to your factors\nfct_relabel() automatically relabels factor levels\nfct_infreq() orders factors from most frequent to least frequent\n\n\n\nUsing gss_cat\n\nchange the names of the levels of partyid from “Not str republican”, “Ind,near dem” and “Ind,near rep” to “Not strong republican”, “Independent, near democrat” and “Independent, near republican”\n\n\nhead(fct_recode(gss_cat$partyid,\n                `Not strong republican` = 'Not str republican',\n                `Independent, near democrat` = 'Ind,near dem',\n                `Independent, near republican` = 'Ind,near rep'))\n\n[1] Independent, near republican Not strong republican       \n[3] Independent                  Independent, near republican\n[5] Not str democrat             Strong democrat             \n10 Levels: No answer Don't know Other party ... Strong democrat\n\n\n\nrun the code chunk below and view the output. Now edit the code so that the bars are sorted from lowest to highest using fct_infreq() and fct_rev()\n\n\n# original\ngss_cat |&gt;\n  ggplot(aes(marital)) +\n    geom_bar()\n\n\n\n\n\n\n\n# using fct_infreq() and fct_rev()\ngss_cat |&gt;\n  ggplot(aes(fct_rev(fct_infreq(marital)))) +\n    geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nUsing gss_cat\n\nchange the code below so that the legend colours match the order of the lines at the right side of the plot\n\n\ndiamonds |&gt;\n  filter(color == 'J', depth &gt; 55, carat &lt;=2.5) |&gt;\n  ggplot(aes(carat, price, col=fct_reorder2(cut, carat, price))) +\n    geom_line(alpha=0.6)\n\n\n\n\n\n\n\n\nChanging plot attributes like the legend title will be covered at a later date."
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#gotchas-coercing-factors",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#gotchas-coercing-factors",
    "title": "MET581 Lecture 05",
    "section": "",
    "text": "At times, it may seem necessary to convert from a factor to numeric, particularly if you are using a plotting function that requires numeric data. However, as.numeric(my_factor) should not be used for these purposes.\nErrors may be obvious:\n\nx &lt;- factor(c(1, 1, 0, 0, 1, 0, 1, 1, 1, 0))\nas.numeric(x)\n\n [1] 2 2 1 1 2 1 2 2 2 1\n\n\nHere, the values we passed are 0 or 1, but R is 1-indexed, meaning all counting starts from 1, not 0. Internally, R represents the coding of this factor as 1/2, even though we passed the values 0/1.\nErrors can also be more subtle:\n\nx &lt;- factor(c(1, 1, 2, 5, 3, 3, 1, 6, 5, 1, 6, 2))\nas.numeric(x)\n\n [1] 1 1 2 4 3 3 1 5 4 1 5 2\n\n\nThe latter situation is common if you have ordered categorical data, for example levels of education in a population, coded as numbers 1 to 6. Unfortunately, when we created our factor, we failed to specificy the levels. As nobody with the category 4 happens to be present, the internal coding of the factor levels above 4 were shifted down one. Our output from as.numeric() is not the vector we passed in.\nWhen coercing factors to other types, note\n\nyou should NEVER convert from factor to numeric unless you know that’s what you want\nas.numeric() returns R’s internal codes for the factors, not their values\ninstead, convert to character first, then to numeric, i.e.:\n\n\nx &lt;- factor(c(1, 1, 2, 5, 3, 3, 1, 6, 5, 1, 6, 2))\nas.numeric(as.character(x))\n\n [1] 1 1 2 5 3 3 1 6 5 1 6 2\n\n\nOur output now represents the values we passed in!"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#dates-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#dates-1",
    "title": "MET581 Lecture 05",
    "section": "2.1 Dates",
    "text": "2.1 Dates"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#how-dates-work-in-r",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#how-dates-work-in-r",
    "title": "MET581 Lecture 05",
    "section": "2.2 How Dates Work in R",
    "text": "2.2 How Dates Work in R\n\nDates and times are not just strings, they have many formats like YYYY-MM-DD, MM/DD/YYYY, or even DD-MM-YYYY.\nHandling dates involves dealing with varied formats, time zones, leap years, and calculations between dates\nR has special packages to parse and manage dates efficiently.\nNote that dates are stored as doubles in R, but are displayed as dates.\nThis is because dates are stored as the number of days since 1st January, 1970 (UTC), which is the start of the “Unix epoch”.\n\n\nclass(\"2024-10-20\") # a simple date string\n\n[1] \"character\"\n\nclass(as.Date(\"2024-10-20\")) # a date object\n\n[1] \"Date\"\n\ntypeof(as.Date(\"2024-10-20\")) # but a double under the hood\n\n[1] \"double\""
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#introduction-to-lubridate",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#introduction-to-lubridate",
    "title": "MET581 Lecture 05",
    "section": "2.3 Introduction to lubridate",
    "text": "2.3 Introduction to lubridate\n\nlubridate is an R package designed to make working with dates and times easier\nIt helps parse different date formats, manipulate dates, and perform calculations.\nIt’s just not possible to be accurate in handling dates without a dedicated date package\nBut with lubridate, you can:\n\nparse dates from strings in common formats\ndo arithmetic with dates easily\naccount for time zones, leap years etc.\nhandle times too (though we don’t cover that here)"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#lubridatefunctions",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#lubridatefunctions",
    "title": "MET581 Lecture 05",
    "section": "2.4 lubridate::functions()",
    "text": "2.4 lubridate::functions()\n\nymd() converts strings to dates in the format YYYY-MM-DD (year-month-day)\nit returns a date object, which is a special type of object in R\nthere are several related functions which parse slightly different formats, such as mdy(), dmy(), ymd_hms() etc.\ntoday() returns the current date\nyear(), month(), day() extract the year, month, and day from a date object\ninterval() creates an interval between two dates\nwe can pass this to time_length(), which calculates the length of an interval in a specified unit\n\n\n# Create two date objects\nstart_date &lt;- ymd(\"2015-05-15\")\nend_date &lt;- ymd(\"2024-10-20\")\ndate_interval &lt;- interval(start_date, end_date)\n\nprint(time_length(date_interval, \"years\"))\n\n[1] 9.43287671233"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#lubridatepractice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#lubridatepractice",
    "title": "MET581 Lecture 05",
    "section": "2.5 lubridate::practice()",
    "text": "2.5 lubridate::practice()\n\nJohn Doe was born on 4th September, 1983. Create a date object for his birth date\n\n\njohns_dob &lt;- ymd('1983-09-04')\njohns_dob\n\n[1] \"1983-09-04\"\n\n\n\nHow old was John on the 6th June, 2020?\n\n\ninterval(johns_dob, ymd('2020-06-06')) |&gt; \n  time_length('years')\n\n[1] 36.7540983607\n\n\n\nWhat about today?\n\n\ninterval(johns_dob, today()) |&gt; \n  time_length('years')\n\nusing the lakers dataset which comes with lubridate\n\nchoose the correct function to replace some_function below:\n\n\nlakers |&gt; \n  as_tibble() |&gt; \n  mutate(date = ymd(sprintf(\"%08d\", date)))"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#lubridatepractice_more",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#lubridatepractice_more",
    "title": "MET581 Lecture 05",
    "section": "2.6 lubridate::practice_more()",
    "text": "2.6 lubridate::practice_more()\nusing the economics dataset from ggplot2\n\ntake the date column from the economics dataset and create two new columns which contain the year and month of each date\n\n\neconomics |&gt;\n  mutate(year = year(date), month = month(date))\n\n\n  \n\n\n\n\ncreate a new column called time_since_nyse, which contains the number of years between the founding of the New York Stock Exchange on 17th May, 1792 and the date column\n\n\neconomics |&gt;\n  mutate(time_since_nyse = interval(ymd('1792-05-17'), date) |&gt; \n           time_length('years'))"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#introduction-to-functions",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#introduction-to-functions",
    "title": "MET581 Lecture 05",
    "section": "3.1 Introduction to Functions",
    "text": "3.1 Introduction to Functions\nFunctions in R:\n\nallow you to automate tasks in a more powerful way than copy/paste\nmean you only need to update code in one place\nreduce the likelihood of errors\nare for others, but mainly for YOU\nshould be written for readability and reusability\nhave the format\n\n\nfunc_name &lt;- function(arg1, arg2, arg3) {\n  # function body\n}\n\nAs you are used to seeing when you take a look at the help of other functions, we can type the variables we expect to be passed to our new function between the parenthesis. The code that will be executed every time we call our function (also known as the body) has to go between {}. Remember to type () after the name of your function in order to execute it. You can also take advantage of the standard return rule: a function returns the last value that it computed. However, it is almost always best to use an explicit return() statement at the end of a function. Code should always be clear. Explicit is better than implicit.\nIt also is important to know that the variables declared inside the function only exist whilst the function is being executed. Additionally, if we pass a variable created outside the function as one of its arguments, its value will not be changed even if it is edited within the function. This is what is called pass by value."
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#functions-practice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#functions-practice",
    "title": "MET581 Lecture 05",
    "section": "3.2 Functions Practice",
    "text": "3.2 Functions Practice\ncall your functions after creating them to check their output\n\nwrite an empty function with no arguments, called ‘stub_func’\n\n\nstub_func &lt;- function(){}\n\n# you might also want to add a warning\nstub_func &lt;- function(){\n  warning('function is empty')\n}\n\n\nwrite a function that takes no arguments and returns the number 3 using the return() statement. Choose an appropriate name.\n\n\nthree_func &lt;- function(x=2, y=3){\n  z &lt;- x**y\n  \n  return(z)\n}\n\n\ncreate another function with no return statement or arguments, which only contains the number 3. Run the function. Is it different to before?\n\n\n# output is the same as before \nthree_func &lt;- function(){\n  3\n}\n\nThe output of the above two functions is identical. This is because, as mentioned above, R will return the most recently evaluated expression if no return() statement is given. Using an explicit return() statement, as in the first version, is preferred. Explicit is better than implicit.\n\ncreate a function called my_divide() which takes two arguments, ‘x’ and ‘y’ and returns x divided by y. Use an explicit return statement.\n\n\nmy_divide &lt;- function(x, y){\n  return(x/y)\n}\n\n\nwe want to still return a value when y is zero. Change the my_divide() function so that there is another argument called ‘tol’. Set it to a very low value, and add it to y before dividing\n\n\nmy_divide &lt;- function(x, y, tol = 0.00000001){\n  y &lt;- y + tol\n  return(x/y)\n}\n\nHere we set the default value for tol in function(). This means whenever the function is run, that value is always used for tol unless someone overwrites it by passing a new value in the function call. You can make it a lot easier for someone else to run your functions by setting sensible default values if it is appropriate to do so."
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#general-rules-for-writing-functions",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#general-rules-for-writing-functions",
    "title": "MET581 Lecture 05",
    "section": "3.3 General Rules for Writing Functions",
    "text": "3.3 General Rules for Writing Functions\n\n3.3.1 A short example\nTry to decipher the following code below\n\nwhat does it do?\ndoes it work? Are there errors?\n\n\ndf &lt;- data.frame(a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10))\ndf$a &lt;- (df$a - min(df$a, na.rm = TRUE)) / (max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))\ndf$b &lt;- (df$b - min(df$b, na.rm = TRUE)) / (max(df$b, na.rm = TRUE) - min(df$a, na.rm = TRUE))\ndf$c &lt;- (df$c - min(df$c, na.rm = TRUE)) / (max(df$c, na.rm = TRUE) - min(df$c, na.rm = TRUE))\ndf$d &lt;- (df$d - min(df$d, na.rm = TRUE)) / (max(df$d, na.rm = TRUE) - min(df$d, na.rm = TRUE))\n\nThe answer to the first question is that this code rescales each column of the randomly generated dataframe to have a range from 0 to 1. The answer to the second question is trickier: the code finishes successfully but if you inspect the line corresponding to column b, you might notice that the purpose of the code is not fulfilled. In fact, during the copy and paste of the column I forgot to replace the last column from a to b.\nIn the previous example, it is easy to spot the code that would be extremely useful to be transformed into a function. The first step once we have extracted the desired part is to detect and replace the variables by arguments:\n\nrescale &lt;- function(x) {\n    return((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)))\n}\n\nWe can now reimplement the previous code using our new function:\n\ndf &lt;- data.frame(a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10))\ndf$a &lt;- rescale(df$a)\ndf$b &lt;- rescale(df$b)\ndf$c &lt;- rescale(df$c)\ndf$d &lt;- rescale(df$d)\n\nThere is still room for improvement. In this case our dataset has only four rows, but even min() and max() can take a lot of time to run if we have hundreds of thousands of rows. Thus, we can create an auxiliary variable to compute min() only once:\n\nrescale &lt;- function(x) {\n    y &lt;- min(x, na.rm = TRUE)\n    return((x - y) / (max(x, na.rm = TRUE) - y))\n}\n\nWith a function created only once and used in several places, any change on the specifications of the problem can be easily transferred everywhere in the code.\n\n\n3.3.2 Improving on our function\nThere are a few details that we have disregarded during the creation of our previous function. First, we have created the variables with a single character, rather than using meaningful names. It is time to change that:\n\nrescale &lt;- function(column) {\n    min_value &lt;- min(column, na.rm = TRUE)\n    return((column - min_value) / (max(column, na.rm = TRUE) - min_value))\n}\n\nWhat do you think of the new names we have selected for our variables? Do you think they improve its readability?\nNext, it is always advisable to write comments in our code. We have implemented this function just now so we are still aware of what is going on. This can change in the future, or another person may want to use our code, so it is important to add comments to ease the comprehension of the code:\n\nrescale &lt;- function(column) {\n    # rescale vector to the range from 0 to 1\n    min_value &lt;- min(column, na.rm = TRUE)\n    return((column - min_value) / (max(column, na.rm = TRUE) - min_value))\n}\n\nFinally, we need to be careful with our function name. rescale() is a clear name, and it is a good idea to use verbs as function names. However, “rescale” has probably been used by other people in other packages. It is a common word for a common operation. We should either choose a less common word, or put our function in a package (easily done in R, but not covered here) so that we can explicitly call it with my_package::rescale() to avoid any confusion.\n\n\n3.3.3 The rules\nIn general:\n\nnever take variables created outside a function and use them from inside a function. If you want to use a variable in a function, pass it as an argument.\nif you have a lot of functions, it’s good practice to put them in a separate file and use source('my_functions_file.R') to load them.\ngenerally, functions should do one thing, but you can technically do whatever you like, including nested functions. That said, please don’t use nested functions.\nexplicit is always better than implicit. Code is there to be read by humans as well as machines. It should always be clear what you’ve done.\n\nWhen to write a function\nThis is easily the simplest thing to remember, but the hardest to implement\n\nif you find yourself writing/pasting the same thing 2/3 times\n\nWhen NOT to write a function\n\nif it’s a one-off bit of code you’ll never use again\nyou’re lazy\nyou hate future you"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#anonymous-functions",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#anonymous-functions",
    "title": "MET581 Lecture 05",
    "section": "3.4 Anonymous functions",
    "text": "3.4 Anonymous functions\n\nsometimes we need to package up some code in a function, but we know we’ll never need it again\nthis is common where we do something trivial, like a simple calculation\nin these cases we often create a function on the fly in the call to another function\nthese are called anonymous functions (because we don’t name them) or lambda functions (from lambda calculus)\nthey’re reasonably common in R, especially when using dplyr\nyou’ve already seen these in calls to functions like summarise()!\nthe tilde (~) is used to create a lambda function, and the dot (.x) is used to refer to the input\nyou will also see . used to refer to the input - this is the same as .x\nyou can actually use anything you like, but . and .x are common conventions\n\n\n# example use of an anonymous function with summarise\ngapminder |&gt;\n  group_by(continent) |&gt;\n  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) |&gt;\n  head(3)\n\n\n  \n\n\n\n\nIn this way,\n\n\n~ mean(.x, na.rm = TRUE)\n\nis equivalent to\n\nfunction(.x) {\n  mean(.x, na.rm = TRUE)\n}"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#conditional-execution",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#conditional-execution",
    "title": "MET581 Lecture 05",
    "section": "3.5 Conditional Execution",
    "text": "3.5 Conditional Execution\nAn if statement allows you to conditionally execute code. It looks like this:\n\nif (condition) {\n  # code executed when condition is TRUE\n} else {\n  # code executed when condition is FALSE\n}\n\nTo get help you need to surround it in backticks: ?`if`. Take into account that this help is not particularly helpful if you are not already an experienced programmer. The condition must evaluate to either TRUE or FALSE. In R, the way to combine multiple conditions is using a single & for and, or a single | for or.\nIt is also possible to use || (or) and && (and) to combine multiple logical expressions. However, these operators (&& and ||) are short-circuiting: as soon as || sees the first TRUE it returns TRUE without computing anything else. As soon as && sees the first FALSE it returns FALSE. This knowledge can be quite handy when you become a more experienced programmer. When first starting out though, it can be confusing! At the minimum, be aware that & and && are not the same thing, and you most likely need to use & or |. If you’re unsure, look it up, and check your output with ‘dummy’ examples to make sure it works as expected.\nHere is a simple example of a condition within a function:\n\nmyFunction &lt;- function(x) {\n    if (x &gt; 3) {\n        return(x - 3)\n    } else {\n        return(x)\n    }\n}\n\n\n3.5.1 Multiple conditions\nYou can concatenate multiple conditions in a simple structure:\n\nif (x &gt; 0) {\n    print(\"Positive\")\n} else if (x &lt; 0) {\n    print(\"Negative\")\n} else {\n    print(\"Zero\")\n}\n\nBut if you need to encode a method that involves a very long series of chained if statements, you should consider rewriting. One useful technique is the switch() function: it allows you to evaluate selected code based on position or name. Here is an example:\n\nfunction(x, y, op) {\n    switch(op,\n        plus = x + y,\n        minus = x - y,\n        times = x * y,\n        divide = x / y,\n        stop(\"Unknown operation!\")\n    )\n}\n\n\n\n3.5.2 Final Notes on if-else statements\n\nifelse() lets us use vectorised if-else statements (note, dplyr has a version called dplyr::if_else() that’s a bit stricter)\nif you have a lot of if statements, check out the switch() function\ndplyr::case_when() handles multiple vectorised if_else() statements\n\n\n# example use of case_when to simplify multiple if_else statements\ngapminder |&gt;\n  mutate(lifeExp_category = case_when(\n    lifeExp &lt; 50 ~ \"Low\",\n    lifeExp &gt;= 50 & lifeExp &lt;= 70 ~ \"Medium\",\n    lifeExp &gt; 70 ~ \"High\"\n  )) |&gt;\n  head(3)"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#using-your-functions-1",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#using-your-functions-1",
    "title": "MET581 Lecture 05",
    "section": "4.1 Using your functions",
    "text": "4.1 Using your functions\n\nmodularising code - a great way to make it more readable and reusable\nunit testing - a great way to make sure it works\npackages - a great way to share it"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#modularising-code",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#modularising-code",
    "title": "MET581 Lecture 05",
    "section": "4.2 Modularising code",
    "text": "4.2 Modularising code\n\nseparating code into functions and files makes it easier to re-use across projects\nit also makes it easier to maintain as we know where to go to change them\ntesting functions is also easier than testing code spread out in a script and interweaved with results"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#modularising-code---practice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#modularising-code---practice",
    "title": "MET581 Lecture 05",
    "section": "4.3 Modularising code - practice!",
    "text": "4.3 Modularising code - practice!\nAnswers not shown here as it is fundamentally interactive!\n\ncreate a new R script\ncreate a function in the script called my_add() that takes two arguments, x and y and returns their sum (do not paste it into the terminal!)\nsave the R script\nin the console, source the R script with source(\"path/to/script.R\")\nrun the function with my_add(2, 3)"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#types-of-testing",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#types-of-testing",
    "title": "MET581 Lecture 05",
    "section": "4.4 Types of testing",
    "text": "4.4 Types of testing\n\nthere are many ways to test your code! We have:\n\nunit tests in your local development environment or CI/CD pipeline\nintegration tests to check that your code works with other code\nquality assurance tests to check that your code meets a certain standard (usually done by a separate team)\nend-to-end tests to check that your code works in a real-world (production) environment"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#unit-testing",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#unit-testing",
    "title": "MET581 Lecture 05",
    "section": "4.5 unit testing",
    "text": "4.5 unit testing\n\nfor testing the smallest unit of code (functions)\nunit tests are functions that test your code to make sure it does what it is supposed to\nthis can mean checking it gives the correct output with expected input\nit can also mean making sure it errors as expected when you give it faulty input\nthey allow you to change your code and quickly check it still works\nthey allow you to sleep at night. This is especially true if you share code or results with colleagues and money/time/prestige/lives depend on it.\ndone in r using the testthat package"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#unit-testing---practice",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#unit-testing---practice",
    "title": "MET581 Lecture 05",
    "section": "4.6 Unit testing - practice!",
    "text": "4.6 Unit testing - practice!\n\ncreate a function called my_multiply() that takes two arguments, x and y and returns their product\n\n\nmy_multiply &lt;- function(x, y) {\n  return(x * y)\n}\n\n\nwrite a test for this function that checks that my_multiply(2, 3) returns 6\n\n\nmy_multiply &lt;- function(x, y) {\n  return(x * y)\n}\n\ntestthat::test_that(\"my_multiply() works as expected\",\n{\n  testthat::expect_equal(my_multiply(2, 3), 6)\n})"
  },
  {
    "objectID": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#final-notes-on-programming-in-r",
    "href": "05_wrangling_data_3/MET581-Lecture-05-Wrangling-Data-3-forcats-Lecture-Notes.html#final-notes-on-programming-in-r",
    "title": "MET581 Lecture 05",
    "section": "4.7 Final notes on programming in R",
    "text": "4.7 Final notes on programming in R\n\nmake variable names meaningful - if there is an error in your code it will be almost impossible to track if all your variables consist of two letters only. You code should be roughly readable without comments, simply by following your function and variable names.\ncomment your code - sometimes sections aren’t clear enough from names alone, so commenting is essential! Future you will be thankful! It’s also important not to over-comment. This is because you are unlikely to remember to change every comment to be correct as your code changes, and at some point your code and comments may give conflicting information!\nuse the space bar - improves readability, comprehension and it is free!\nindent your code - also for readability\nbe consistent in style. There are multiple style guides. Pick one and stick to it!"
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#programming",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#programming",
    "title": "Programming in R",
    "section": "Programming",
    "text": "Programming\n\nThe implementation of logic to facilitate specified computing operations and functionality",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#what-we-will-cover",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#what-we-will-cover",
    "title": "Programming in R",
    "section": "What we will cover",
    "text": "What we will cover\n\n\n\nConditional Execution\nDefining Function Arguments\nExplicit Constraints\nDot-dot-dot (…)\nPipes\nIterations with purr\n\n\n\nWhile loops\nOther loops – purrr functions\nThe map family\nShortcuts\nMultiple arguments\nwalk",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#package-load-and-conflicts",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#package-load-and-conflicts",
    "title": "Programming in R",
    "section": "Package load and conflicts",
    "text": "Package load and conflicts\n\nWe’ll load our packages early as is good practise!\nAs an aide, you may notice a verbose message when loading the tidyverse mentioning conflicts\nIf we load the conflicted package it will force an error if you use a function that has multiple sources (filter is commonly guilty of this!)\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.1     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(conflicted)",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#package-load-and-conflicts-1",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#package-load-and-conflicts-1",
    "title": "Programming in R",
    "section": "Package load and conflicts",
    "text": "Package load and conflicts\n\n# conflicted will make this error\nmtcars |&gt;\n  filter(gear == 4)\n\nError:\n! [conflicted] filter found in 2 packages.\nEither pick the one you want with `::`:\n• dplyr::filter\n• stats::filter\nOr declare a preference with `conflicts_prefer()`:\n• `conflicts_prefer(dplyr::filter)`\n• `conflicts_prefer(stats::filter)`\n\n\n\n# We can explicitly state which filter we prefer just once\nconflicts_prefer(dplyr::filter)\n\nmtcars[1:3, ] |&gt;\n  filter(gear == 4)\n\n               mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4    1",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#conditional-execution",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#conditional-execution",
    "title": "Programming in R",
    "section": "Conditional Execution",
    "text": "Conditional Execution\n\nIn R, the conditional execution of statements are performed within if() and {} blocks of code.\nTo start with, code is easier to understand (by you and everyone!) if you separate the lines and use indentations. Not like this:\n\nmyFunction &lt;- function(x) {\n  if (x &gt; 3) {\n    return(x - 3)\n  } else {\n    return(x)\n  }\n}\n\nNote that RStudio has a shortcut for auto-formatting highlighted code: ctrl+shift+A\n\nmyFunction &lt;- function(x) {\n  if (x &gt; 3) {\n    return(x - 3)\n  } else {\n    return(x)\n  }\n}",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#defining-function-arguments",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#defining-function-arguments",
    "title": "Programming in R",
    "section": "Defining Function Arguments",
    "text": "Defining Function Arguments\n\nThere are two types of arguments: Mandatory and Optional\nThe mandatory arguments are always at the beginning of the list of arguments, followed by optional arguments and their default values.\nExample:\n\npow &lt;- function(x, y = 2) {\n  return(x**y)\n}\n\nWhat do you think will happen if you try pow(3) and pow(3,3) in the console? Try it!",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#defining-function-arguments-1",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#defining-function-arguments-1",
    "title": "Programming in R",
    "section": "Defining Function Arguments",
    "text": "Defining Function Arguments\n\nThere are two ways of passing the values to a function: by order and by name.\nCheck the description of mean() by typing ?mean\nPassing unnamed arguments by order is bad programming because it means you have to remember the command and each of its arguments (try doing that for 1000 functions!), and it makes your code much less clear!\nPassing them by name means you can change the order\nBest practice is to define include the first argument (can be without name) of the function as the input data to be processed:\n\n\nmean(1:101, , TRUE) # bad!\nmean(na.rm = TRUE, x = 1:101) # better\nmean(1:101, na.rm = TRUE) # best :)",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#defining-function-arguments-2",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#defining-function-arguments-2",
    "title": "Programming in R",
    "section": "Defining Function Arguments",
    "text": "Defining Function Arguments\n\nAdding restrictions to the function means they can be more efficient\nFor example:\n\n\nmidValue &lt;- function(x) {\n  if (length(x) %% 2 == 0) {\n    stop(\"'x' has an even number of elements\", call. = FALSE)\n  }\n  midIndex &lt;- (length(x) + 1) / 2\n  return(x[midIndex])\n}\n\n\nThe stop function is executed when the modulus (remainder from division) is zero. A good error checking mechanism (even gives a message!)",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#defining-function-arguments-3",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#defining-function-arguments-3",
    "title": "Programming in R",
    "section": "Defining Function Arguments",
    "text": "Defining Function Arguments\n\nThe previous code can be simplified by using: stopifnot()\n\n\nmidValue &lt;- function(x) {\n  stopifnot(\"'x' has an even number of elements\" = length(x) %% 2 == 1)\n  midIndex &lt;- (length(x) + 1) / 2\n  return(x[midIndex])\n}\n\n\nAnd we can add multiple expressions in one go\n\n\ncalMean = function(x) {\n  stopifnot(exprs = {\n    \"'x' has to have a mean of 4 for some reason...\" = mean(x) == 4\n    \"'x' has to have length 4, don't ask why...\" = length(x) == 4\n  })\n  mean(x)\n}",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#dot-dot-dot",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#dot-dot-dot",
    "title": "Programming in R",
    "section": "Dot-Dot-Dot (…)",
    "text": "Dot-Dot-Dot (…)\n\nAn ellipsis means that the function can take any number of named or unnamed arguments (run ?print() for an example)\nFor example: We can use … to pass those additional arguments on to another function. Essentially, placeholders for other arguments.\n\n\ni01 &lt;- function(y, z) {\n  list(y = y, z = z)\n}\ni02 &lt;- function(a, ...) {\n  # Add 'a' to all elements in the list\n  lapply(i01(...), function(x) x + a)\n}\nstr(i02(a = 1, y = 2, z = 3))\n\nList of 2\n $ y: num 3\n $ z: num 4",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#dot-dot-dot-1",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#dot-dot-dot-1",
    "title": "Programming in R",
    "section": "Dot-Dot-Dot (…)",
    "text": "Dot-Dot-Dot (…)\n\nBy adding numbers at the end, it is possible to refer to elements of … by position (what position the generic arguments will sit in).\n\n\ni03 &lt;- function(...) {\n  list(first = ..1, third = ..3)\n}\nstr(i03(1, 2, 3))\n\nList of 2\n $ first: num 1\n $ third: num 3\n\n\n\nMore useful is list(...), which evaluates the arguments and stores them in a list. Very useful when working with data!\n\n\ni04 &lt;- function(...) {\n  list(...)\n}\nstr(i04(a = 1, b = 2))\n\nList of 2\n $ a: num 1\n $ b: num 2",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#pipes",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#pipes",
    "title": "Programming in R",
    "section": "Pipes |>",
    "text": "Pipes |&gt;\n\nThere are two types of pipeable functions: transformations and side-effects.\nTransformations are where an object is passed to the function’s first argument and a modified object is returned.\nWith side-effects, the passed object is not transformed. Instead, the function performs a function on that object, such as drawing a plot or saving a file.\n\n\nprint_missings &lt;- function(df) {\n  n &lt;- sum(is.na(df))\n  cat(\"Missing values: \", n, \"\\n\", sep = \"\")\n  invisible(df)\n}",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#pipes-1",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#pipes-1",
    "title": "Programming in R",
    "section": "Pipes |>",
    "text": "Pipes |&gt;\n\nIf we use our newly created print_missings() function, the invisible() command means that the input data frame will not get printed out but we can still use it in a pipe.\n\n\ndiamonds |&gt;\n  print_missings() |&gt;\n  mutate(carat = ifelse(carat &lt; 0.25, NA, carat)) |&gt;\n  print_missings()\n\nMissing values: 0\nMissing values: 573",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#iterations-with-purrr",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#iterations-with-purrr",
    "title": "Programming in R",
    "section": "Iterations with purrr",
    "text": "Iterations with purrr\n\n\nWe want to keep code efficient and less repetitive: performing the same thing on multiple inputs, repeating the operation on multiple columns, or on different datasets.\nTo help achieve this, iterations are used. For example:\n\n\nrescale &lt;- function(x) {\n  y &lt;- min(x, na.rm = TRUE)\n  return((x - y) / (max(x, na.rm = TRUE) - y))\n}\n\n\n\ndf &lt;- data.frame(a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10))\ndf$a &lt;- rescale(df$a)\ndf$b &lt;- rescale(df$b)\ndf$c &lt;- rescale(df$c)\ndf$d &lt;- rescale(df$d) # Wow this is tedious...",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#iterations-with-purrr-1",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#iterations-with-purrr-1",
    "title": "Programming in R",
    "section": "Iterations with purrr",
    "text": "Iterations with purrr\n\n\nThis can be simplified with a for loop\n\n\nfor (i in seq_along(df)) {\n  df[[i]] &lt;- rescale(df[[i]])\n} # This is much shorter (and less error prone)!\n\n\nA breif note, it’s generally better to vectorise your R code as it’s faster and often more succinct code, see here and here for more details\nHowever it is said that premature optimization is the root of all evil, so don’t stress to much if you’re analysing smaller datasets\nIf you’re writing a pipeline that’ll be rerun many times by lots of people, then optimisation is more important",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#other-loops---purr-functions",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#other-loops---purr-functions",
    "title": "Programming in R",
    "section": "Other loops - purr functions",
    "text": "Other loops - purr functions\n\npurrr is a package that helps to enhance R’s functional programming toolkit\npurrr functions help to break common challenges in list manipulation into independent pieces.\nBase R has family of functions known as “apply family”, that eliminates the need for many common for loops, apply(), lapply(), tapply()\npurrr has a family of functions called the “map family”.\nEach function takes a vector as input, applies a function to each piece, and then returns a new vector that has the same length as the input.",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#the-map-family",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#the-map-family",
    "title": "Programming in R",
    "section": "The map family",
    "text": "The map family\n\n\nEssentially, map() is the tidyverse equivalent of the base R apply family of functions.\nThe basic syntax is map(.x, .f, ...) where:\n\n.x is a list, vector or dataframe\n.f is a function\nmap() will then apply .f to each element of .x in turn.",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#the-map-family-1",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#the-map-family-1",
    "title": "Programming in R",
    "section": "The map family",
    "text": "The map family\n\n\nWe can use the map function to compute the mean and standard deviation of previous dataset.\n\n\n# I'm using round here so we don't get so many decimal places printed\nmap_dbl(df, mean) |&gt; round(digits = 2)\n\n   a    b    c    d \n0.58 0.33 0.63 0.68 \n\nmap_dbl(df, sd) |&gt; round(digits = 2)\n\n   a    b    c    d \n0.34 0.28 0.28 0.32 \n\n# And here's the native R sapply equivalent\nsapply(df, mean) |&gt; round(digits = 2)\n\n   a    b    c    d \n0.58 0.33 0.63 0.68 \n\n\n\n\nAnd if you see the help page for map_dbl() you’ll notice the ... which allows us to pass function arguments:\n\n\nmap_dbl(df, mean, na.rm = TRUE) |&gt; round(digits = 2)\n\n   a    b    c    d \n0.58 0.33 0.63 0.68",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#the-map-family-2",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#the-map-family-2",
    "title": "Programming in R",
    "section": "The map family",
    "text": "The map family\n\n\nWe can even use a string or a position (integer) to extract components from the input data - very useful when working with big datasets!\n\n\nx &lt;- list(\n  x = list(a = 1, b = 2, c = 3),\n  y = list(a = 4, b = 5, c = 6),\n  z = list(a = 7, b = 8, c = 9)\n)\nx |&gt; map_dbl(\"a\")\n\nx y z \n1 4 7 \n\nx |&gt; map_dbl(2)\n\nx y z \n2 5 8",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#map_-functions",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#map_-functions",
    "title": "Programming in R",
    "section": "map_ functions",
    "text": "map_ functions\n\n\nOne property of the map() function is that it will always return a list.\nTo change the output data type, we can use multiple versions of map_*():\n\nmap_lgl() returns a logical.\nmap_int() returns a integer vector.\nmap_dbl() returns a double vector.\nmap_chr() returns a character vector.\nmap_df() returns a data frame.",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#shortcuts",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#shortcuts",
    "title": "Programming in R",
    "section": "Shortcuts",
    "text": "Shortcuts\n\nFit a linear model to each group in a dataset. This example splits up the mtcars dataset into three pieces and fits the linear model to each piece.\n\n\nmodels &lt;- mtcars %&gt;%\n  # note this is an example where the native R pipe won't work!\n  split(.$cyl) |&gt;\n  map(function(df) {\n    lm(mpg ~ wt, data = df)\n  })\n# Using tidyverse annonymous function syntax\nmodels2 &lt;- mtcars %&gt;%\n  split(.$cyl) |&gt;\n  map(~ lm(mpg ~ wt, data = .))\n# And here is the the native R equivalent\nmodels3 &lt;- mtcars %&gt;%\n  split(.$cyl) |&gt;\n  map(\\(df) lm(mpg ~ wt, data = df))",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#shortcuts-1",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#shortcuts-1",
    "title": "Programming in R",
    "section": "Shortcuts",
    "text": "Shortcuts\n\nThe . used in the second example is a placeholder for the dataset we’ve piped in (mtcars) so we can access parts of it (via $)\nNote that the placeholder for the native R pipe (|&gt;) is a _, but it doesn’t have the same functionality as the magritter pipe! See here for more info on differences\nExample: we want to get the \\(R^2\\) from our models\n\n\nmodels |&gt;\n  map(summary) %&gt;%\n  map_dbl(~ .$r.squared)\n\n             4              6              8 \n0.508632596323 0.464510150551 0.422965536496 \n\nmodels |&gt;\n  map(summary) |&gt;\n  map_dbl(\\(model) model$r.squared)\n\n             4              6              8 \n0.508632596323 0.464510150551 0.422965536496",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#multiple-arguments",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#multiple-arguments",
    "title": "Programming in R",
    "section": "Multiple Arguments",
    "text": "Multiple Arguments\n\n\npurrr gives us the option to include more than one input in parallel with map2() and pmap().\nImagine we would like to simulate some random normal distributions with different means, and each vary, we could do:\n\n\n# Define input lists\nmu &lt;- list(5, 10, -3)\nsigma &lt;- list(1, 5, 10)\n# Generate distributions\nmap2(mu, sigma, rnorm, n = 5) |&gt;\n  str()\n\nList of 3\n $ : num [1:5] 4.78 4.14 3.79 4.6 6.78\n $ : num [1:5] 9.28 12.3 14.03 5.16 6.98\n $ : num [1:5] -8.087 -6.937 -9.55 0.504 -10.148",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#multiple-arguments-1",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#multiple-arguments-1",
    "title": "Programming in R",
    "section": "Multiple Arguments",
    "text": "Multiple Arguments\n\nThe code can be understood by the following figure:",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#multiple-arguments-2",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#multiple-arguments-2",
    "title": "Programming in R",
    "section": "Multiple Arguments",
    "text": "Multiple Arguments\n\nThere is no map3 or map4, so what if we want more than 2 arguments? purrr has the function pmap() for an arbitrary number of args.\n\n\n\nn &lt;- list(1, 3, 5)\narguments &lt;- list(n, mu, sigma)\n\narguments |&gt;\n  pmap(rnorm) |&gt;\n  str()\n\n\nList of 3\n $ : num 4.58\n $ : num [1:3] 6.66 10.37 5.16\n $ : num [1:5] 5.547 8.661 -14.585 -1.5 0.655\n\n\n\nWe can go even further by increasing the complexity of the problem using the exec() function.\n\n\nfuncs &lt;- c(\"runif\", \"rnorm\", \"rpois\")\nparams &lt;- list(list(min = -1, max = 1), list(sd = 5), list(lambda = 10))\n\nmap2(funcs, params, \\(fn, args) exec(fn, !!!args, n = 5)) |&gt;\n  str()\n\nList of 3\n $ : num [1:5] 0.2424 -0.0253 0.3309 0.353 0.3168\n $ : num [1:5] 0.346 -2.312 7.133 1.271 -3.107\n $ : int [1:5] 10 12 7 7 9",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#walk",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#walk",
    "title": "Programming in R",
    "section": "walk",
    "text": "walk\n\nwalk() is an alternative to map that we use we call a function for its side effects, disregarding its return value.\n\n\nx &lt;- list(1, \"a\", 3)\nx |&gt;\n  walk(print)\n\n[1] 1\n[1] \"a\"\n[1] 3\n\n\n\nReally useful when outputting datasets in lists! (such as microarray data)\nSimilar to map(), purrr also has walk2() and pwalk()",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#walk2",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#walk2",
    "title": "Programming in R",
    "section": "walk2",
    "text": "walk2\n\ndf0 &lt;- tibble(x = 1:3, y = rnorm(3))\ndf1 &lt;- tibble(x = 1:3, y = rnorm(3))\ndf2 &lt;- tibble(x = 1:3, y = rnorm(3))\nanimalFrames &lt;- tibble(\n  animals = c('sheep', 'cow', 'horse'),\n  frames = list(df0, df1, df2)\n)\n# Save a list of dataframes\nanimalFrames %&gt;%\n  walk2(\n    .x = .$animals,\n    .y = .$frames,\n    .f = ~ write_csv(.y, str_c(\"test_\", .x, \".csv\"))\n  )",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#pwalk",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#pwalk",
    "title": "Programming in R",
    "section": "pwalk",
    "text": "pwalk\n\npmap() and pwalk() allow you to provide any number of arguments in a list.\n\n\n# Let's set-up a dataframe and function to use with pwalk\nds_mt &lt;-\n  mtcars |&gt;\n  rownames_to_column(\"model\") |&gt;\n  mutate(am = factor(am, labels = c(\"auto\", \"manual\"))) |&gt;\n  select(model, mpg, wt, cyl, am) |&gt;\n  sample_n(3)\nfoo &lt;- function(model, am, mpg) {\n  print(paste(\"The\", model, \"has a\", am, \"transmission and gets\", mpg, \"mpgs.\"))\n}\n# Now we can use pwalk\nds_mt |&gt;\n  select(model, am, mpg) |&gt;\n  pwalk(.l = _, .f = foo)\n\n[1] \"The Fiat 128 has a manual transmission and gets 32.4 mpgs.\"\n[1] \"The Merc 230 has a auto transmission and gets 22.8 mpgs.\"\n[1] \"The Volvo 142E has a manual transmission and gets 21.4 mpgs.\"",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#while-loops",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#while-loops",
    "title": "Programming in R",
    "section": "While loops",
    "text": "While loops\n\nYou’re unlikely to every use them in a data analysis context (I never have!), but they evaluate their body code until a condition is met\nExample: see how many times we need to flip a coin to get three heads in a row:\n\n\n\nflip_coin &lt;- function() {\n  sample(c(\"T\", \"H\"), 1)\n}\nnumFlips &lt;- 0\nnumHeads &lt;- 0\nwhile (numHeads &lt; 3) {\n  if (flip_coin() == \"H\") {\n    numHeads &lt;- numHeads + 1\n  } else {\n    numHeads &lt;- 0\n  }\n  numFlips &lt;- numFlips + 1\n}\ncat(\"Number of flips to get 3 heads in a row: \", numFlips)\n\n\nNumber of flips to get 3 heads in a row:  41\n\n\n\nBeware that while loops can crash if the condition being evaluated never becomes false!",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#workshop-time",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#workshop-time",
    "title": "Programming in R",
    "section": "Workshop time!",
    "text": "Workshop time!\n\nThese slides and the workshop can be found on the website here:",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#section",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#section",
    "title": "Data Visualisation in R",
    "section": "",
    "text": "Visualisation\nMaking you data come to life!",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#objectives",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#objectives",
    "title": "Data Visualisation in R",
    "section": "Objectives",
    "text": "Objectives\n\nHow data can be visualised in R\nLearn how to adjust graphics\nGet familiar with ggplot2 and it’s grammar of graphics to create amazing figures",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#data-visualisation---an-overview",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#data-visualisation---an-overview",
    "title": "Data Visualisation in R",
    "section": "Data Visualisation - An Overview",
    "text": "Data Visualisation - An Overview\n\nThe overall aim of visualising data:\n\nMake all your plots as self explanatory as possible!\n\nFor this lecture, we will focus on ggplot2, a tidyverse package\n\nInspired on the Grammer of Graphics, a book that aims to formalise visualisations into layers\n\nHas multiple add-ons, such as ggrepel (for text labels) and ggpubr (for publication-ready plots) or patchwork (for combining multiple plots)",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#base-r-plots",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#base-r-plots",
    "title": "Data Visualisation in R",
    "section": "Base R plots",
    "text": "Base R plots\n\nGraphs can be easily generated with the base R syntax\n\n\n\ndata &lt;- c(2, 3, 6, 4, 9)\nplot(data)\n\nplot(data, type = \"l\")",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#base-r-plots-1",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#base-r-plots-1",
    "title": "Data Visualisation in R",
    "section": "Base R plots",
    "text": "Base R plots\n\nGraphs can be easily generated with the base R syntax\n\n\n\nplot(data, type = \"o\", col = \"blue\")\n\nbarplot(data)",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#ggplot2",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#ggplot2",
    "title": "Data Visualisation in R",
    "section": "ggplot2",
    "text": "ggplot2\n\nggplot2 is a lot more useful and user friendly than base R, making plots look a lot nicer and with more options for building and displaying graphics\nWe’ll start with an old favourite, the mtcars dataset!\n\n\n\n# Load packages\n# ggplot2 is in the tidyverse\nlibrary(tidyverse)\nlibrary(conflicted)\nlibrary(ggrepel)\nlibrary(ggstatsplot)\nlibrary(plotly)\nconflicts_prefer(dplyr::filter)\n\nmtcars |&gt;\n  ggplot(aes(x = mpg, y = hp)) +\n  geom_point()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#ggplot2---layers",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#ggplot2---layers",
    "title": "Data Visualisation in R",
    "section": "ggplot2 - layers",
    "text": "ggplot2 - layers\n\nggplot() is the main function, and this creates the initial ggplot object where we then add multiple layers\nA layer is a collection of geometric elements (geoms) and statistical transformations\nAn easy example of a “geom” element layer is geom_point(), which adds a scatter plot\nAesthetic mappings (aes) are specified with aes(). This is how variables (columns) in the input data are mapped to visual, or “aesthetic”, properties.\nYou can give global “aesthetics” to a plot (will appear in every layer) by specifying this in the ggplot() function, or local aesthetics in individual layers (such as in geom_point()).",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#themes",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#themes",
    "title": "Data Visualisation in R",
    "section": "Themes",
    "text": "Themes\n\nA “theme” controls the finer points of the plot, like the font size and background colour\nThis is essentially customising the non-data elements\nFor example, change the default grey background to white background1\n\n\n\nmtcars |&gt;\n  ggplot(aes(x = mpg, y = hp)) +\n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nthe default is theme_grey()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#themes---global",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#themes---global",
    "title": "Data Visualisation in R",
    "section": "Themes - Global",
    "text": "Themes - Global\n\nThese themes can be set globally, so for all plots, using the theme_set() function\n\n\n\ntheme_set(theme_bw())\n\nmtcars |&gt;\n  ggplot(aes(x = mpg, y = hp)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nYou can see some more themes provided by ggplot2 here",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#quick-plots-with-qplot",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#quick-plots-with-qplot",
    "title": "Data Visualisation in R",
    "section": "Quick plots with qplot",
    "text": "Quick plots with qplot\n\nA quicker version of ggplot! Good for very basic figures\n\n\n\nqplot(mpg, hp, data = mtcars)",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#aesthetics-colour",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#aesthetics-colour",
    "title": "Data Visualisation in R",
    "section": "Aesthetics: Colour",
    "text": "Aesthetics: Colour\n\nWe can visualise more information by colouring the data points by another variable\nFor example, in mtcars we can map the number of cylinders to the colour aesthetic (or color if you want to spell it wrong…)\n\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp, colour = factor(cyl))) +\n  geom_point()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#aesthetics-size-and-shape",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#aesthetics-size-and-shape",
    "title": "Data Visualisation in R",
    "section": "Aesthetics: Size and Shape",
    "text": "Aesthetics: Size and Shape\n\nWe can also map the number of cylinders to the size or shape aesthetic\n\n\n\n# Using size\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp, size = cyl)) +\n  geom_point()\n\n# Using shape\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp, shape = factor(cyl))) +\n  geom_point()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#aesthetics-shape-colour",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#aesthetics-shape-colour",
    "title": "Data Visualisation in R",
    "section": "Aesthetics: Shape & Colour",
    "text": "Aesthetics: Shape & Colour\n\nWe can combine aesthetics as we like too!\n\n\n\nggplot(\n  data = mtcars,\n  mapping = aes(x = mpg, y = hp, shape = factor(cyl), colour = factor(cyl))\n) +\n  geom_point()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#aesthetics-conditional-colour",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#aesthetics-conditional-colour",
    "title": "Data Visualisation in R",
    "section": "Aesthetics: Conditional Colour",
    "text": "Aesthetics: Conditional Colour\n\nWe can even map an aesthetic to a datapoint based on a condition, i.e. only change colour when a certain condition is met.\nFor example here, the colour varies depending on whether the car has 4 cylinders or not (cyl == 4 being TRUE or FALSE)\n\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp, colour = cyl == 4)) +\n  geom_point()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#aesthetics-fill",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#aesthetics-fill",
    "title": "Data Visualisation in R",
    "section": "Aesthetics: Fill",
    "text": "Aesthetics: Fill\n\nFill is yet another aesthetic\n\n\n\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut, fill = cut))",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#facets",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#facets",
    "title": "Data Visualisation in R",
    "section": "Facets",
    "text": "Facets\n\nA “facet” is one section of something that has many sections.\nA “facet” in ggplot allows you to break up the data into different subsets and plot individual panels based on it\nCreates “subplots” or panel-like figures\nReally useful when you’ve got categorical variables (such as gender)\n\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp, colour = factor(cyl))) +\n  geom_point() +\n  facet_wrap(~cyl)",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#facets-layout",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#facets-layout",
    "title": "Data Visualisation in R",
    "section": "Facets: layout",
    "text": "Facets: layout\n\nWe can change the layout of the “facets” locally:\n\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp, colour = factor(cyl))) +\n  geom_point() +\n  facet_wrap(~cyl, ncol = 1)\n# Note the following is equivalent\n# facet_wrap(~ cyl, dir = \"v\")",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#facet-grids",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#facet-grids",
    "title": "Data Visualisation in R",
    "section": "Facet grids",
    "text": "Facet grids\n\nWe can combine 2 variables with facet_grid()\n\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp, colour = factor(cyl))) +\n  geom_point() +\n  facet_grid(am ~ cyl)",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#additional-geoms",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#additional-geoms",
    "title": "Data Visualisation in R",
    "section": "Additional Geoms",
    "text": "Additional Geoms\n\nSo far we’ve only used geom_point(), but there are naturally many more geoms we can use\ngeom_smooth() draws a smoothed line based on the trend of the provided data\nThey can be used individually, or layered on top of one another, which is the core of the grammer of graphics\n\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_smooth()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#combining-geoms",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#combining-geoms",
    "title": "Data Visualisation in R",
    "section": "Combining geoms",
    "text": "Combining geoms\n\nHere we layer two geoms\n\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_smooth() +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nNote that the order of geoms can matter! (though in this case it doesn’t :P)",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#layering-geoms-and-additional-aesthetics",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#layering-geoms-and-additional-aesthetics",
    "title": "Data Visualisation in R",
    "section": "Layering geoms and additional aesthetics",
    "text": "Layering geoms and additional aesthetics\n\nThe order in which we give aesthetics can also matter\n\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp, colour = factor(cyl))) +\n  geom_smooth() +\n  geom_point()\n\n# A more sensible order?\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_smooth() +\n  geom_point(aes(colour = factor(cyl)))",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#statistical-transformations-count",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#statistical-transformations-count",
    "title": "Data Visualisation in R",
    "section": "Statistical Transformations: count",
    "text": "Statistical Transformations: count\n\nSome plots transform your data internally and plot those new values instead of raw values\nThe stat argument of different plot types (geom functions) specifies the statistical transformation\nFor example, geom_bar() uses stat = \"count\" as it’s default to create counts of the mapped variable (as in what a bar chart does):\n\n\n\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut))\n\n# Worth noting: geom and stats are often interchangeable\nggplot(data = diamonds) +\n  stat_count(mapping = aes(x = cut))",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#statistical-transformations-identity",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#statistical-transformations-identity",
    "title": "Data Visualisation in R",
    "section": "Statistical Transformations: identity",
    "text": "Statistical Transformations: identity\n\nAnother commonly used stat is “identity” when plotting bars with heights based on raw values\n\n\n\n## example tibble\ndemo &lt;- tribble(\n  ~cut        , ~value ,\n  \"Fair\"      ,   1610 ,\n  \"Good\"      ,   4906 ,\n  \"Very Good\" ,  12082 ,\n  \"Premium\"   ,  13791 ,\n  \"Ideal\"     ,  21551\n)\n\nggplot(data = demo) +\n  geom_bar(mapping = aes(x = cut, y = value), stat = \"identity\")",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#break",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#break",
    "title": "Data Visualisation in R",
    "section": "Break",
    "text": "Break",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#positional-adjustments",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#positional-adjustments",
    "title": "Data Visualisation in R",
    "section": "Positional Adjustments",
    "text": "Positional Adjustments\n\nThe position argument can control how geoms occupy space\n\n\n\n# stacked\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut, fill = clarity))\n\n# side by side\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut, fill = clarity), position = \"dodge\")\n# Note the default is position = \"stack\"",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#labels-titles-and-captions",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#labels-titles-and-captions",
    "title": "Data Visualisation in R",
    "section": "Labels: Titles and Captions",
    "text": "Labels: Titles and Captions\n\nAnother editable part of a plot are the text labels, which we can add or modify using labs()\n\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_point(aes(colour = factor(cyl))) +\n  labs(title = \"Title\", subtitle = \"Subtitle\", caption = \"Small Caption\")",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#labels-axis-and-legends",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#labels-axis-and-legends",
    "title": "Data Visualisation in R",
    "section": "Labels: Axis and legends",
    "text": "Labels: Axis and legends\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_point(aes(colour = factor(cyl))) +\n  labs(\n    x = \"Miles per gallon (mpg)\",\n    y = \"Horsepower (hp)\",\n    colour = \"Cylinders\"\n  )",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#labels-axis-alternative",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#labels-axis-alternative",
    "title": "Data Visualisation in R",
    "section": "Labels: Axis alternative",
    "text": "Labels: Axis alternative\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_point(aes(colour = factor(cyl))) +\n  xlab(\"Miles per gallon\") +\n  ylab(\"Horsepower\")",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#annotations",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#annotations",
    "title": "Data Visualisation in R",
    "section": "Annotations",
    "text": "Annotations\n\nTo add annotation to data points, we can use geom_text() and geom_label()\n\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  geom_text(aes(label = rownames(mtcars)))\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  geom_label(aes(label = rownames(mtcars)), alpha = 0)",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#annotations-ggrepl",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#annotations-ggrepl",
    "title": "Data Visualisation in R",
    "section": "Annotations: ggrepl",
    "text": "Annotations: ggrepl\n\nThe ggrepl package can help make more legible labels\n\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  ggrepel::geom_text_repel(\n    aes(\n      label = rownames(mtcars)\n    ),\n    max.overlaps = 100\n  )\n# Label only a subset\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  ggrepel::geom_text_repel(\n    aes(\n      label = rownames(mtcars[1:3, ])\n    ),\n    data = mtcars[1:3, ]\n  )",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#zooming",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#zooming",
    "title": "Data Visualisation in R",
    "section": "Zooming",
    "text": "Zooming\n\nTo control the plot limits, you have 3 methods:\n\nAdjusting the data that’s plotted\nSetting xlim and ylim in coord_cartesian() (do this!!)\nSetting the limits in each scale\n\n\n\n\n# Not ideal - need strong justification!\nmtcars |&gt;\n  filter(mpg &gt;= 20, hp &lt;= 150) |&gt;\n  ggplot(mapping = aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  geom_smooth()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#zooming---coord_cartesian",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#zooming---coord_cartesian",
    "title": "Data Visualisation in R",
    "section": "Zooming - coord_cartesian",
    "text": "Zooming - coord_cartesian\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  geom_smooth() +\n  coord_cartesian(xlim = c(20, 35), ylim = c(0, 150))\n\n\n\n\n\n\n\n\n\nThis is the RIGHT WAY, using coord_cartesian()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#zooming---lims",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#zooming---lims",
    "title": "Data Visualisation in R",
    "section": "Zooming - lims",
    "text": "Zooming - lims\n\n\nggplot(data = mtcars, mapping = aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  geom_smooth() +\n  lims(x = c(20, 40), y = c(0, 150))\n\n\n\n\n\n\n\n\n\nThis is also not ideal, as it removes data outside the limits!",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#scales",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#scales",
    "title": "Data Visualisation in R",
    "section": "Scales",
    "text": "Scales\n\n“scale” allows you control mapping things like colour, size and shape to data values\n“scale” draws a legend or axes\nggplot2 automatically adds default scales behind the scenes\n\n\n\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl)))",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#scales---defaults",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#scales---defaults",
    "title": "Data Visualisation in R",
    "section": "Scales - defaults",
    "text": "Scales - defaults\n\nIs the same as:\n\n\n\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  scale_x_continuous() +\n  scale_y_continuous() +\n  scale_colour_discrete()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#scales---axis-breaks",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#scales---axis-breaks",
    "title": "Data Visualisation in R",
    "section": "Scales - axis breaks",
    "text": "Scales - axis breaks\n\nThe naming scheme tells you the aesthetic (x_, y_, colour_, etc) and the name of the scale (continuous, discrete)\n\n\n\n# Change the breaks on the axis\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  scale_y_continuous(\n    breaks = seq(0, 350, by = 50)\n  )",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#scales---axis-labels",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#scales---axis-labels",
    "title": "Data Visualisation in R",
    "section": "Scales - axis labels",
    "text": "Scales - axis labels\n\n\n# Adding text to labels\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  scale_y_continuous(\n    breaks = seq(0, 350, by = 50),\n    labels = paste0(\n      \"HP \",\n      seq(0, 350, by = 50)\n    )\n  )\n\n# No labels\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  scale_y_continuous(\n    breaks = seq(0, 350, by = 50),\n    labels = NULL\n  )",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#legend-layout---position",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#legend-layout---position",
    "title": "Data Visualisation in R",
    "section": "Legend Layout - position",
    "text": "Legend Layout - position\n\nThe legend can of course also be modified in lots of ways\n\n\n\np &lt;- ggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl)))\n\n# Legend at the top\np + theme(legend.position = \"top\")\n# No legend\np + theme(legend.position = \"none\")\n# Note - the default is \"right\"",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#legend-layout---guides",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#legend-layout---guides",
    "title": "Data Visualisation in R",
    "section": "Legend Layout - guides",
    "text": "Legend Layout - guides\n\nWe can use the guides() function to control the legend display\n\n\n\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(colour = factor(cyl)), alpha = 0.5) +\n  guides(\n    colour = guide_legend(\n      ncol = 2,\n      override.aes = list(size = 3, alpha = 1)\n    )\n  )",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#controlling-the-colour-scale---alt-palettes",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#controlling-the-colour-scale---alt-palettes",
    "title": "Data Visualisation in R",
    "section": "Controlling the Colour Scale - alt palettes",
    "text": "Controlling the Colour Scale - alt palettes\n\nThe default ggplot2 colours we get are a bit rubbish\nMany pre-defined colour palettes are available to change that\nSuch as from the RColorBrewer package\nPalette explainer here and interactive browser here\n\n\n\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  scale_colour_brewer(palette = \"Set1\")",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#controlling-the-colour-scale---manually",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#controlling-the-colour-scale---manually",
    "title": "Data Visualisation in R",
    "section": "Controlling the Colour Scale - manually",
    "text": "Controlling the Colour Scale - manually\n\n\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  scale_colour_manual(values = c(\"black\", \"pink\", \"turquoise\"))\n\n# Explicitly setting the values to colours\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl))) +\n  scale_colour_manual(\n    values = c(\n      `4` = \"black\",\n      `6` = \"pink\",\n      `8` = \"red\"\n    )\n  )",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#saving-plot---the-ggplot2-way",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#saving-plot---the-ggplot2-way",
    "title": "Data Visualisation in R",
    "section": "Saving plot - the ggplot2 way",
    "text": "Saving plot - the ggplot2 way\n\nWe of course want to be able to save the beautiful plots we make! We can do this using ggsave()\nIf not specified, it will save the most recent plot we create to our disk\nThe format of the plot is defined in the filename extension (.pdf or .png for example)\n\n\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl)))\n# Save the last printed plot\nggsave(filename = \"my_plot_1.pdf\")\n# Save the plot to a variable first\nplot &lt;- ggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl)))\nggsave(filename = \"my_plot_1.png\", plot)",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#saving-plot---the-base-r-way",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#saving-plot---the-base-r-way",
    "title": "Data Visualisation in R",
    "section": "Saving plot - the base R way",
    "text": "Saving plot - the base R way\n\nWith base R we need to set the device we want to save with first, then print the plot, and then close the device\n\n\n# Save to png\npng(filename = \"my_plot.png\", width = 500, height = 400)\n# Print the plot\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl)))\n# Close the device\ndev.off()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#compound-plots",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#compound-plots",
    "title": "Data Visualisation in R",
    "section": "Compound plots",
    "text": "Compound plots\n\nWhat if you want to put two or more plots together to save?\n\n\n\nplot1 &lt;- ggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl)))\nplot2 &lt;- ggplot(mtcars, aes(x = qsec, y = hp)) +\n  geom_point(aes(color = factor(cyl)))\nplot1 + plot2\n\n\n\n\n\n\n\n\n\n\nSee the patchwork or cowplot packages for more info",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#boxplots-and-violin-plots",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#boxplots-and-violin-plots",
    "title": "Data Visualisation in R",
    "section": "Boxplots and Violin Plots",
    "text": "Boxplots and Violin Plots\n\nBoxplots and Violin Plots are very common within biolosciences(protein levels, patient data, SNP frequency etc.)\nBe warned that boxplots can sometimes be misleading and so it’s always good to check the raw data too! See here for more info\nHave a go at creating your own boxplots and violin plots using the mtcars/diamonds/other datasets!\n\n\n\nmtcars$cyl &lt;- as.factor(mtcars$cyl)\n# Make base plot\np &lt;- ggplot(mtcars, aes(cyl, mpg))\n\np + geom_boxplot(aes(colour = cyl))",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#boxplots-and-violin-plots---examples",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#boxplots-and-violin-plots---examples",
    "title": "Data Visualisation in R",
    "section": "Boxplots and Violin Plots - examples",
    "text": "Boxplots and Violin Plots - examples\n\ngeom_jitter is like geom_point, but adds noise so point aren’t on top of each other, handy for mapping the raw data onto other geoms!\n\n\n\np + geom_boxplot(aes(fill = cyl), alpha = 0.3) + geom_jitter(size = 0.8)\n# Violin\np + geom_violin(aes(fill = cyl))",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#boxplots-and-violin-plots---combining-geoms",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#boxplots-and-violin-plots---combining-geoms",
    "title": "Data Visualisation in R",
    "section": "Boxplots and Violin Plots - combining geoms",
    "text": "Boxplots and Violin Plots - combining geoms\n\nWe can of course layer them on top too!\n\n\n\n# All three!\np +\n  geom_violin(aes(fill = cyl), width = 1.4) +\n  geom_boxplot(width = 0.1, colour = \"grey\", alpha = 0.3) +\n  geom_jitter(size = 0.8, width = 0.1, colour = \"grey\") +\n  scale_fill_viridis_d() +\n  theme_minimal()",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#boxplots-and-violin-plots---numeric-to-categorical",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#boxplots-and-violin-plots---numeric-to-categorical",
    "title": "Data Visualisation in R",
    "section": "Boxplots and Violin Plots - numeric to categorical",
    "text": "Boxplots and Violin Plots - numeric to categorical\n\n\n# discretise numeric data into categorical\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_boxplot(aes(\n    group = cut_width(carat, 0.2)\n  ))\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_boxplot(aes(\n    group = cut_number(carat, 20)\n  ))",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#d-plots",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#d-plots",
    "title": "Data Visualisation in R",
    "section": "3D Plots",
    "text": "3D Plots\n\nplotly can be used to make 3D plots, but this is very situational and should probably only be done in cases where the plot is intended to be interactive\n\n\nmtcars$gear &lt;- as.factor(mtcars$gear)\n\nplot_ly(\n  mtcars,\n  x = ~wt,\n  y = ~hp,\n  z = ~qsec,\n  color = ~gear\n) |&gt;\n  add_markers() |&gt;\n  plotly::layout(\n    scene = list(\n      xaxis = list(title = 'Weight'),\n      yaxis = list(title = 'Gross horsepower'),\n      zaxis = list(title = '1/4 mile time')\n    )\n  )",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#d-plots-output",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#d-plots-output",
    "title": "Data Visualisation in R",
    "section": "3D Plots",
    "text": "3D Plots",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#ggstatsplot",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#ggstatsplot",
    "title": "Data Visualisation in R",
    "section": "ggstatsplot",
    "text": "ggstatsplot\n\nA handy way to quickly look at correlations!\n\n\nggstatsplot::ggscatterstats(mtcars, x = hp, y = qsec)",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#links-and-resources",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#links-and-resources",
    "title": "Data Visualisation in R",
    "section": "Links and Resources",
    "text": "Links and Resources\n\nDon’t try to memorise everything, look stuff up!\nggplot2 cheat sheet: http://rstudio.com/resources/cheatsheets\nA book on ggplot2 by the authors: https://ggplot2-book.org\nAnother nice book: https://rkabacoff.github.io/datavis/index.html\nhttps://exts.ggplot2.tidyverse.org/gallery/\nhttps://www.r-graph-gallery.com\nhttps://github.com/jrnold/ggthemes",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#thats-all-folks",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#thats-all-folks",
    "title": "Data Visualisation in R",
    "section": "That’s all folks!",
    "text": "That’s all folks!\n\nThese slides can be found on the website here:",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/modelling_in_r_practice.html",
    "href": "08_Modelling_in_R/modelling_in_r_practice.html",
    "title": "Modelling in R - Practice",
    "section": "",
    "text": "This homework assignment is designed to reinforce your understanding of the tidymodels framework and its application in bioinformatics, note that it isn’t a formal assessment and so isn’t required, is just here to support your learning. Please complete all questions and code challenges. Remember to document your code and explain your reasoning where appropriate.",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Practice"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/modelling_in_r_practice.html#introduction",
    "href": "08_Modelling_in_R/modelling_in_r_practice.html#introduction",
    "title": "Modelling in R - Practice",
    "section": "",
    "text": "This homework assignment is designed to reinforce your understanding of the tidymodels framework and its application in bioinformatics, note that it isn’t a formal assessment and so isn’t required, is just here to support your learning. Please complete all questions and code challenges. Remember to document your code and explain your reasoning where appropriate.",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Practice"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/modelling_in_r_practice.html#setup",
    "href": "08_Modelling_in_R/modelling_in_r_practice.html#setup",
    "title": "Modelling in R - Practice",
    "section": "Setup",
    "text": "Setup\nFirst, load the necessary libraries and dataset. We’ll be using a simulated gene expression dataset.\n\n\nCode\nlibrary(tidymodels)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Set seed for reproducibility\nset.seed(42)\n\n# Create a simulated gene expression dataset\nn_samples &lt;- 1000\nn_genes &lt;- 50\n\ngene_expression_data &lt;- tibble(\n  sample_id = 1:n_samples,\n  condition = factor(sample(c(\"Control\", \"Treatment\"), n_samples, replace = TRUE)),\n)\n\ngene_expression = matrix(rnorm(n_samples * n_genes), nrow = n_samples)\ncolnames(gene_expression) &lt;- paste0(\"gene_\", 1:n_genes)\n\ngene_expression_data &lt;- cbind(gene_expression_data, gene_expression)",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Practice"
    ]
  },
  {
    "objectID": "08_Modelling_in_R/modelling_in_r_practice.html#questions-and-challenges",
    "href": "08_Modelling_in_R/modelling_in_r_practice.html#questions-and-challenges",
    "title": "Modelling in R - Practice",
    "section": "Questions and Challenges",
    "text": "Questions and Challenges\n\n1. Data Exploration\nExplore the gene_expression_data dataset.\n\nHow many samples and genes are in the dataset?\nCreate a boxplot comparing the expression levels of the first 5 genes between the Control and Treatment conditions.\n\n\n\nCode\n# Your code here\n\n\n\n\n2. Data Preprocessing with recipes\nCreate a recipe that does the following: - Uses condition as the outcome variable - Normalizes all gene expression variables - Performs PCA on the normalized gene expression data, keeping enough principal components to explain 90% of the variance\n\n\nCode\n# Your code here\n\n\n\n\n3. Data Splitting\nSplit the data into training (80%) and testing (20%) sets. Use stratified sampling based on the condition variable.\n\n\nCode\n# Your code here\n\n\n\n\n4. Model Specification\nSpecify a random forest model using the rand_forest() function from parsnip. Set it up for a classification task and use the “ranger” engine. Choose at least two hyperparameters to tune.\n\n\nCode\n# Your code here\n\n\n\n\n5. Create a Workflow\nCombine your recipe and model specification into a workflow.\n\n\nCode\n# Your code here\n\n\n\n\n6. Model Tuning\nSet up a grid for tuning your chosen hyperparameters. Use tune_grid() to perform 5-fold cross-validation on the training data. Visualize the results of your tuning process.\n\n\nCode\n# Your code here\n\n\n\n\n7. Final Model and Evaluation\nSelect the best model from your tuning results, finalize the workflow, and fit it to the entire training set. Then, use this final model to make predictions on the test set. Calculate and visualize at least two performance metrics of your choice.\n\n\nCode\n# Your code here\n\n\n\n\n8. Interpretation\n\nWhich genes appear to be most important in distinguishing between Control and Treatment conditions? (Hint: Look into the vip package for variable importance)\nHow well does your model perform?\nSuggest at least two ways you might improve this analysis pipeline.",
    "crumbs": [
      "Home",
      "Modelling in R",
      "Practice"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples_answers.html",
    "href": "09_ShinyApp/met581_09_shiny_code_examples_answers.html",
    "title": "Shiny Code example answers",
    "section": "",
    "text": "Here’re solutions to the challenges in the lectures",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code example solutions"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#template.r",
    "href": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#template.r",
    "title": "Shiny Code example answers",
    "section": "01_template.R",
    "text": "01_template.R\nHere we add a slider input, note that a min, max and value argument is required\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(\"blah\", \"blah again\", min = 0, max = 10, value = 5)\n)\n\nserver &lt;- function(input, output) {\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code example solutions"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#rnom_example.r",
    "href": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#rnom_example.r",
    "title": "Shiny Code example answers",
    "section": "02_rnom_example.R",
    "text": "02_rnom_example.R\nHere we add a radio button and a numeric input to control a plot\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      radioButtons(inputId=\"radio\",label=\"Radio Buttons:\",\n                   choices=list(\"red\"=\"red\",\"blue\"=\"blue\")),\n      numericInput(inputId=\"numeric\",label=\"Data\",value=1)\n      ),\n    mainPanel(\n      plotOutput(\"distPlot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$distPlot &lt;- renderPlot({\n    set.seed(1)\n    x&lt;-rnorm(input$numeric)\n    colour&lt;-input$radio\n    plot(x,type=\"o\",col=colour)\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code example solutions"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#kmeansexample.r",
    "href": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#kmeansexample.r",
    "title": "Shiny Code example answers",
    "section": "03_kmeansexample.R",
    "text": "03_kmeansexample.R\nThis solution uses a more modern style with cards. I also added another row.\nI find it simpler to lay things out with cards, and the modern bslid driven approach makes the code simpler for me, but both styles are perfectly valid!\n\n# 01-kmeans-app\n\npalette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n  \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(bslib)\n\n# UI logic\nui &lt;- page_sidebar(\n  title = \"mtcars k-means clustering\",\n  sidebar = sidebar(\n    selectInput('xcol', 'X Variable', names(mtcars)),\n    selectInput('ycol', 'Y Variable', names(mtcars),\n      selected = names(mtcars)[[2]]),\n    numericInput('clusters', 'Cluster count', 3,\n      min = 1, max = 9)\n  ),\n  layout_columns(\n    card(\n      card_header(\"A dynamically rendered plot\"),\n      plotOutput('plot1')\n    ),\n    card(\n      card_header(\"Another random plot\"),\n      plotOutput('plot2')\n    )\n  ),\n  card(\n    card_header(\"Heres a new row!\"),\n    \"We can just have some text too!\"\n  )\n)\n\n# Server logic\nserver &lt;- function(input, output, session) {\n  output$plot1 &lt;- renderPlot({\n    # filter mtcars to selected variables\n    data &lt;- mtcars[, c(input$xcol, input$ycol)]\n    # cluster data\n    clusters &lt;- kmeans(data, input$clusters)\n    # make plot \n    par(mar = c(5.1, 4.1, 0, 1))\n    plot(data,\n         col = clusters$cluster,\n         pch = 20, cex = 3)\n    points(clusters$centers, pch = 4, cex = 4, lwd = 4)\n  })\n  \n  output$plot2 &lt;- renderPlot({\n    # make plot \n    iris |&gt;\n      ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +\n      geom_point()\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code example solutions"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#observe-event",
    "href": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#observe-event",
    "title": "Shiny Code example answers",
    "section": "Observe event",
    "text": "Observe event\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(inputId = \"num\", \n              label = \"Choose a number\",\n              min = 1, max = 100, value = 25),\n  actionButton(inputId = \"go\",label = \"Action!\"),\n  # Add the output to the ui\n  verbatimTextOutput(\"print\")\n)\n\nserver &lt;- function(input, output) {\n  \n  # observe responds to the print button\n  # but not the slider\n  observeEvent(input$go, {\n    # Add an output with a render function\n   output$print &lt;- renderPrint(print(as.numeric(input$num)))\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code example solutions"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#add-a-sidebar",
    "href": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#add-a-sidebar",
    "title": "Shiny Code example answers",
    "section": "Add a sidebar",
    "text": "Add a sidebar\n\nlibrary(shiny)\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(sliderInput(inputId = 'num',label = 'myfirstslider',min=1,max=100,value=25),\n    ),\n    mainPanel(plotOutput(\"hist\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$hist &lt;- renderPlot({\n    hist(main='test',rnorm(input$num))})\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code example solutions"
    ]
  },
  {
    "objectID": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#tabnav-panels",
    "href": "09_ShinyApp/met581_09_shiny_code_examples_answers.html#tabnav-panels",
    "title": "Shiny Code example answers",
    "section": "Tab/Nav panels",
    "text": "Tab/Nav panels\n\nlibrary(shiny)\n\nui &lt;- fluidPage(title = \"Random generator\",\n  navlistPanel(              \n    tabPanel(title = \"Normal data\",\n      plotOutput(\"norm\"),\n      actionButton(\"renorm\", \"Resample\")\n    ),\n    tabPanel(title = \"Uniform data\",\n      plotOutput(\"unif\"),\n      actionButton(\"reunif\", \"Resample\")\n    ),\n    tabPanel(title = \"Chi Squared data\",\n      plotOutput(\"chisq\"),\n      actionButton(\"rechisq\", \"Resample\"),\n      tags$h1(\"helloworld\"),\n      HTML(\"&lt;h1&gt;helloworld&lt;/h1&gt;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  \n  rv &lt;- reactiveValues(\n    norm = rnorm(500), \n    unif = runif(500),\n    chisq = rchisq(500, 2))\n  \n  observeEvent(input$renorm, { rv$norm &lt;- rnorm(500) })\n  observeEvent(input$reunif, { rv$unif &lt;- runif(500) })\n  observeEvent(input$rechisq, { rv$chisq &lt;- rchisq(500, 2) })\n  \n  output$norm &lt;- renderPlot({\n    hist(rv$norm, breaks = 30, col = \"grey\", border = \"white\",\n      main = \"500 random draws from a standard normal distribution\")\n  })\n  output$unif &lt;- renderPlot({\n    hist(rv$unif, breaks = 30, col = \"grey\", border = \"white\",\n      main = \"500 random draws from a standard uniform distribution\")\n  })\n  output$chisq &lt;- renderPlot({\n    hist(rv$chisq, breaks = 30, col = \"grey\", border = \"white\",\n       main = \"500 random draws from a Chi Square distribution with two degree of freedom\")\n  })\n}\n\nshinyApp(server = server, ui = ui)",
    "crumbs": [
      "Home",
      "R Shiny",
      "Code example solutions"
    ]
  },
  {
    "objectID": "10_resources/01_workshop_answers/modelling_in_r_practice_answers.html",
    "href": "10_resources/01_workshop_answers/modelling_in_r_practice_answers.html",
    "title": "Modelling in R - Practice",
    "section": "",
    "text": "This homework assignment is designed to reinforce your understanding of the tidymodels framework and its application in bioinformatics, note that it isn’t a formal assessment and so isn’t required, is just here to support your learning. Please complete all questions and code challenges. Remember to document your code and explain your reasoning where appropriate."
  },
  {
    "objectID": "10_resources/01_workshop_answers/modelling_in_r_practice_answers.html#introduction",
    "href": "10_resources/01_workshop_answers/modelling_in_r_practice_answers.html#introduction",
    "title": "Modelling in R - Practice",
    "section": "",
    "text": "This homework assignment is designed to reinforce your understanding of the tidymodels framework and its application in bioinformatics, note that it isn’t a formal assessment and so isn’t required, is just here to support your learning. Please complete all questions and code challenges. Remember to document your code and explain your reasoning where appropriate."
  },
  {
    "objectID": "10_resources/01_workshop_answers/modelling_in_r_practice_answers.html#setup",
    "href": "10_resources/01_workshop_answers/modelling_in_r_practice_answers.html#setup",
    "title": "Modelling in R - Practice",
    "section": "Setup",
    "text": "Setup\nFirst, load the necessary libraries and dataset. We’ll be using a simulated gene expression dataset.\n\n\nCode\nlibrary(tidymodels)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Set seed for reproducibility\nset.seed(42)\n\n# Create a simulated gene expression dataset\nn_samples &lt;- 1000\nn_genes &lt;- 50\n\ngene_expression_data &lt;- tibble(\n  sample_id = 1:n_samples,\n  condition = factor(sample(c(\"Control\", \"Treatment\"), n_samples, replace = TRUE)),\n)\n\ngene_expression = matrix(rnorm(n_samples * n_genes), nrow = n_samples)\ncolnames(gene_expression) &lt;- paste0(\"gene_\", 1:n_genes)\n\ngene_expression_data &lt;- cbind(gene_expression_data, gene_expression)"
  },
  {
    "objectID": "10_resources/01_workshop_answers/modelling_in_r_practice_answers.html#questions-and-challenges",
    "href": "10_resources/01_workshop_answers/modelling_in_r_practice_answers.html#questions-and-challenges",
    "title": "Modelling in R - Practice",
    "section": "Questions and Challenges",
    "text": "Questions and Challenges\n\n1. Data Exploration\nExplore the gene_expression_data dataset.\n\nHow many samples and genes are in the dataset?\nCreate a boxplot comparing the expression levels of the first 5 genes between the Control and Treatment conditions.\n\n\n\nCode\n# Check dimensions - in this case the number of rows is the number of samples\ncat(\"Number of samples:\", nrow(gene_expression_data), \"\\n\")\n# But in other cases there might not be one row per sample\nunique(gene_expression_data$sample_id) |&gt; length()\n\ncat(\"Number of genes:\", ncol(gene_expression_data) - 2, \"\\n\") # Subtract sample_id and condition columns\n# or we could count the strings since they all have part of the name in common\ncolnames(gene_expression_data) |&gt;\n  # grepl returns a boolean for if it detects the given string\n  grepl(\"gene_\", x = _) |&gt;\n  sum()\n\n# View structure\nglimpse(gene_expression_data)\n\n\n\n\nCode\n# Reshape data for first 5 genes\nfirst_5_genes &lt;- gene_expression_data |&gt;\n  select(condition, starts_with(\"gene_\")[1:5]) |&gt;\n  pivot_longer(\n    cols = starts_with(\"gene_\"),\n    names_to = \"gene\",\n    values_to = \"expression\"\n  )\n\n# Create boxplot\nggplot(first_5_genes, aes(x = gene, y = expression, fill = condition)) +\n  geom_boxplot() +\n  theme_minimal() +\n  labs(\n    title = \"Expression Levels of First 5 Genes by Condition\",\n    x = \"Gene\",\n    y = \"Expression Level\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n2. Data Preprocessing with recipes\nCreate a recipe that does the following: - Uses condition as the outcome variable - Normalizes all gene expression variables - Performs PCA on the normalized gene expression data, keeping enough principal components to explain 90% of the variance\n\n\nCode\n# Create recipe\ngene_recipe &lt;- recipe(condition ~ ., data = gene_expression_data) %&gt;%\n  # Remove sample_id as it shouldn't be used for prediction\n  step_rm(sample_id) %&gt;%\n  # Normalize all predictors (genes)\n  step_normalize(all_predictors()) %&gt;%\n  # Perform PCA\n  step_pca(all_predictors(), threshold = 0.9)\n\n# Print recipe\ngene_recipe\n\n\n\n\n3. Data Splitting\nSplit the data into training (80%) and testing (20%) sets. Use stratified sampling based on the condition variable.\n\n\nCode\n# Split data\nset.seed(123)\ndata_split &lt;- initial_split(gene_expression_data, prop = 0.8, strata = condition)\ntrain_data &lt;- training(data_split)\ntest_data &lt;- testing(data_split)\n\n# Print split information\ncat(\"Training set size:\", nrow(train_data), \"\\n\")\ncat(\"Testing set size:\", nrow(test_data), \"\\n\")\n\n# Verify stratification\ncat(\"\\nCondition proportions in training set:\\n\")\nprop.table(table(train_data$condition))\ncat(\"\\nCondition proportions in testing set:\\n\")\nprop.table(table(test_data$condition))\n\n\n\n\n4. Model Specification\nSpecify a random forest model using the rand_forest() function from parsnip. Set it up for a classification task and use the “ranger” engine. Choose at least two hyperparameters to tune.\n\n\nCode\n# Specify random forest model\nrf_spec &lt;- rand_forest(\n  mtry = tune(),        # Number of variables to sample at each split\n  min_n = tune(),       # Minimum node size\n  trees = 1000          # Number of trees (fixed)\n) %&gt;%\n  set_engine(\"ranger\", importance = \"permutation\") %&gt;%\n  set_mode(\"classification\")\n\n# Print specification\nrf_spec\n\n\n\n\n5. Create a Workflow\nCombine your recipe and model specification into a workflow.\n\n\nCode\n# Create workflow\nrf_workflow &lt;- workflow() %&gt;%\n  add_recipe(gene_recipe) %&gt;%\n  add_model(rf_spec)\n\n# Print workflow\nrf_workflow\n\n\n\n\n6. Model Tuning\nSet up a grid for tuning your chosen hyperparameters. Use tune_grid() to perform 5-fold cross-validation on the training data. Visualize the results of your tuning process.\n\n\nCode\n# Create cross-validation folds\nset.seed(234)\ncv_folds &lt;- vfold_cv(train_data, v = 5, strata = condition)\n\n# Create tuning grid\nrf_grid &lt;- grid_regular(\n  mtry(range = c(5, 20)),\n  min_n(range = c(2, 10)),\n  levels = 5\n)\n\n# Tune model\nrf_tuning &lt;- rf_workflow %&gt;%\n  tune_grid(\n    resamples = cv_folds,\n    grid = rf_grid,\n    metrics = metric_set(accuracy, roc_auc)\n  )\n\n# Visualize tuning results\nrf_tuning %&gt;%\n  collect_metrics() %&gt;%\n  ggplot(aes(x = mtry, y = mean, color = factor(min_n))) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~.metric, scales = \"free_y\") +\n  labs(\n    title = \"Model Performance Across Hyperparameters\",\n    color = \"min_n\"\n  ) +\n  theme_minimal()\n\n\n\n\n7. Final Model and Evaluation\nSelect the best model from your tuning results, finalize the workflow, and fit it to the entire training set. Then, use this final model to make predictions on the test set. Calculate and visualize at least two performance metrics of your choice.\n\n\nCode\n# Select best hyperparameters\nbest_params &lt;- rf_tuning %&gt;%\n  select_best(metric = \"roc_auc\")\n\n# Finalize workflow\nfinal_workflow &lt;- rf_workflow %&gt;%\n  finalize_workflow(best_params)\n\n# Fit final model\nfinal_fit &lt;- final_workflow %&gt;%\n  fit(train_data)\n\n# Make predictions on test set\npredictions &lt;- final_fit %&gt;%\n  predict(test_data) %&gt;%\n  bind_cols(\n    predict(final_fit, test_data, type = \"prob\"),\n    test_data\n  )\n\n# Calculate metrics\nmetrics &lt;- predictions %&gt;%\n  metrics(truth = condition, estimate = .pred_class)\n\n# Create ROC curve\nroc_curve &lt;- predictions %&gt;%\n  roc_curve(condition, .pred_Control) %&gt;%\n  autoplot()\n\n# Create confusion matrix\nconf_mat &lt;- predictions %&gt;%\n  conf_mat(truth = condition, estimate = .pred_class) %&gt;%\n  autoplot(type = \"heatmap\")\n\n# Display results\ncat(\"Model Performance Metrics:\\n\")\nprint(metrics)\n\nprint(roc_curve)\nprint(conf_mat)\n\n\n\n\n8. Interpretation\n\nWhich genes appear to be most important in distinguishing between Control and Treatment conditions? (Hint: Look into the vip package for variable importance)\nHow well does your model perform?\nSuggest at least two ways you might improve this analysis pipeline.\n\n\n\nCode\n# Extract variable importance\nfinal_fit %&gt;%\n  extract_fit_parsnip() %&gt;%\n  vip(num_features = 10) +\n  labs(title = \"Top 10 Most Important Genes\")\n\n\n\nPotential Improvements:\n\nFeature selection: We could implement a pre-processing step to select the most relevant genes before modeling. Try different algorithms: Compare random forest performance with other algorithms like XGBoost or elastic net. Could try using bootstrap validation instead of cross-fold\nGood luck!"
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#quick-for-loop-practise",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#quick-for-loop-practise",
    "title": "Programming in R",
    "section": "Quick for loop practise",
    "text": "Quick for loop practise\n\nWrite a for loop that prints the numbers 1 to 5.\nGiven the vector below, write a loop that prints each name with a short message.\n\nnames &lt;- c(\"Alice\", \"Ben\", \"Chun\", \"Deepa\")\n\nCreate a small multiplication table using nested loops.\n\nfor (i in 1:3) {\n  for (j in 1:3) {\n    # your code here\n  }\n}",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "06_Programming_in_R/met581_06_programming_in_r.html#map-practise",
    "href": "06_Programming_in_R/met581_06_programming_in_r.html#map-practise",
    "title": "Programming in R",
    "section": "map practise!",
    "text": "map practise!\n\nWrite a map call that prints the numbers 1 to 5.\nGiven the vector below, write a loop that prints each name with a short message.\n\nnames &lt;- c(\"Alice\", \"Ben\", \"Chun\", \"Deepa\")\n\nCompute the mean of each of the columns in this dataframe\n\n\ndf &lt;- data.frame(\n  height = c(160, 170, 168, 175, 180),\n  weight = c(55, 68, 70, 80, 77),\n  age = c(22, 25, 24, 28, 30)\n)",
    "crumbs": [
      "Home",
      "Programming in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#plotting-practise",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#plotting-practise",
    "title": "Data Visualisation in R",
    "section": "Plotting practise!",
    "text": "Plotting practise!\n\nUsing the mtcars data:\n\nVisualise the relationship between engine size (displ) and highway mileage (hwy). What relationship do you see?\nAdd colour to show a categorical variable (e.g. class). Does adding color help you notice anything?\nCount cars by manufacturer in a plot. Try reording the bars by frequency.",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#more-pracise",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#more-pracise",
    "title": "Data Visualisation in R",
    "section": "More pracise",
    "text": "More pracise\n\nUsing the same data (mpg), build on your earlier scatterplot of displ vs hwy by adding a trend line.\nAdd two different geoms to the same plot. Experiment!\nUse faceting to compare trends across drive types (drv).\nStart with a bar plot of drive type (drv) by cylinder (cyl):\n\nggplot(mpg, aes(x = drv, fill = factor(cyl))) +\n  geom_bar()\n\nThen try setting position to fill or dodge. What changes?\nAdd clear axis labels, a title, subtitle, and caption to a plot",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#more-elegant-annotations",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#more-elegant-annotations",
    "title": "Data Visualisation in R",
    "section": "More elegant annotations",
    "text": "More elegant annotations\n\ntop10 &lt;- mpg |&gt; slice_max(hwy, n = 10)\nmpg_top &lt;- mpg |&gt;\n  mutate(lbl = if_else(model %in% top10$model, model, NA))\n\nggplot(mpg_top, aes(displ, hwy)) +\n  geom_point(alpha = 0.6) +\n  geom_text_repel(aes(label = lbl), na.rm = TRUE) +\n  labs(title = \"Top 10 Highway MPG Models\")",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#yet-more-practise",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#yet-more-practise",
    "title": "Data Visualisation in R",
    "section": "Yet more practise",
    "text": "Yet more practise\n\nUsing the mpg dataset, label only cars with hwy &gt; 35 & displ &lt; 2, using geom_text_repel() so labels don’t overlap.\nOn mpg, set x breaks at integers and y limits to 10–50.\nSave a plot object as both high-res PNG and vector PDF.",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#plotting-practice",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#plotting-practice",
    "title": "Data Visualisation in R",
    "section": "Plotting practice!",
    "text": "Plotting practice!\n\nUsing the mpg data:\n\nVisualise the relationship between engine size (displ) and highway mileage (hwy). What relationship do you see?\nAdd colour to show a categorical variable (e.g. class). Does adding color help you notice anything?\nCount cars by manufacturer in a plot. Try reording the bars by frequency.",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#more-practice",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#more-practice",
    "title": "Data Visualisation in R",
    "section": "More practice",
    "text": "More practice\n\nUsing the same data (mpg), build on your earlier scatterplot of displ vs hwy by adding a trend line.\nAdd two different geoms to the same plot. Experiment!\nUse faceting to compare trends across drive types (drv).\nStart with a bar plot of drive type (drv) by cylinder (cyl):\n\nggplot(mpg, aes(x = drv, fill = factor(cyl))) +\n  geom_bar()\n\nThen try setting position to fill or dodge. What changes?\nAdd clear axis labels, a title, subtitle, and caption to a plot",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  },
  {
    "objectID": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#yet-more-practice",
    "href": "07_Data_Visualisation_in_R/met581_07_data_visualisation_in_r.html#yet-more-practice",
    "title": "Data Visualisation in R",
    "section": "Yet more practice",
    "text": "Yet more practice\n\nUsing the mpg dataset, label only cars with hwy &gt; 35 & displ &lt; 2, using geom_text_repel() so labels don’t overlap.\nOn mpg, set x breaks at integers and y limits to 10–50.\nSave a plot object as both high-res PNG and vector PDF.",
    "crumbs": [
      "Home",
      "Data Visualisation in R",
      "Slides"
    ]
  }
]