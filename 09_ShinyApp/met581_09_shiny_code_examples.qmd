---
title: "Shiny Code examples"
author:
  - name: "Gabriel Mateus Bernardo Harrington"
    orcid: 0000-0001-6075-3619
    email: bernardo-harringtong@cardiff.ac.uk
    affiliations: 
      - ref: cardiff
      - ref: dri
    degrees: 
      - PhD
affiliations:
  - id: cardiff
    name: Cardiff University
    city: Cardiff
    url: www.cardiff.ac.uk
  - id: dri
    name: UK Dementia Research Institue
    url: https://ukdri.ac.uk/
format: 
  html: 
    toc: true
execute: 
  echo: true
  eval: false
---

I'll include all the shiny code examples below for easy copying

# Lecture 1 examples

## 00_starthere.R

```{r}
# This is the code to make the 01_hello example app

library(shiny)
library(bslib)

# Define UI for app that draws a histogram ----
ui <- page_sidebar(
  # App title ----
  title = "Hello Shiny!",
  # Sidebar panel for inputs ----
  sidebar = sidebar(
    # Input: Slider for the number of bins ----
    sliderInput(
      inputId = "bins",
      label = "Number of bins:",
      min = 1,
      max = 50,
      value = 30
    )
  ),
  # Output: Histogram ----
  card(plotOutput(outputId = "distPlot"))
)

# Define server logic required to draw a histogram ----
server <- function(input, output) {
  
  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot
  output$distPlot <- renderPlot({
    
    x    <- faithful$waiting
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    
    hist(x, breaks = bins, col = "#007bc2", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times")
    
  })
  
}

shinyApp(ui = ui, server = server)
```

## 01_template.R

```{r}
library(shiny)

ui <- fluidPage()

server <- function(input, output) {
}

shinyApp(ui = ui, server = server)

library(shiny)
```

## 02_rnom_example.R

```{r}
library(shiny)

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      radioButtons(inputId="radio",label="Radio Buttons:",
                   choices=list("red"="red","blue"="blue")),
      numericInput(inputId="numeric",label="Data",value=1)
      ),
    mainPanel(
      plotOutput("distPlot")
    )
  )
)

server <- function(input, output) {
  output$distPlot <- renderPlot({
    set.seed(1)
    x<-rnorm(input$numeric)
    colour<-input$radio
    plot(x,type="o",col=colour)
  })
}

shinyApp(ui = ui, server = server)
```

## 03_kmeansexample.R

```{r}
# 01-kmeans-app

palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
  "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))

library(shiny)

ui <- fluidPage(
  headerPanel('Iris k-means clustering'),
  sidebarPanel(
    selectInput('xcol', 'X Variable', names(iris)),
    selectInput('ycol', 'Y Variable', names(iris),
      selected = names(iris)[[2]]),
    numericInput('clusters', 'Cluster count', 3,
      min = 1, max = 9)
  ),
  mainPanel(
    plotOutput('plot1')
  )
)

server <- function(input, output) {

  selectedData <- reactive({
    iris[, c(input$xcol, input$ycol)]
  })

  clusters <- reactive({
    kmeans(selectedData(), input$clusters)
  })

  output$plot1 <- renderPlot({
    par(mar = c(5.1, 4.1, 0, 1))
    plot(selectedData(),
         col = clusters()$cluster,
         pch = 20, cex = 3)
    points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
  })

}

shinyApp(ui = ui, server = server)
```

# Lecture 2 examples